// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateDataSourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case configuration = "Configuration"
        case customDocumentEnrichmentConfiguration = "CustomDocumentEnrichmentConfiguration"
        case description = "Description"
        case indexId = "IndexId"
        case languageCode = "LanguageCode"
        case name = "Name"
        case roleArn = "RoleArn"
        case schedule = "Schedule"
        case tags = "Tags"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let configuration = configuration {
            try encodeContainer.encode(configuration, forKey: .configuration)
        }
        if let customDocumentEnrichmentConfiguration = customDocumentEnrichmentConfiguration {
            try encodeContainer.encode(customDocumentEnrichmentConfiguration, forKey: .customDocumentEnrichmentConfiguration)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let indexId = indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode, forKey: .languageCode)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let schedule = schedule {
            try encodeContainer.encode(schedule, forKey: .schedule)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }
}
