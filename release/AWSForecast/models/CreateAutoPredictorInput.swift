// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateAutoPredictorInput: Swift.Equatable {
    /// The data configuration for your dataset group and any additional datasets.
    public var dataConfig: ForecastClientTypes.DataConfig?
    /// An AWS Key Management Service (KMS) key and an AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the key. You can specify this optional object in the [CreateDataset] and [CreatePredictor] requests.
    public var encryptionConfig: ForecastClientTypes.EncryptionConfig?
    public var explainPredictor: Swift.Bool?
    /// An array of dimension (field) names that specify how to group the generated forecast. For example, if you are generating forecasts for item sales across all your stores, and your dataset contains a store_id field, you would specify store_id as a dimension to group sales forecasts for each store.
    public var forecastDimensions: [Swift.String]?
    /// The frequency of predictions in a forecast. Valid intervals are Y (Year), M (Month), W (Week), D (Day), H (Hour), 30min (30 minutes), 15min (15 minutes), 10min (10 minutes), 5min (5 minutes), and 1min (1 minute). For example, "Y" indicates every year and "5min" indicates every five minutes. The frequency must be greater than or equal to the TARGET_TIME_SERIES dataset frequency. When a RELATED_TIME_SERIES dataset is provided, the frequency must be equal to the RELATED_TIME_SERIES dataset frequency.
    public var forecastFrequency: Swift.String?
    /// The number of time-steps that the model predicts. The forecast horizon is also called the prediction length.
    public var forecastHorizon: Swift.Int?
    /// The forecast types used to train a predictor. You can specify up to five forecast types. Forecast types can be quantiles from 0.01 to 0.99, by increments of 0.01 or higher. You can also specify the mean forecast with mean.
    public var forecastTypes: [Swift.String]?
    /// The accuracy metric used to optimize the predictor.
    public var optimizationMetric: ForecastClientTypes.OptimizationMetric?
    /// A unique name for the predictor
    /// This member is required.
    public var predictorName: Swift.String?
    /// The ARN of the predictor to retrain or upgrade. This parameter is only used when retraining or upgrading a predictor. When creating a new predictor, do not specify a value for this parameter. When upgrading or retraining a predictor, only specify values for the ReferencePredictorArn and PredictorName. The value for PredictorName must be a unique predictor name.
    public var referencePredictorArn: Swift.String?
    /// Optional metadata to help you categorize and organize your predictors. Each tag consists of a key and an optional value, both of which you define. Tag keys and values are case sensitive. The following restrictions apply to tags:
    ///
    /// * For each resource, each tag key must be unique and each tag key must have one value.
    ///
    /// * Maximum number of tags per resource: 50.
    ///
    /// * Maximum key length: 128 Unicode characters in UTF-8.
    ///
    /// * Maximum value length: 256 Unicode characters in UTF-8.
    ///
    /// * Accepted characters: all letters and numbers, spaces representable in UTF-8, and + - = . _ : / @. If your tagging schema is used across other services and resources, the character restrictions of those services also apply.
    ///
    /// * Key prefixes cannot include any upper or lowercase combination of aws: or AWS:. Values can have this prefix. If a tag value has aws as its prefix but the key does not, Forecast considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of aws do not count against your tags per resource limit. You cannot edit or delete tag keys with this prefix.
    public var tags: [ForecastClientTypes.Tag]?

    public init (
        dataConfig: ForecastClientTypes.DataConfig? = nil,
        encryptionConfig: ForecastClientTypes.EncryptionConfig? = nil,
        explainPredictor: Swift.Bool? = nil,
        forecastDimensions: [Swift.String]? = nil,
        forecastFrequency: Swift.String? = nil,
        forecastHorizon: Swift.Int? = nil,
        forecastTypes: [Swift.String]? = nil,
        optimizationMetric: ForecastClientTypes.OptimizationMetric? = nil,
        predictorName: Swift.String? = nil,
        referencePredictorArn: Swift.String? = nil,
        tags: [ForecastClientTypes.Tag]? = nil
    )
    {
        self.dataConfig = dataConfig
        self.encryptionConfig = encryptionConfig
        self.explainPredictor = explainPredictor
        self.forecastDimensions = forecastDimensions
        self.forecastFrequency = forecastFrequency
        self.forecastHorizon = forecastHorizon
        self.forecastTypes = forecastTypes
        self.optimizationMetric = optimizationMetric
        self.predictorName = predictorName
        self.referencePredictorArn = referencePredictorArn
        self.tags = tags
    }
}
