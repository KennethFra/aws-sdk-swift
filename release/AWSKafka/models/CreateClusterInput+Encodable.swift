// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateClusterInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case brokerNodeGroupInfo = "brokerNodeGroupInfo"
        case clientAuthentication = "clientAuthentication"
        case clusterName = "clusterName"
        case configurationInfo = "configurationInfo"
        case encryptionInfo = "encryptionInfo"
        case enhancedMonitoring = "enhancedMonitoring"
        case kafkaVersion = "kafkaVersion"
        case loggingInfo = "loggingInfo"
        case numberOfBrokerNodes = "numberOfBrokerNodes"
        case openMonitoring = "openMonitoring"
        case tags = "tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let brokerNodeGroupInfo = brokerNodeGroupInfo {
            try encodeContainer.encode(brokerNodeGroupInfo, forKey: .brokerNodeGroupInfo)
        }
        if let clientAuthentication = clientAuthentication {
            try encodeContainer.encode(clientAuthentication, forKey: .clientAuthentication)
        }
        if let clusterName = clusterName {
            try encodeContainer.encode(clusterName, forKey: .clusterName)
        }
        if let configurationInfo = configurationInfo {
            try encodeContainer.encode(configurationInfo, forKey: .configurationInfo)
        }
        if let encryptionInfo = encryptionInfo {
            try encodeContainer.encode(encryptionInfo, forKey: .encryptionInfo)
        }
        if let enhancedMonitoring = enhancedMonitoring {
            try encodeContainer.encode(enhancedMonitoring.rawValue, forKey: .enhancedMonitoring)
        }
        if let kafkaVersion = kafkaVersion {
            try encodeContainer.encode(kafkaVersion, forKey: .kafkaVersion)
        }
        if let loggingInfo = loggingInfo {
            try encodeContainer.encode(loggingInfo, forKey: .loggingInfo)
        }
        if let numberOfBrokerNodes = numberOfBrokerNodes {
            try encodeContainer.encode(numberOfBrokerNodes, forKey: .numberOfBrokerNodes)
        }
        if let openMonitoring = openMonitoring {
            try encodeContainer.encode(openMonitoring, forKey: .openMonitoring)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, __mapof__string0) in tags {
                try tagsContainer.encode(__mapof__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}
