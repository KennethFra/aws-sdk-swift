// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeDataIngestionJobOutputResponseBody: Swift.Equatable {
    let jobId: Swift.String?
    let datasetArn: Swift.String?
    let ingestionInputConfiguration: LookoutEquipmentClientTypes.IngestionInputConfiguration?
    let roleArn: Swift.String?
    let createdAt: ClientRuntime.Date?
    let status: LookoutEquipmentClientTypes.IngestionJobStatus?
    let failedReason: Swift.String?
}

extension DescribeDataIngestionJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case datasetArn = "DatasetArn"
        case failedReason = "FailedReason"
        case ingestionInputConfiguration = "IngestionInputConfiguration"
        case jobId = "JobId"
        case roleArn = "RoleArn"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let datasetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetArn)
        datasetArn = datasetArnDecoded
        let ingestionInputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.IngestionInputConfiguration.self, forKey: .ingestionInputConfiguration)
        ingestionInputConfiguration = ingestionInputConfigurationDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.IngestionJobStatus.self, forKey: .status)
        status = statusDecoded
        let failedReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failedReason)
        failedReason = failedReasonDecoded
    }
}
