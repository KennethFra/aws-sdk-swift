// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaConnectClientTypes.Transport: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cidrAllowList = "cidrAllowList"
        case maxBitrate = "maxBitrate"
        case maxLatency = "maxLatency"
        case maxSyncBuffer = "maxSyncBuffer"
        case minLatency = "minLatency"
        case `protocol` = "protocol"
        case remoteId = "remoteId"
        case smoothingLatency = "smoothingLatency"
        case streamId = "streamId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cidrAllowList = cidrAllowList {
            var cidrAllowListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cidrAllowList)
            for __listof__string0 in cidrAllowList {
                try cidrAllowListContainer.encode(__listof__string0)
            }
        }
        if let maxBitrate = maxBitrate {
            try encodeContainer.encode(maxBitrate, forKey: .maxBitrate)
        }
        if let maxLatency = maxLatency {
            try encodeContainer.encode(maxLatency, forKey: .maxLatency)
        }
        if let maxSyncBuffer = maxSyncBuffer {
            try encodeContainer.encode(maxSyncBuffer, forKey: .maxSyncBuffer)
        }
        if let minLatency = minLatency {
            try encodeContainer.encode(minLatency, forKey: .minLatency)
        }
        if let `protocol` = `protocol` {
            try encodeContainer.encode(`protocol`.rawValue, forKey: .`protocol`)
        }
        if let remoteId = remoteId {
            try encodeContainer.encode(remoteId, forKey: .remoteId)
        }
        if let smoothingLatency = smoothingLatency {
            try encodeContainer.encode(smoothingLatency, forKey: .smoothingLatency)
        }
        if let streamId = streamId {
            try encodeContainer.encode(streamId, forKey: .streamId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cidrAllowListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .cidrAllowList)
        var cidrAllowListDecoded0:[Swift.String]? = nil
        if let cidrAllowListContainer = cidrAllowListContainer {
            cidrAllowListDecoded0 = [Swift.String]()
            for string0 in cidrAllowListContainer {
                if let string0 = string0 {
                    cidrAllowListDecoded0?.append(string0)
                }
            }
        }
        cidrAllowList = cidrAllowListDecoded0
        let maxBitrateDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxBitrate)
        maxBitrate = maxBitrateDecoded
        let maxLatencyDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxLatency)
        maxLatency = maxLatencyDecoded
        let maxSyncBufferDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxSyncBuffer)
        maxSyncBuffer = maxSyncBufferDecoded
        let minLatencyDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minLatency)
        minLatency = minLatencyDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(MediaConnectClientTypes.ModelProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let remoteIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .remoteId)
        remoteId = remoteIdDecoded
        let smoothingLatencyDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .smoothingLatency)
        smoothingLatency = smoothingLatencyDecoded
        let streamIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamId)
        streamId = streamIdDecoded
    }
}
