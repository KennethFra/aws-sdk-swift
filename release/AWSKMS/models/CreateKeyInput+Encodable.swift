// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateKeyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bypassPolicyLockoutSafetyCheck = "BypassPolicyLockoutSafetyCheck"
        case customKeyStoreId = "CustomKeyStoreId"
        case customerMasterKeySpec = "CustomerMasterKeySpec"
        case description = "Description"
        case keySpec = "KeySpec"
        case keyUsage = "KeyUsage"
        case multiRegion = "MultiRegion"
        case origin = "Origin"
        case policy = "Policy"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if bypassPolicyLockoutSafetyCheck != false {
            try encodeContainer.encode(bypassPolicyLockoutSafetyCheck, forKey: .bypassPolicyLockoutSafetyCheck)
        }
        if let customKeyStoreId = customKeyStoreId {
            try encodeContainer.encode(customKeyStoreId, forKey: .customKeyStoreId)
        }
        if let customerMasterKeySpec = customerMasterKeySpec {
            try encodeContainer.encode(customerMasterKeySpec.rawValue, forKey: .customerMasterKeySpec)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let keySpec = keySpec {
            try encodeContainer.encode(keySpec.rawValue, forKey: .keySpec)
        }
        if let keyUsage = keyUsage {
            try encodeContainer.encode(keyUsage.rawValue, forKey: .keyUsage)
        }
        if let multiRegion = multiRegion {
            try encodeContainer.encode(multiRegion, forKey: .multiRegion)
        }
        if let origin = origin {
            try encodeContainer.encode(origin.rawValue, forKey: .origin)
        }
        if let policy = policy {
            try encodeContainer.encode(policy, forKey: .policy)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}
