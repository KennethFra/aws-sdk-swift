// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateAuthorizerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authType
        case authorizerCredentials
        case authorizerResultTtlInSeconds
        case authorizerUri
        case identitySource
        case identityValidationExpression
        case name
        case providerARNs
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authType = authType {
            try encodeContainer.encode(authType, forKey: .authType)
        }
        if let authorizerCredentials = authorizerCredentials {
            try encodeContainer.encode(authorizerCredentials, forKey: .authorizerCredentials)
        }
        if let authorizerResultTtlInSeconds = authorizerResultTtlInSeconds {
            try encodeContainer.encode(authorizerResultTtlInSeconds, forKey: .authorizerResultTtlInSeconds)
        }
        if let authorizerUri = authorizerUri {
            try encodeContainer.encode(authorizerUri, forKey: .authorizerUri)
        }
        if let identitySource = identitySource {
            try encodeContainer.encode(identitySource, forKey: .identitySource)
        }
        if let identityValidationExpression = identityValidationExpression {
            try encodeContainer.encode(identityValidationExpression, forKey: .identityValidationExpression)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let providerARNs = providerARNs {
            var providerARNsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .providerARNs)
            for listofarns0 in providerARNs {
                try providerARNsContainer.encode(listofarns0)
            }
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }
}
