// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Represents a usage plan than can specify who can assess associated API stages with specified request limits and quotas. In a usage plan, you associate an API by specifying the API's Id and a stage name of the specified API. You add plan customers by adding API keys to the plan. [Create and Use Usage Plans](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-api-usage-plans.html)
public struct GetUsagePlanOutputResponse: Swift.Equatable {
    /// The associated API stages of a usage plan.
    public var apiStages: [ApiGatewayClientTypes.ApiStage]?
    /// The description of a usage plan.
    public var description: Swift.String?
    /// The identifier of a [UsagePlan] resource.
    public var id: Swift.String?
    /// The name of a usage plan.
    public var name: Swift.String?
    /// The AWS Markeplace product identifier to associate with the usage plan as a SaaS product on AWS Marketplace.
    public var productCode: Swift.String?
    /// The maximum number of permitted requests per a given unit time interval.
    public var quota: ApiGatewayClientTypes.QuotaSettings?
    /// The collection of tags. Each tag element is associated with a given resource.
    public var tags: [Swift.String:Swift.String]?
    /// The request throttle limits of a usage plan.
    public var throttle: ApiGatewayClientTypes.ThrottleSettings?

    public init (
        apiStages: [ApiGatewayClientTypes.ApiStage]? = nil,
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        name: Swift.String? = nil,
        productCode: Swift.String? = nil,
        quota: ApiGatewayClientTypes.QuotaSettings? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        throttle: ApiGatewayClientTypes.ThrottleSettings? = nil
    )
    {
        self.apiStages = apiStages
        self.description = description
        self.id = id
        self.name = name
        self.productCode = productCode
        self.quota = quota
        self.tags = tags
        self.throttle = throttle
    }
}
