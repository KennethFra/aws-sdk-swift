// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CodeDeployClientTypes.DeploymentOverview: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failed = "Failed"
        case inProgress = "InProgress"
        case pending = "Pending"
        case ready = "Ready"
        case skipped = "Skipped"
        case succeeded = "Succeeded"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if failed != 0 {
            try encodeContainer.encode(failed, forKey: .failed)
        }
        if inProgress != 0 {
            try encodeContainer.encode(inProgress, forKey: .inProgress)
        }
        if pending != 0 {
            try encodeContainer.encode(pending, forKey: .pending)
        }
        if ready != 0 {
            try encodeContainer.encode(ready, forKey: .ready)
        }
        if skipped != 0 {
            try encodeContainer.encode(skipped, forKey: .skipped)
        }
        if succeeded != 0 {
            try encodeContainer.encode(succeeded, forKey: .succeeded)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pendingDecoded = try containerValues.decode(Swift.Int.self, forKey: .pending)
        pending = pendingDecoded
        let inProgressDecoded = try containerValues.decode(Swift.Int.self, forKey: .inProgress)
        inProgress = inProgressDecoded
        let succeededDecoded = try containerValues.decode(Swift.Int.self, forKey: .succeeded)
        succeeded = succeededDecoded
        let failedDecoded = try containerValues.decode(Swift.Int.self, forKey: .failed)
        failed = failedDecoded
        let skippedDecoded = try containerValues.decode(Swift.Int.self, forKey: .skipped)
        skipped = skippedDecoded
        let readyDecoded = try containerValues.decode(Swift.Int.self, forKey: .ready)
        ready = readyDecoded
    }
}
