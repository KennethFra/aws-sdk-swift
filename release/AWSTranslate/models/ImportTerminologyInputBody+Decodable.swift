// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ImportTerminologyInputBody: Swift.Equatable {
    let name: Swift.String?
    let mergeStrategy: TranslateClientTypes.MergeStrategy?
    let description: Swift.String?
    let terminologyData: TranslateClientTypes.TerminologyData?
    let encryptionKey: TranslateClientTypes.EncryptionKey?
}

extension ImportTerminologyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case encryptionKey = "EncryptionKey"
        case mergeStrategy = "MergeStrategy"
        case name = "Name"
        case terminologyData = "TerminologyData"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let mergeStrategyDecoded = try containerValues.decodeIfPresent(TranslateClientTypes.MergeStrategy.self, forKey: .mergeStrategy)
        mergeStrategy = mergeStrategyDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let terminologyDataDecoded = try containerValues.decodeIfPresent(TranslateClientTypes.TerminologyData.self, forKey: .terminologyData)
        terminologyData = terminologyDataDecoded
        let encryptionKeyDecoded = try containerValues.decodeIfPresent(TranslateClientTypes.EncryptionKey.self, forKey: .encryptionKey)
        encryptionKey = encryptionKeyDecoded
    }
}
