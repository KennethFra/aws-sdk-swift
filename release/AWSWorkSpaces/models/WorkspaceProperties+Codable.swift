// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension WorkSpacesClientTypes.WorkspaceProperties: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeTypeName = "ComputeTypeName"
        case rootVolumeSizeGib = "RootVolumeSizeGib"
        case runningMode = "RunningMode"
        case runningModeAutoStopTimeoutInMinutes = "RunningModeAutoStopTimeoutInMinutes"
        case userVolumeSizeGib = "UserVolumeSizeGib"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let computeTypeName = computeTypeName {
            try encodeContainer.encode(computeTypeName.rawValue, forKey: .computeTypeName)
        }
        if let rootVolumeSizeGib = rootVolumeSizeGib {
            try encodeContainer.encode(rootVolumeSizeGib, forKey: .rootVolumeSizeGib)
        }
        if let runningMode = runningMode {
            try encodeContainer.encode(runningMode.rawValue, forKey: .runningMode)
        }
        if let runningModeAutoStopTimeoutInMinutes = runningModeAutoStopTimeoutInMinutes {
            try encodeContainer.encode(runningModeAutoStopTimeoutInMinutes, forKey: .runningModeAutoStopTimeoutInMinutes)
        }
        if let userVolumeSizeGib = userVolumeSizeGib {
            try encodeContainer.encode(userVolumeSizeGib, forKey: .userVolumeSizeGib)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let runningModeDecoded = try containerValues.decodeIfPresent(WorkSpacesClientTypes.RunningMode.self, forKey: .runningMode)
        runningMode = runningModeDecoded
        let runningModeAutoStopTimeoutInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .runningModeAutoStopTimeoutInMinutes)
        runningModeAutoStopTimeoutInMinutes = runningModeAutoStopTimeoutInMinutesDecoded
        let rootVolumeSizeGibDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .rootVolumeSizeGib)
        rootVolumeSizeGib = rootVolumeSizeGibDecoded
        let userVolumeSizeGibDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .userVolumeSizeGib)
        userVolumeSizeGib = userVolumeSizeGibDecoded
        let computeTypeNameDecoded = try containerValues.decodeIfPresent(WorkSpacesClientTypes.Compute.self, forKey: .computeTypeName)
        computeTypeName = computeTypeNameDecoded
    }
}
