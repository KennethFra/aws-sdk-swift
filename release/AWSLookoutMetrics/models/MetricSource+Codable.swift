// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LookoutMetricsClientTypes.MetricSource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appFlowConfig = "AppFlowConfig"
        case cloudWatchConfig = "CloudWatchConfig"
        case rDSSourceConfig = "RDSSourceConfig"
        case redshiftSourceConfig = "RedshiftSourceConfig"
        case s3SourceConfig = "S3SourceConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appFlowConfig = appFlowConfig {
            try encodeContainer.encode(appFlowConfig, forKey: .appFlowConfig)
        }
        if let cloudWatchConfig = cloudWatchConfig {
            try encodeContainer.encode(cloudWatchConfig, forKey: .cloudWatchConfig)
        }
        if let rDSSourceConfig = rDSSourceConfig {
            try encodeContainer.encode(rDSSourceConfig, forKey: .rDSSourceConfig)
        }
        if let redshiftSourceConfig = redshiftSourceConfig {
            try encodeContainer.encode(redshiftSourceConfig, forKey: .redshiftSourceConfig)
        }
        if let s3SourceConfig = s3SourceConfig {
            try encodeContainer.encode(s3SourceConfig, forKey: .s3SourceConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3SourceConfigDecoded = try containerValues.decodeIfPresent(LookoutMetricsClientTypes.S3SourceConfig.self, forKey: .s3SourceConfig)
        s3SourceConfig = s3SourceConfigDecoded
        let appFlowConfigDecoded = try containerValues.decodeIfPresent(LookoutMetricsClientTypes.AppFlowConfig.self, forKey: .appFlowConfig)
        appFlowConfig = appFlowConfigDecoded
        let cloudWatchConfigDecoded = try containerValues.decodeIfPresent(LookoutMetricsClientTypes.CloudWatchConfig.self, forKey: .cloudWatchConfig)
        cloudWatchConfig = cloudWatchConfigDecoded
        let rDSSourceConfigDecoded = try containerValues.decodeIfPresent(LookoutMetricsClientTypes.RDSSourceConfig.self, forKey: .rDSSourceConfig)
        rDSSourceConfig = rDSSourceConfigDecoded
        let redshiftSourceConfigDecoded = try containerValues.decodeIfPresent(LookoutMetricsClientTypes.RedshiftSourceConfig.self, forKey: .redshiftSourceConfig)
        redshiftSourceConfig = redshiftSourceConfigDecoded
    }
}
