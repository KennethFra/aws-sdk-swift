// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateAnomalyDetectorInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case anomalyDetectorConfig = "AnomalyDetectorConfig"
        case anomalyDetectorDescription = "AnomalyDetectorDescription"
        case anomalyDetectorName = "AnomalyDetectorName"
        case kmsKeyArn = "KmsKeyArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let anomalyDetectorConfig = anomalyDetectorConfig {
            try encodeContainer.encode(anomalyDetectorConfig, forKey: .anomalyDetectorConfig)
        }
        if let anomalyDetectorDescription = anomalyDetectorDescription {
            try encodeContainer.encode(anomalyDetectorDescription, forKey: .anomalyDetectorDescription)
        }
        if let anomalyDetectorName = anomalyDetectorName {
            try encodeContainer.encode(anomalyDetectorName, forKey: .anomalyDetectorName)
        }
        if let kmsKeyArn = kmsKeyArn {
            try encodeContainer.encode(kmsKeyArn, forKey: .kmsKeyArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}
