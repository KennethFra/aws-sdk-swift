// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NetworkManagerClientTypes.RouteAnalysis: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destination = "Destination"
        case forwardPath = "ForwardPath"
        case globalNetworkId = "GlobalNetworkId"
        case includeReturnPath = "IncludeReturnPath"
        case ownerAccountId = "OwnerAccountId"
        case returnPath = "ReturnPath"
        case routeAnalysisId = "RouteAnalysisId"
        case source = "Source"
        case startTimestamp = "StartTimestamp"
        case status = "Status"
        case useMiddleboxes = "UseMiddleboxes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destination = destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let forwardPath = forwardPath {
            try encodeContainer.encode(forwardPath, forKey: .forwardPath)
        }
        if let globalNetworkId = globalNetworkId {
            try encodeContainer.encode(globalNetworkId, forKey: .globalNetworkId)
        }
        if includeReturnPath != false {
            try encodeContainer.encode(includeReturnPath, forKey: .includeReturnPath)
        }
        if let ownerAccountId = ownerAccountId {
            try encodeContainer.encode(ownerAccountId, forKey: .ownerAccountId)
        }
        if let returnPath = returnPath {
            try encodeContainer.encode(returnPath, forKey: .returnPath)
        }
        if let routeAnalysisId = routeAnalysisId {
            try encodeContainer.encode(routeAnalysisId, forKey: .routeAnalysisId)
        }
        if let source = source {
            try encodeContainer.encode(source, forKey: .source)
        }
        if let startTimestamp = startTimestamp {
            try encodeContainer.encode(startTimestamp.timeIntervalSince1970, forKey: .startTimestamp)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if useMiddleboxes != false {
            try encodeContainer.encode(useMiddleboxes, forKey: .useMiddleboxes)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let globalNetworkIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .globalNetworkId)
        globalNetworkId = globalNetworkIdDecoded
        let ownerAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccountId)
        ownerAccountId = ownerAccountIdDecoded
        let routeAnalysisIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .routeAnalysisId)
        routeAnalysisId = routeAnalysisIdDecoded
        let startTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTimestamp)
        startTimestamp = startTimestampDecoded
        let statusDecoded = try containerValues.decodeIfPresent(NetworkManagerClientTypes.RouteAnalysisStatus.self, forKey: .status)
        status = statusDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(NetworkManagerClientTypes.RouteAnalysisEndpointOptions.self, forKey: .source)
        source = sourceDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(NetworkManagerClientTypes.RouteAnalysisEndpointOptions.self, forKey: .destination)
        destination = destinationDecoded
        let includeReturnPathDecoded = try containerValues.decode(Swift.Bool.self, forKey: .includeReturnPath)
        includeReturnPath = includeReturnPathDecoded
        let useMiddleboxesDecoded = try containerValues.decode(Swift.Bool.self, forKey: .useMiddleboxes)
        useMiddleboxes = useMiddleboxesDecoded
        let forwardPathDecoded = try containerValues.decodeIfPresent(NetworkManagerClientTypes.RouteAnalysisPath.self, forKey: .forwardPath)
        forwardPath = forwardPathDecoded
        let returnPathDecoded = try containerValues.decodeIfPresent(NetworkManagerClientTypes.RouteAnalysisPath.self, forKey: .returnPath)
        returnPath = returnPathDecoded
    }
}
