// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ProtonClientTypes.Environment: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case createdAt
        case deploymentStatus
        case deploymentStatusMessage
        case description
        case environmentAccountConnectionId
        case environmentAccountId
        case lastDeploymentAttemptedAt
        case lastDeploymentSucceededAt
        case name
        case protonServiceRoleArn
        case provisioning
        case provisioningRepository
        case spec
        case templateMajorVersion
        case templateMinorVersion
        case templateName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let deploymentStatus = deploymentStatus {
            try encodeContainer.encode(deploymentStatus.rawValue, forKey: .deploymentStatus)
        }
        if let deploymentStatusMessage = deploymentStatusMessage {
            try encodeContainer.encode(deploymentStatusMessage, forKey: .deploymentStatusMessage)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let environmentAccountConnectionId = environmentAccountConnectionId {
            try encodeContainer.encode(environmentAccountConnectionId, forKey: .environmentAccountConnectionId)
        }
        if let environmentAccountId = environmentAccountId {
            try encodeContainer.encode(environmentAccountId, forKey: .environmentAccountId)
        }
        if let lastDeploymentAttemptedAt = lastDeploymentAttemptedAt {
            try encodeContainer.encode(lastDeploymentAttemptedAt.timeIntervalSince1970, forKey: .lastDeploymentAttemptedAt)
        }
        if let lastDeploymentSucceededAt = lastDeploymentSucceededAt {
            try encodeContainer.encode(lastDeploymentSucceededAt.timeIntervalSince1970, forKey: .lastDeploymentSucceededAt)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let protonServiceRoleArn = protonServiceRoleArn {
            try encodeContainer.encode(protonServiceRoleArn, forKey: .protonServiceRoleArn)
        }
        if let provisioning = provisioning {
            try encodeContainer.encode(provisioning.rawValue, forKey: .provisioning)
        }
        if let provisioningRepository = provisioningRepository {
            try encodeContainer.encode(provisioningRepository, forKey: .provisioningRepository)
        }
        if let spec = spec {
            try encodeContainer.encode(spec, forKey: .spec)
        }
        if let templateMajorVersion = templateMajorVersion {
            try encodeContainer.encode(templateMajorVersion, forKey: .templateMajorVersion)
        }
        if let templateMinorVersion = templateMinorVersion {
            try encodeContainer.encode(templateMinorVersion, forKey: .templateMinorVersion)
        }
        if let templateName = templateName {
            try encodeContainer.encode(templateName, forKey: .templateName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastDeploymentAttemptedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastDeploymentAttemptedAt)
        lastDeploymentAttemptedAt = lastDeploymentAttemptedAtDecoded
        let lastDeploymentSucceededAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastDeploymentSucceededAt)
        lastDeploymentSucceededAt = lastDeploymentSucceededAtDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let templateMajorVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateMajorVersion)
        templateMajorVersion = templateMajorVersionDecoded
        let templateMinorVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateMinorVersion)
        templateMinorVersion = templateMinorVersionDecoded
        let deploymentStatusDecoded = try containerValues.decodeIfPresent(ProtonClientTypes.DeploymentStatus.self, forKey: .deploymentStatus)
        deploymentStatus = deploymentStatusDecoded
        let deploymentStatusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentStatusMessage)
        deploymentStatusMessage = deploymentStatusMessageDecoded
        let protonServiceRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .protonServiceRoleArn)
        protonServiceRoleArn = protonServiceRoleArnDecoded
        let environmentAccountConnectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentAccountConnectionId)
        environmentAccountConnectionId = environmentAccountConnectionIdDecoded
        let environmentAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentAccountId)
        environmentAccountId = environmentAccountIdDecoded
        let specDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .spec)
        spec = specDecoded
        let provisioningDecoded = try containerValues.decodeIfPresent(ProtonClientTypes.Provisioning.self, forKey: .provisioning)
        provisioning = provisioningDecoded
        let provisioningRepositoryDecoded = try containerValues.decodeIfPresent(ProtonClientTypes.RepositoryBranch.self, forKey: .provisioningRepository)
        provisioningRepository = provisioningRepositoryDecoded
    }
}
