// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SendChannelMessageInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case content = "Content"
        case messageAttributes = "MessageAttributes"
        case metadata = "Metadata"
        case persistence = "Persistence"
        case pushNotification = "PushNotification"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let content = content {
            try encodeContainer.encode(content, forKey: .content)
        }
        if let messageAttributes = messageAttributes {
            var messageAttributesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .messageAttributes)
            for (dictKey0, messageattributemap0) in messageAttributes {
                try messageAttributesContainer.encode(messageattributemap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let metadata = metadata {
            try encodeContainer.encode(metadata, forKey: .metadata)
        }
        if let persistence = persistence {
            try encodeContainer.encode(persistence.rawValue, forKey: .persistence)
        }
        if let pushNotification = pushNotification {
            try encodeContainer.encode(pushNotification, forKey: .pushNotification)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }
}
