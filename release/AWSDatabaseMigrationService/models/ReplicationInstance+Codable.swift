// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DatabaseMigrationClientTypes.ReplicationInstance: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocatedStorage = "AllocatedStorage"
        case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
        case availabilityZone = "AvailabilityZone"
        case dnsNameServers = "DnsNameServers"
        case engineVersion = "EngineVersion"
        case freeUntil = "FreeUntil"
        case instanceCreateTime = "InstanceCreateTime"
        case kmsKeyId = "KmsKeyId"
        case multiAZ = "MultiAZ"
        case pendingModifiedValues = "PendingModifiedValues"
        case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
        case publiclyAccessible = "PubliclyAccessible"
        case replicationInstanceArn = "ReplicationInstanceArn"
        case replicationInstanceClass = "ReplicationInstanceClass"
        case replicationInstanceIdentifier = "ReplicationInstanceIdentifier"
        case replicationInstancePrivateIpAddress = "ReplicationInstancePrivateIpAddress"
        case replicationInstancePrivateIpAddresses = "ReplicationInstancePrivateIpAddresses"
        case replicationInstancePublicIpAddress = "ReplicationInstancePublicIpAddress"
        case replicationInstancePublicIpAddresses = "ReplicationInstancePublicIpAddresses"
        case replicationInstanceStatus = "ReplicationInstanceStatus"
        case replicationSubnetGroup = "ReplicationSubnetGroup"
        case secondaryAvailabilityZone = "SecondaryAvailabilityZone"
        case vpcSecurityGroups = "VpcSecurityGroups"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if allocatedStorage != 0 {
            try encodeContainer.encode(allocatedStorage, forKey: .allocatedStorage)
        }
        if autoMinorVersionUpgrade != false {
            try encodeContainer.encode(autoMinorVersionUpgrade, forKey: .autoMinorVersionUpgrade)
        }
        if let availabilityZone = availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let dnsNameServers = dnsNameServers {
            try encodeContainer.encode(dnsNameServers, forKey: .dnsNameServers)
        }
        if let engineVersion = engineVersion {
            try encodeContainer.encode(engineVersion, forKey: .engineVersion)
        }
        if let freeUntil = freeUntil {
            try encodeContainer.encode(freeUntil.timeIntervalSince1970, forKey: .freeUntil)
        }
        if let instanceCreateTime = instanceCreateTime {
            try encodeContainer.encode(instanceCreateTime.timeIntervalSince1970, forKey: .instanceCreateTime)
        }
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if multiAZ != false {
            try encodeContainer.encode(multiAZ, forKey: .multiAZ)
        }
        if let pendingModifiedValues = pendingModifiedValues {
            try encodeContainer.encode(pendingModifiedValues, forKey: .pendingModifiedValues)
        }
        if let preferredMaintenanceWindow = preferredMaintenanceWindow {
            try encodeContainer.encode(preferredMaintenanceWindow, forKey: .preferredMaintenanceWindow)
        }
        if publiclyAccessible != false {
            try encodeContainer.encode(publiclyAccessible, forKey: .publiclyAccessible)
        }
        if let replicationInstanceArn = replicationInstanceArn {
            try encodeContainer.encode(replicationInstanceArn, forKey: .replicationInstanceArn)
        }
        if let replicationInstanceClass = replicationInstanceClass {
            try encodeContainer.encode(replicationInstanceClass, forKey: .replicationInstanceClass)
        }
        if let replicationInstanceIdentifier = replicationInstanceIdentifier {
            try encodeContainer.encode(replicationInstanceIdentifier, forKey: .replicationInstanceIdentifier)
        }
        if let replicationInstancePrivateIpAddress = replicationInstancePrivateIpAddress {
            try encodeContainer.encode(replicationInstancePrivateIpAddress, forKey: .replicationInstancePrivateIpAddress)
        }
        if let replicationInstancePrivateIpAddresses = replicationInstancePrivateIpAddresses {
            var replicationInstancePrivateIpAddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replicationInstancePrivateIpAddresses)
            for replicationinstanceprivateipaddresslist0 in replicationInstancePrivateIpAddresses {
                try replicationInstancePrivateIpAddressesContainer.encode(replicationinstanceprivateipaddresslist0)
            }
        }
        if let replicationInstancePublicIpAddress = replicationInstancePublicIpAddress {
            try encodeContainer.encode(replicationInstancePublicIpAddress, forKey: .replicationInstancePublicIpAddress)
        }
        if let replicationInstancePublicIpAddresses = replicationInstancePublicIpAddresses {
            var replicationInstancePublicIpAddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replicationInstancePublicIpAddresses)
            for replicationinstancepublicipaddresslist0 in replicationInstancePublicIpAddresses {
                try replicationInstancePublicIpAddressesContainer.encode(replicationinstancepublicipaddresslist0)
            }
        }
        if let replicationInstanceStatus = replicationInstanceStatus {
            try encodeContainer.encode(replicationInstanceStatus, forKey: .replicationInstanceStatus)
        }
        if let replicationSubnetGroup = replicationSubnetGroup {
            try encodeContainer.encode(replicationSubnetGroup, forKey: .replicationSubnetGroup)
        }
        if let secondaryAvailabilityZone = secondaryAvailabilityZone {
            try encodeContainer.encode(secondaryAvailabilityZone, forKey: .secondaryAvailabilityZone)
        }
        if let vpcSecurityGroups = vpcSecurityGroups {
            var vpcSecurityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .vpcSecurityGroups)
            for vpcsecuritygroupmembershiplist0 in vpcSecurityGroups {
                try vpcSecurityGroupsContainer.encode(vpcsecuritygroupmembershiplist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let replicationInstanceIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replicationInstanceIdentifier)
        replicationInstanceIdentifier = replicationInstanceIdentifierDecoded
        let replicationInstanceClassDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replicationInstanceClass)
        replicationInstanceClass = replicationInstanceClassDecoded
        let replicationInstanceStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replicationInstanceStatus)
        replicationInstanceStatus = replicationInstanceStatusDecoded
        let allocatedStorageDecoded = try containerValues.decode(Swift.Int.self, forKey: .allocatedStorage)
        allocatedStorage = allocatedStorageDecoded
        let instanceCreateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .instanceCreateTime)
        instanceCreateTime = instanceCreateTimeDecoded
        let vpcSecurityGroupsContainer = try containerValues.decodeIfPresent([DatabaseMigrationClientTypes.VpcSecurityGroupMembership?].self, forKey: .vpcSecurityGroups)
        var vpcSecurityGroupsDecoded0:[DatabaseMigrationClientTypes.VpcSecurityGroupMembership]? = nil
        if let vpcSecurityGroupsContainer = vpcSecurityGroupsContainer {
            vpcSecurityGroupsDecoded0 = [DatabaseMigrationClientTypes.VpcSecurityGroupMembership]()
            for structure0 in vpcSecurityGroupsContainer {
                if let structure0 = structure0 {
                    vpcSecurityGroupsDecoded0?.append(structure0)
                }
            }
        }
        vpcSecurityGroups = vpcSecurityGroupsDecoded0
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let replicationSubnetGroupDecoded = try containerValues.decodeIfPresent(DatabaseMigrationClientTypes.ReplicationSubnetGroup.self, forKey: .replicationSubnetGroup)
        replicationSubnetGroup = replicationSubnetGroupDecoded
        let preferredMaintenanceWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredMaintenanceWindow)
        preferredMaintenanceWindow = preferredMaintenanceWindowDecoded
        let pendingModifiedValuesDecoded = try containerValues.decodeIfPresent(DatabaseMigrationClientTypes.ReplicationPendingModifiedValues.self, forKey: .pendingModifiedValues)
        pendingModifiedValues = pendingModifiedValuesDecoded
        let multiAZDecoded = try containerValues.decode(Swift.Bool.self, forKey: .multiAZ)
        multiAZ = multiAZDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let autoMinorVersionUpgradeDecoded = try containerValues.decode(Swift.Bool.self, forKey: .autoMinorVersionUpgrade)
        autoMinorVersionUpgrade = autoMinorVersionUpgradeDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let replicationInstanceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replicationInstanceArn)
        replicationInstanceArn = replicationInstanceArnDecoded
        let replicationInstancePublicIpAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replicationInstancePublicIpAddress)
        replicationInstancePublicIpAddress = replicationInstancePublicIpAddressDecoded
        let replicationInstancePrivateIpAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replicationInstancePrivateIpAddress)
        replicationInstancePrivateIpAddress = replicationInstancePrivateIpAddressDecoded
        let replicationInstancePublicIpAddressesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .replicationInstancePublicIpAddresses)
        var replicationInstancePublicIpAddressesDecoded0:[Swift.String]? = nil
        if let replicationInstancePublicIpAddressesContainer = replicationInstancePublicIpAddressesContainer {
            replicationInstancePublicIpAddressesDecoded0 = [Swift.String]()
            for string0 in replicationInstancePublicIpAddressesContainer {
                if let string0 = string0 {
                    replicationInstancePublicIpAddressesDecoded0?.append(string0)
                }
            }
        }
        replicationInstancePublicIpAddresses = replicationInstancePublicIpAddressesDecoded0
        let replicationInstancePrivateIpAddressesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .replicationInstancePrivateIpAddresses)
        var replicationInstancePrivateIpAddressesDecoded0:[Swift.String]? = nil
        if let replicationInstancePrivateIpAddressesContainer = replicationInstancePrivateIpAddressesContainer {
            replicationInstancePrivateIpAddressesDecoded0 = [Swift.String]()
            for string0 in replicationInstancePrivateIpAddressesContainer {
                if let string0 = string0 {
                    replicationInstancePrivateIpAddressesDecoded0?.append(string0)
                }
            }
        }
        replicationInstancePrivateIpAddresses = replicationInstancePrivateIpAddressesDecoded0
        let publiclyAccessibleDecoded = try containerValues.decode(Swift.Bool.self, forKey: .publiclyAccessible)
        publiclyAccessible = publiclyAccessibleDecoded
        let secondaryAvailabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secondaryAvailabilityZone)
        secondaryAvailabilityZone = secondaryAvailabilityZoneDecoded
        let freeUntilDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .freeUntil)
        freeUntil = freeUntilDecoded
        let dnsNameServersDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dnsNameServers)
        dnsNameServers = dnsNameServersDecoded
    }
}
