// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdateApplicationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appBlockArn = "AppBlockArn"
        case attributesToDelete = "AttributesToDelete"
        case description = "Description"
        case displayName = "DisplayName"
        case iconS3Location = "IconS3Location"
        case launchParameters = "LaunchParameters"
        case launchPath = "LaunchPath"
        case name = "Name"
        case workingDirectory = "WorkingDirectory"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appBlockArn = appBlockArn {
            try encodeContainer.encode(appBlockArn, forKey: .appBlockArn)
        }
        if let attributesToDelete = attributesToDelete {
            var attributesToDeleteContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributesToDelete)
            for applicationattributes0 in attributesToDelete {
                try attributesToDeleteContainer.encode(applicationattributes0.rawValue)
            }
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let displayName = displayName {
            try encodeContainer.encode(displayName, forKey: .displayName)
        }
        if let iconS3Location = iconS3Location {
            try encodeContainer.encode(iconS3Location, forKey: .iconS3Location)
        }
        if let launchParameters = launchParameters {
            try encodeContainer.encode(launchParameters, forKey: .launchParameters)
        }
        if let launchPath = launchPath {
            try encodeContainer.encode(launchPath, forKey: .launchPath)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let workingDirectory = workingDirectory {
            try encodeContainer.encode(workingDirectory, forKey: .workingDirectory)
        }
    }
}
