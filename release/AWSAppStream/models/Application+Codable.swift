// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AppStreamClientTypes.Application: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appBlockArn = "AppBlockArn"
        case arn = "Arn"
        case createdTime = "CreatedTime"
        case description = "Description"
        case displayName = "DisplayName"
        case enabled = "Enabled"
        case iconS3Location = "IconS3Location"
        case iconURL = "IconURL"
        case instanceFamilies = "InstanceFamilies"
        case launchParameters = "LaunchParameters"
        case launchPath = "LaunchPath"
        case metadata = "Metadata"
        case name = "Name"
        case platforms = "Platforms"
        case workingDirectory = "WorkingDirectory"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appBlockArn = appBlockArn {
            try encodeContainer.encode(appBlockArn, forKey: .appBlockArn)
        }
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdTime = createdTime {
            try encodeContainer.encode(createdTime.timeIntervalSince1970, forKey: .createdTime)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let displayName = displayName {
            try encodeContainer.encode(displayName, forKey: .displayName)
        }
        if enabled != false {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let iconS3Location = iconS3Location {
            try encodeContainer.encode(iconS3Location, forKey: .iconS3Location)
        }
        if let iconURL = iconURL {
            try encodeContainer.encode(iconURL, forKey: .iconURL)
        }
        if let instanceFamilies = instanceFamilies {
            var instanceFamiliesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceFamilies)
            for stringlist0 in instanceFamilies {
                try instanceFamiliesContainer.encode(stringlist0)
            }
        }
        if let launchParameters = launchParameters {
            try encodeContainer.encode(launchParameters, forKey: .launchParameters)
        }
        if let launchPath = launchPath {
            try encodeContainer.encode(launchPath, forKey: .launchPath)
        }
        if let metadata = metadata {
            var metadataContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .metadata)
            for (dictKey0, metadata0) in metadata {
                try metadataContainer.encode(metadata0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let platforms = platforms {
            var platformsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .platforms)
            for platforms0 in platforms {
                try platformsContainer.encode(platforms0.rawValue)
            }
        }
        if let workingDirectory = workingDirectory {
            try encodeContainer.encode(workingDirectory, forKey: .workingDirectory)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let iconURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iconURL)
        iconURL = iconURLDecoded
        let launchPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .launchPath)
        launchPath = launchPathDecoded
        let launchParametersDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .launchParameters)
        launchParameters = launchParametersDecoded
        let enabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let metadataContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .metadata)
        var metadataDecoded0: [Swift.String:Swift.String]? = nil
        if let metadataContainer = metadataContainer {
            metadataDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in metadataContainer {
                if let string0 = string0 {
                    metadataDecoded0?[key0] = string0
                }
            }
        }
        metadata = metadataDecoded0
        let workingDirectoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workingDirectory)
        workingDirectory = workingDirectoryDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let appBlockArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .appBlockArn)
        appBlockArn = appBlockArnDecoded
        let iconS3LocationDecoded = try containerValues.decodeIfPresent(AppStreamClientTypes.S3Location.self, forKey: .iconS3Location)
        iconS3Location = iconS3LocationDecoded
        let platformsContainer = try containerValues.decodeIfPresent([AppStreamClientTypes.PlatformType?].self, forKey: .platforms)
        var platformsDecoded0:[AppStreamClientTypes.PlatformType]? = nil
        if let platformsContainer = platformsContainer {
            platformsDecoded0 = [AppStreamClientTypes.PlatformType]()
            for string0 in platformsContainer {
                if let string0 = string0 {
                    platformsDecoded0?.append(string0)
                }
            }
        }
        platforms = platformsDecoded0
        let instanceFamiliesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .instanceFamilies)
        var instanceFamiliesDecoded0:[Swift.String]? = nil
        if let instanceFamiliesContainer = instanceFamiliesContainer {
            instanceFamiliesDecoded0 = [Swift.String]()
            for string0 in instanceFamiliesContainer {
                if let string0 = string0 {
                    instanceFamiliesDecoded0?.append(string0)
                }
            }
        }
        instanceFamilies = instanceFamiliesDecoded0
        let createdTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdTime)
        createdTime = createdTimeDecoded
    }
}
