// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DataBrewClientTypes.DataCatalogOutput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case databaseOptions = "DatabaseOptions"
        case overwrite = "Overwrite"
        case s3Options = "S3Options"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let databaseOptions = databaseOptions {
            try encodeContainer.encode(databaseOptions, forKey: .databaseOptions)
        }
        if overwrite != false {
            try encodeContainer.encode(overwrite, forKey: .overwrite)
        }
        if let s3Options = s3Options {
            try encodeContainer.encode(s3Options, forKey: .s3Options)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let s3OptionsDecoded = try containerValues.decodeIfPresent(DataBrewClientTypes.S3TableOutputOptions.self, forKey: .s3Options)
        s3Options = s3OptionsDecoded
        let databaseOptionsDecoded = try containerValues.decodeIfPresent(DataBrewClientTypes.DatabaseTableOutputOptions.self, forKey: .databaseOptions)
        databaseOptions = databaseOptionsDecoded
        let overwriteDecoded = try containerValues.decode(Swift.Bool.self, forKey: .overwrite)
        overwrite = overwriteDecoded
    }
}
