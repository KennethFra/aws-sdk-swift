// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2ClientTypes.LocalGatewayRoute: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationCidrBlock = "destinationCidrBlock"
        case localGatewayRouteTableArn = "localGatewayRouteTableArn"
        case localGatewayRouteTableId = "localGatewayRouteTableId"
        case localGatewayVirtualInterfaceGroupId = "localGatewayVirtualInterfaceGroupId"
        case ownerId = "ownerId"
        case state = "state"
        case type = "type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let destinationCidrBlock = destinationCidrBlock {
            try container.encode(destinationCidrBlock, forKey: ClientRuntime.Key("DestinationCidrBlock"))
        }
        if let localGatewayRouteTableArn = localGatewayRouteTableArn {
            try container.encode(localGatewayRouteTableArn, forKey: ClientRuntime.Key("LocalGatewayRouteTableArn"))
        }
        if let localGatewayRouteTableId = localGatewayRouteTableId {
            try container.encode(localGatewayRouteTableId, forKey: ClientRuntime.Key("LocalGatewayRouteTableId"))
        }
        if let localGatewayVirtualInterfaceGroupId = localGatewayVirtualInterfaceGroupId {
            try container.encode(localGatewayVirtualInterfaceGroupId, forKey: ClientRuntime.Key("LocalGatewayVirtualInterfaceGroupId"))
        }
        if let ownerId = ownerId {
            try container.encode(ownerId, forKey: ClientRuntime.Key("OwnerId"))
        }
        if let state = state {
            try container.encode(state, forKey: ClientRuntime.Key("State"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationCidrBlockDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationCidrBlock)
        destinationCidrBlock = destinationCidrBlockDecoded
        let localGatewayVirtualInterfaceGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .localGatewayVirtualInterfaceGroupId)
        localGatewayVirtualInterfaceGroupId = localGatewayVirtualInterfaceGroupIdDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.LocalGatewayRouteType.self, forKey: .type)
        type = typeDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Ec2ClientTypes.LocalGatewayRouteState.self, forKey: .state)
        state = stateDecoded
        let localGatewayRouteTableIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .localGatewayRouteTableId)
        localGatewayRouteTableId = localGatewayRouteTableIdDecoded
        let localGatewayRouteTableArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .localGatewayRouteTableArn)
        localGatewayRouteTableArn = localGatewayRouteTableArnDecoded
        let ownerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
    }
}
