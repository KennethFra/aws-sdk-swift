// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension Ec2ClientTypes {
    public enum ResourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case capacityReservation
        case carrierGateway
        case clientVpnEndpoint
        case customerGateway
        case dedicatedHost
        case dhcpOptions
        case egressOnlyInternetGateway
        case elasticGpu
        case elasticIp
        case exportImageTask
        case exportInstanceTask
        case fleet
        case fpgaImage
        case hostReservation
        case image
        case importImageTask
        case importSnapshotTask
        case instance
        case instanceEventWindow
        case internetGateway
        case ipam
        case ipamPool
        case ipamScope
        case ipv4poolEc2
        case ipv6poolEc2
        case keyPair
        case launchTemplate
        case localGateway
        case localGatewayRouteTable
        case localGatewayRouteTableVirtualInterfaceGroupAssociation
        case localGatewayRouteTableVpcAssociation
        case localGatewayVirtualInterface
        case localGatewayVirtualInterfaceGroup
        case natgateway
        case networkAcl
        case networkInsightsAccessScope
        case networkInsightsAccessScopeAnalysis
        case networkInsightsAnalysis
        case networkInsightsPath
        case networkInterface
        case placementGroup
        case prefixList
        case replaceRootVolumeTask
        case reservedInstances
        case routeTable
        case securityGroup
        case securityGroupRule
        case snapshot
        case spotFleetRequest
        case spotInstancesRequest
        case subnet
        case trafficMirrorFilter
        case trafficMirrorSession
        case trafficMirrorTarget
        case transitGateway
        case transitGatewayAttachment
        case transitGatewayConnectPeer
        case transitGatewayMulticastDomain
        case transitGatewayRouteTable
        case volume
        case vpc
        case vpcEndpoint
        case vpcEndpointService
        case vpcFlowLog
        case vpcPeeringConnection
        case vpnConnection
        case vpnGateway
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceType] {
            return [
                .capacityReservation,
                .carrierGateway,
                .clientVpnEndpoint,
                .customerGateway,
                .dedicatedHost,
                .dhcpOptions,
                .egressOnlyInternetGateway,
                .elasticGpu,
                .elasticIp,
                .exportImageTask,
                .exportInstanceTask,
                .fleet,
                .fpgaImage,
                .hostReservation,
                .image,
                .importImageTask,
                .importSnapshotTask,
                .instance,
                .instanceEventWindow,
                .internetGateway,
                .ipam,
                .ipamPool,
                .ipamScope,
                .ipv4poolEc2,
                .ipv6poolEc2,
                .keyPair,
                .launchTemplate,
                .localGateway,
                .localGatewayRouteTable,
                .localGatewayRouteTableVirtualInterfaceGroupAssociation,
                .localGatewayRouteTableVpcAssociation,
                .localGatewayVirtualInterface,
                .localGatewayVirtualInterfaceGroup,
                .natgateway,
                .networkAcl,
                .networkInsightsAccessScope,
                .networkInsightsAccessScopeAnalysis,
                .networkInsightsAnalysis,
                .networkInsightsPath,
                .networkInterface,
                .placementGroup,
                .prefixList,
                .replaceRootVolumeTask,
                .reservedInstances,
                .routeTable,
                .securityGroup,
                .securityGroupRule,
                .snapshot,
                .spotFleetRequest,
                .spotInstancesRequest,
                .subnet,
                .trafficMirrorFilter,
                .trafficMirrorSession,
                .trafficMirrorTarget,
                .transitGateway,
                .transitGatewayAttachment,
                .transitGatewayConnectPeer,
                .transitGatewayMulticastDomain,
                .transitGatewayRouteTable,
                .volume,
                .vpc,
                .vpcEndpoint,
                .vpcEndpointService,
                .vpcFlowLog,
                .vpcPeeringConnection,
                .vpnConnection,
                .vpnGateway,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .capacityReservation: return "capacity-reservation"
            case .carrierGateway: return "carrier-gateway"
            case .clientVpnEndpoint: return "client-vpn-endpoint"
            case .customerGateway: return "customer-gateway"
            case .dedicatedHost: return "dedicated-host"
            case .dhcpOptions: return "dhcp-options"
            case .egressOnlyInternetGateway: return "egress-only-internet-gateway"
            case .elasticGpu: return "elastic-gpu"
            case .elasticIp: return "elastic-ip"
            case .exportImageTask: return "export-image-task"
            case .exportInstanceTask: return "export-instance-task"
            case .fleet: return "fleet"
            case .fpgaImage: return "fpga-image"
            case .hostReservation: return "host-reservation"
            case .image: return "image"
            case .importImageTask: return "import-image-task"
            case .importSnapshotTask: return "import-snapshot-task"
            case .instance: return "instance"
            case .instanceEventWindow: return "instance-event-window"
            case .internetGateway: return "internet-gateway"
            case .ipam: return "ipam"
            case .ipamPool: return "ipam-pool"
            case .ipamScope: return "ipam-scope"
            case .ipv4poolEc2: return "ipv4pool-ec2"
            case .ipv6poolEc2: return "ipv6pool-ec2"
            case .keyPair: return "key-pair"
            case .launchTemplate: return "launch-template"
            case .localGateway: return "local-gateway"
            case .localGatewayRouteTable: return "local-gateway-route-table"
            case .localGatewayRouteTableVirtualInterfaceGroupAssociation: return "local-gateway-route-table-virtual-interface-group-association"
            case .localGatewayRouteTableVpcAssociation: return "local-gateway-route-table-vpc-association"
            case .localGatewayVirtualInterface: return "local-gateway-virtual-interface"
            case .localGatewayVirtualInterfaceGroup: return "local-gateway-virtual-interface-group"
            case .natgateway: return "natgateway"
            case .networkAcl: return "network-acl"
            case .networkInsightsAccessScope: return "network-insights-access-scope"
            case .networkInsightsAccessScopeAnalysis: return "network-insights-access-scope-analysis"
            case .networkInsightsAnalysis: return "network-insights-analysis"
            case .networkInsightsPath: return "network-insights-path"
            case .networkInterface: return "network-interface"
            case .placementGroup: return "placement-group"
            case .prefixList: return "prefix-list"
            case .replaceRootVolumeTask: return "replace-root-volume-task"
            case .reservedInstances: return "reserved-instances"
            case .routeTable: return "route-table"
            case .securityGroup: return "security-group"
            case .securityGroupRule: return "security-group-rule"
            case .snapshot: return "snapshot"
            case .spotFleetRequest: return "spot-fleet-request"
            case .spotInstancesRequest: return "spot-instances-request"
            case .subnet: return "subnet"
            case .trafficMirrorFilter: return "traffic-mirror-filter"
            case .trafficMirrorSession: return "traffic-mirror-session"
            case .trafficMirrorTarget: return "traffic-mirror-target"
            case .transitGateway: return "transit-gateway"
            case .transitGatewayAttachment: return "transit-gateway-attachment"
            case .transitGatewayConnectPeer: return "transit-gateway-connect-peer"
            case .transitGatewayMulticastDomain: return "transit-gateway-multicast-domain"
            case .transitGatewayRouteTable: return "transit-gateway-route-table"
            case .volume: return "volume"
            case .vpc: return "vpc"
            case .vpcEndpoint: return "vpc-endpoint"
            case .vpcEndpointService: return "vpc-endpoint-service"
            case .vpcFlowLog: return "vpc-flow-log"
            case .vpcPeeringConnection: return "vpc-peering-connection"
            case .vpnConnection: return "vpn-connection"
            case .vpnGateway: return "vpn-gateway"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResourceType(rawValue: rawValue) ?? ResourceType.sdkUnknown(rawValue)
        }
    }
}
