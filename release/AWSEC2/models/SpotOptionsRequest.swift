// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension Ec2ClientTypes {
    /// Describes the configuration of Spot Instances in an EC2 Fleet request.
    public struct SpotOptionsRequest: Swift.Equatable {
        /// The strategy that determines how to allocate the target Spot Instance capacity across the Spot Instance pools specified by the EC2 Fleet. lowest-price - EC2 Fleet launches instances from the Spot Instance pools with the lowest price. diversified - EC2 Fleet launches instances from all of the Spot Instance pools that you specify. capacity-optimized (recommended) - EC2 Fleet launches instances from Spot Instance pools with optimal capacity for the number of instances that are launching. To give certain instance types a higher chance of launching first, use capacity-optimized-prioritized. Set a priority for each instance type by using the Priority parameter for LaunchTemplateOverrides. You can assign the same priority to different LaunchTemplateOverrides. EC2 implements the priorities on a best-effort basis, but optimizes for capacity first. capacity-optimized-prioritized is supported only if your fleet uses a launch template. Note that if the On-Demand AllocationStrategy is set to prioritized, the same priority is applied when fulfilling On-Demand capacity. Default: lowest-price
        public var allocationStrategy: Ec2ClientTypes.SpotAllocationStrategy?
        /// The behavior when a Spot Instance is interrupted. Default: terminate
        public var instanceInterruptionBehavior: Ec2ClientTypes.SpotInstanceInterruptionBehavior?
        /// The number of Spot pools across which to allocate your target Spot capacity. Supported only when Spot AllocationStrategy is set to lowest-price. EC2 Fleet selects the cheapest Spot pools and evenly allocates your target Spot capacity across the number of Spot pools that you specify. Note that EC2 Fleet attempts to draw Spot Instances from the number of pools that you specify on a best effort basis. If a pool runs out of Spot capacity before fulfilling your target capacity, EC2 Fleet will continue to fulfill your request by drawing from the next cheapest pool. To ensure that your target capacity is met, you might receive Spot Instances from more than the number of pools that you specified. Similarly, if most of the pools have no Spot capacity, you might receive your full target capacity from fewer than the number of pools that you specified.
        public var instancePoolsToUseCount: Swift.Int?
        /// The strategies for managing your Spot Instances that are at an elevated risk of being interrupted.
        public var maintenanceStrategies: Ec2ClientTypes.FleetSpotMaintenanceStrategiesRequest?
        /// The maximum amount per hour for Spot Instances that you're willing to pay.
        public var maxTotalPrice: Swift.String?
        /// The minimum target capacity for Spot Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances. Supported only for fleets of type instant. At least one of the following must be specified: SingleAvailabilityZone | SingleInstanceType
        public var minTargetCapacity: Swift.Int?
        /// Indicates that the fleet launches all Spot Instances into a single Availability Zone. Supported only for fleets of type instant.
        public var singleAvailabilityZone: Swift.Bool?
        /// Indicates that the fleet uses a single instance type to launch all Spot Instances in the fleet. Supported only for fleets of type instant.
        public var singleInstanceType: Swift.Bool?

        public init (
            allocationStrategy: Ec2ClientTypes.SpotAllocationStrategy? = nil,
            instanceInterruptionBehavior: Ec2ClientTypes.SpotInstanceInterruptionBehavior? = nil,
            instancePoolsToUseCount: Swift.Int? = nil,
            maintenanceStrategies: Ec2ClientTypes.FleetSpotMaintenanceStrategiesRequest? = nil,
            maxTotalPrice: Swift.String? = nil,
            minTargetCapacity: Swift.Int? = nil,
            singleAvailabilityZone: Swift.Bool? = nil,
            singleInstanceType: Swift.Bool? = nil
        )
        {
            self.allocationStrategy = allocationStrategy
            self.instanceInterruptionBehavior = instanceInterruptionBehavior
            self.instancePoolsToUseCount = instancePoolsToUseCount
            self.maintenanceStrategies = maintenanceStrategies
            self.maxTotalPrice = maxTotalPrice
            self.minTargetCapacity = minTargetCapacity
            self.singleAvailabilityZone = singleAvailabilityZone
            self.singleInstanceType = singleInstanceType
        }
    }

}
