// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LightsailClientTypes.HeaderObject: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case headersAllowList
        case option
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let headersAllowList = headersAllowList {
            var headersAllowListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .headersAllowList)
            for headerforwardlist0 in headersAllowList {
                try headersAllowListContainer.encode(headerforwardlist0.rawValue)
            }
        }
        if let option = option {
            try encodeContainer.encode(option.rawValue, forKey: .option)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ForwardValues.self, forKey: .option)
        option = optionDecoded
        let headersAllowListContainer = try containerValues.decodeIfPresent([LightsailClientTypes.HeaderEnum?].self, forKey: .headersAllowList)
        var headersAllowListDecoded0:[LightsailClientTypes.HeaderEnum]? = nil
        if let headersAllowListContainer = headersAllowListContainer {
            headersAllowListDecoded0 = [LightsailClientTypes.HeaderEnum]()
            for string0 in headersAllowListContainer {
                if let string0 = string0 {
                    headersAllowListDecoded0?.append(string0)
                }
            }
        }
        headersAllowList = headersAllowListDecoded0
    }
}
