// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LightsailClientTypes.AccessKeyLastUsed: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastUsedDate
        case region
        case serviceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lastUsedDate = lastUsedDate {
            try encodeContainer.encode(lastUsedDate.timeIntervalSince1970, forKey: .lastUsedDate)
        }
        if let region = region {
            try encodeContainer.encode(region, forKey: .region)
        }
        if let serviceName = serviceName {
            try encodeContainer.encode(serviceName, forKey: .serviceName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lastUsedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUsedDate)
        lastUsedDate = lastUsedDateDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let serviceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceName)
        serviceName = serviceNameDecoded
    }
}
