// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateStreamProcessorInputBody: Swift.Equatable {
    let input: RekognitionClientTypes.StreamProcessorInput?
    let output: RekognitionClientTypes.StreamProcessorOutput?
    let name: Swift.String?
    let settings: RekognitionClientTypes.StreamProcessorSettings?
    let roleArn: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension CreateStreamProcessorInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case input = "Input"
        case name = "Name"
        case output = "Output"
        case roleArn = "RoleArn"
        case settings = "Settings"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.StreamProcessorInput.self, forKey: .input)
        input = inputDecoded
        let outputDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.StreamProcessorOutput.self, forKey: .output)
        output = outputDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let settingsDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.StreamProcessorSettings.self, forKey: .settings)
        settings = settingsDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
