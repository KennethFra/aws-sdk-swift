// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RekognitionClientTypes.DatasetDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimestamp = "CreationTimestamp"
        case datasetStats = "DatasetStats"
        case lastUpdatedTimestamp = "LastUpdatedTimestamp"
        case status = "Status"
        case statusMessage = "StatusMessage"
        case statusMessageCode = "StatusMessageCode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTimestamp = creationTimestamp {
            try encodeContainer.encode(creationTimestamp.timeIntervalSince1970, forKey: .creationTimestamp)
        }
        if let datasetStats = datasetStats {
            try encodeContainer.encode(datasetStats, forKey: .datasetStats)
        }
        if let lastUpdatedTimestamp = lastUpdatedTimestamp {
            try encodeContainer.encode(lastUpdatedTimestamp.timeIntervalSince1970, forKey: .lastUpdatedTimestamp)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusMessage = statusMessage {
            try encodeContainer.encode(statusMessage, forKey: .statusMessage)
        }
        if let statusMessageCode = statusMessageCode {
            try encodeContainer.encode(statusMessageCode.rawValue, forKey: .statusMessageCode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimestamp)
        creationTimestamp = creationTimestampDecoded
        let lastUpdatedTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedTimestamp)
        lastUpdatedTimestamp = lastUpdatedTimestampDecoded
        let statusDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.DatasetStatus.self, forKey: .status)
        status = statusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let statusMessageCodeDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.DatasetStatusMessageCode.self, forKey: .statusMessageCode)
        statusMessageCode = statusMessageCodeDecoded
        let datasetStatsDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.DatasetStats.self, forKey: .datasetStats)
        datasetStats = datasetStatsDecoded
    }
}
