// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SwfClientTypes.StartChildWorkflowExecutionFailedEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cause
        case control
        case decisionTaskCompletedEventId
        case initiatedEventId
        case workflowId
        case workflowType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = cause {
            try encodeContainer.encode(cause.rawValue, forKey: .cause)
        }
        if let control = control {
            try encodeContainer.encode(control, forKey: .control)
        }
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
        if initiatedEventId != 0 {
            try encodeContainer.encode(initiatedEventId, forKey: .initiatedEventId)
        }
        if let workflowId = workflowId {
            try encodeContainer.encode(workflowId, forKey: .workflowId)
        }
        if let workflowType = workflowType {
            try encodeContainer.encode(workflowType, forKey: .workflowType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowTypeDecoded = try containerValues.decodeIfPresent(SwfClientTypes.WorkflowType.self, forKey: .workflowType)
        workflowType = workflowTypeDecoded
        let causeDecoded = try containerValues.decodeIfPresent(SwfClientTypes.StartChildWorkflowExecutionFailedCause.self, forKey: .cause)
        cause = causeDecoded
        let workflowIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workflowId)
        workflowId = workflowIdDecoded
        let initiatedEventIdDecoded = try containerValues.decode(Swift.Int.self, forKey: .initiatedEventId)
        initiatedEventId = initiatedEventIdDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decode(Swift.Int.self, forKey: .decisionTaskCompletedEventId)
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
        let controlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .control)
        control = controlDecoded
    }
}
