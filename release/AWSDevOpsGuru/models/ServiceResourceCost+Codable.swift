// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DevOpsGuruClientTypes.ServiceResourceCost: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cost = "Cost"
        case count = "Count"
        case state = "State"
        case type = "Type"
        case unitCost = "UnitCost"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if cost != 0.0 {
            try encodeContainer.encode(cost, forKey: .cost)
        }
        if count != 0 {
            try encodeContainer.encode(count, forKey: .count)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let type = type {
            try encodeContainer.encode(type, forKey: .type)
        }
        if unitCost != 0.0 {
            try encodeContainer.encode(unitCost, forKey: .unitCost)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let stateDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.CostEstimationServiceResourceState.self, forKey: .state)
        state = stateDecoded
        let countDecoded = try containerValues.decode(Swift.Int.self, forKey: .count)
        count = countDecoded
        let unitCostDecoded = try containerValues.decode(Swift.Double.self, forKey: .unitCost)
        unitCost = unitCostDecoded
        let costDecoded = try containerValues.decode(Swift.Double.self, forKey: .cost)
        cost = costDecoded
    }
}
