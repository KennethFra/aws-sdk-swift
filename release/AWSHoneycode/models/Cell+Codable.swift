// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension HoneycodeClientTypes.Cell: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case format
        case formattedValue
        case formula
        case rawValue
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let format = format {
            try encodeContainer.encode(format.rawValue, forKey: .format)
        }
        if let formattedValue = formattedValue {
            try encodeContainer.encode(formattedValue, forKey: .formattedValue)
        }
        if let formula = formula {
            try encodeContainer.encode(formula, forKey: .formula)
        }
        if let rawValue = rawValue {
            try encodeContainer.encode(rawValue, forKey: .rawValue)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let formulaDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .formula)
        formula = formulaDecoded
        let formatDecoded = try containerValues.decodeIfPresent(HoneycodeClientTypes.Format.self, forKey: .format)
        format = formatDecoded
        let rawValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rawValue)
        rawValue = rawValueDecoded
        let formattedValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .formattedValue)
        formattedValue = formattedValueDecoded
    }
}
