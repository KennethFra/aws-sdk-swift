// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaConvertClientTypes.VideoSelector: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alphaBehavior = "alphaBehavior"
        case colorSpace = "colorSpace"
        case colorSpaceUsage = "colorSpaceUsage"
        case hdr10Metadata = "hdr10Metadata"
        case pid = "pid"
        case programNumber = "programNumber"
        case rotate = "rotate"
        case sampleRange = "sampleRange"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alphaBehavior = alphaBehavior {
            try encodeContainer.encode(alphaBehavior.rawValue, forKey: .alphaBehavior)
        }
        if let colorSpace = colorSpace {
            try encodeContainer.encode(colorSpace.rawValue, forKey: .colorSpace)
        }
        if let colorSpaceUsage = colorSpaceUsage {
            try encodeContainer.encode(colorSpaceUsage.rawValue, forKey: .colorSpaceUsage)
        }
        if let hdr10Metadata = hdr10Metadata {
            try encodeContainer.encode(hdr10Metadata, forKey: .hdr10Metadata)
        }
        if let pid = pid {
            try encodeContainer.encode(pid, forKey: .pid)
        }
        if let programNumber = programNumber {
            try encodeContainer.encode(programNumber, forKey: .programNumber)
        }
        if let rotate = rotate {
            try encodeContainer.encode(rotate.rawValue, forKey: .rotate)
        }
        if let sampleRange = sampleRange {
            try encodeContainer.encode(sampleRange.rawValue, forKey: .sampleRange)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alphaBehaviorDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.AlphaBehavior.self, forKey: .alphaBehavior)
        alphaBehavior = alphaBehaviorDecoded
        let colorSpaceDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.ColorSpace.self, forKey: .colorSpace)
        colorSpace = colorSpaceDecoded
        let colorSpaceUsageDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.ColorSpaceUsage.self, forKey: .colorSpaceUsage)
        colorSpaceUsage = colorSpaceUsageDecoded
        let hdr10MetadataDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.Hdr10Metadata.self, forKey: .hdr10Metadata)
        hdr10Metadata = hdr10MetadataDecoded
        let pidDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pid)
        pid = pidDecoded
        let programNumberDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .programNumber)
        programNumber = programNumberDecoded
        let rotateDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.InputRotate.self, forKey: .rotate)
        rotate = rotateDecoded
        let sampleRangeDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.InputSampleRange.self, forKey: .sampleRange)
        sampleRange = sampleRangeDecoded
    }
}
