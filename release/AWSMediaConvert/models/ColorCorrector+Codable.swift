// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaConvertClientTypes.ColorCorrector: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case brightness = "brightness"
        case colorSpaceConversion = "colorSpaceConversion"
        case contrast = "contrast"
        case hdr10Metadata = "hdr10Metadata"
        case hue = "hue"
        case sampleRangeConversion = "sampleRangeConversion"
        case saturation = "saturation"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let brightness = brightness {
            try encodeContainer.encode(brightness, forKey: .brightness)
        }
        if let colorSpaceConversion = colorSpaceConversion {
            try encodeContainer.encode(colorSpaceConversion.rawValue, forKey: .colorSpaceConversion)
        }
        if let contrast = contrast {
            try encodeContainer.encode(contrast, forKey: .contrast)
        }
        if let hdr10Metadata = hdr10Metadata {
            try encodeContainer.encode(hdr10Metadata, forKey: .hdr10Metadata)
        }
        if let hue = hue {
            try encodeContainer.encode(hue, forKey: .hue)
        }
        if let sampleRangeConversion = sampleRangeConversion {
            try encodeContainer.encode(sampleRangeConversion.rawValue, forKey: .sampleRangeConversion)
        }
        if let saturation = saturation {
            try encodeContainer.encode(saturation, forKey: .saturation)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let brightnessDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .brightness)
        brightness = brightnessDecoded
        let colorSpaceConversionDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.ColorSpaceConversion.self, forKey: .colorSpaceConversion)
        colorSpaceConversion = colorSpaceConversionDecoded
        let contrastDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .contrast)
        contrast = contrastDecoded
        let hdr10MetadataDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.Hdr10Metadata.self, forKey: .hdr10Metadata)
        hdr10Metadata = hdr10MetadataDecoded
        let hueDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .hue)
        hue = hueDecoded
        let sampleRangeConversionDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.SampleRangeConversion.self, forKey: .sampleRangeConversion)
        sampleRangeConversion = sampleRangeConversionDecoded
        let saturationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .saturation)
        saturation = saturationDecoded
    }
}
