// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaConvertClientTypes.InsertableImage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case duration = "duration"
        case fadeIn = "fadeIn"
        case fadeOut = "fadeOut"
        case height = "height"
        case imageInserterInput = "imageInserterInput"
        case imageX = "imageX"
        case imageY = "imageY"
        case layer = "layer"
        case opacity = "opacity"
        case startTime = "startTime"
        case width = "width"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let duration = duration {
            try encodeContainer.encode(duration, forKey: .duration)
        }
        if let fadeIn = fadeIn {
            try encodeContainer.encode(fadeIn, forKey: .fadeIn)
        }
        if let fadeOut = fadeOut {
            try encodeContainer.encode(fadeOut, forKey: .fadeOut)
        }
        if let height = height {
            try encodeContainer.encode(height, forKey: .height)
        }
        if let imageInserterInput = imageInserterInput {
            try encodeContainer.encode(imageInserterInput, forKey: .imageInserterInput)
        }
        if let imageX = imageX {
            try encodeContainer.encode(imageX, forKey: .imageX)
        }
        if let imageY = imageY {
            try encodeContainer.encode(imageY, forKey: .imageY)
        }
        if let layer = layer {
            try encodeContainer.encode(layer, forKey: .layer)
        }
        if let opacity = opacity {
            try encodeContainer.encode(opacity, forKey: .opacity)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime, forKey: .startTime)
        }
        if let width = width {
            try encodeContainer.encode(width, forKey: .width)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let durationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .duration)
        duration = durationDecoded
        let fadeInDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .fadeIn)
        fadeIn = fadeInDecoded
        let fadeOutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .fadeOut)
        fadeOut = fadeOutDecoded
        let heightDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .height)
        height = heightDecoded
        let imageInserterInputDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageInserterInput)
        imageInserterInput = imageInserterInputDecoded
        let imageXDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .imageX)
        imageX = imageXDecoded
        let imageYDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .imageY)
        imageY = imageYDecoded
        let layerDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .layer)
        layer = layerDecoded
        let opacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .opacity)
        opacity = opacityDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startTime)
        startTime = startTimeDecoded
        let widthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .width)
        width = widthDecoded
    }
}
