// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaConvertClientTypes.Mp3Settings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bitrate = "bitrate"
        case channels = "channels"
        case rateControlMode = "rateControlMode"
        case sampleRate = "sampleRate"
        case vbrQuality = "vbrQuality"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bitrate = bitrate {
            try encodeContainer.encode(bitrate, forKey: .bitrate)
        }
        if let channels = channels {
            try encodeContainer.encode(channels, forKey: .channels)
        }
        if let rateControlMode = rateControlMode {
            try encodeContainer.encode(rateControlMode.rawValue, forKey: .rateControlMode)
        }
        if let sampleRate = sampleRate {
            try encodeContainer.encode(sampleRate, forKey: .sampleRate)
        }
        if let vbrQuality = vbrQuality {
            try encodeContainer.encode(vbrQuality, forKey: .vbrQuality)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bitrateDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .bitrate)
        bitrate = bitrateDecoded
        let channelsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .channels)
        channels = channelsDecoded
        let rateControlModeDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.Mp3RateControlMode.self, forKey: .rateControlMode)
        rateControlMode = rateControlModeDecoded
        let sampleRateDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sampleRate)
        sampleRate = sampleRateDecoded
        let vbrQualityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .vbrQuality)
        vbrQuality = vbrQualityDecoded
    }
}
