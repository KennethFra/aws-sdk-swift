// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaConvertClientTypes.Ac3Settings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bitrate = "bitrate"
        case bitstreamMode = "bitstreamMode"
        case codingMode = "codingMode"
        case dialnorm = "dialnorm"
        case dynamicRangeCompressionLine = "dynamicRangeCompressionLine"
        case dynamicRangeCompressionProfile = "dynamicRangeCompressionProfile"
        case dynamicRangeCompressionRf = "dynamicRangeCompressionRf"
        case lfeFilter = "lfeFilter"
        case metadataControl = "metadataControl"
        case sampleRate = "sampleRate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bitrate = bitrate {
            try encodeContainer.encode(bitrate, forKey: .bitrate)
        }
        if let bitstreamMode = bitstreamMode {
            try encodeContainer.encode(bitstreamMode.rawValue, forKey: .bitstreamMode)
        }
        if let codingMode = codingMode {
            try encodeContainer.encode(codingMode.rawValue, forKey: .codingMode)
        }
        if let dialnorm = dialnorm {
            try encodeContainer.encode(dialnorm, forKey: .dialnorm)
        }
        if let dynamicRangeCompressionLine = dynamicRangeCompressionLine {
            try encodeContainer.encode(dynamicRangeCompressionLine.rawValue, forKey: .dynamicRangeCompressionLine)
        }
        if let dynamicRangeCompressionProfile = dynamicRangeCompressionProfile {
            try encodeContainer.encode(dynamicRangeCompressionProfile.rawValue, forKey: .dynamicRangeCompressionProfile)
        }
        if let dynamicRangeCompressionRf = dynamicRangeCompressionRf {
            try encodeContainer.encode(dynamicRangeCompressionRf.rawValue, forKey: .dynamicRangeCompressionRf)
        }
        if let lfeFilter = lfeFilter {
            try encodeContainer.encode(lfeFilter.rawValue, forKey: .lfeFilter)
        }
        if let metadataControl = metadataControl {
            try encodeContainer.encode(metadataControl.rawValue, forKey: .metadataControl)
        }
        if let sampleRate = sampleRate {
            try encodeContainer.encode(sampleRate, forKey: .sampleRate)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bitrateDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .bitrate)
        bitrate = bitrateDecoded
        let bitstreamModeDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.Ac3BitstreamMode.self, forKey: .bitstreamMode)
        bitstreamMode = bitstreamModeDecoded
        let codingModeDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.Ac3CodingMode.self, forKey: .codingMode)
        codingMode = codingModeDecoded
        let dialnormDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .dialnorm)
        dialnorm = dialnormDecoded
        let dynamicRangeCompressionLineDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.Ac3DynamicRangeCompressionLine.self, forKey: .dynamicRangeCompressionLine)
        dynamicRangeCompressionLine = dynamicRangeCompressionLineDecoded
        let dynamicRangeCompressionProfileDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.Ac3DynamicRangeCompressionProfile.self, forKey: .dynamicRangeCompressionProfile)
        dynamicRangeCompressionProfile = dynamicRangeCompressionProfileDecoded
        let dynamicRangeCompressionRfDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.Ac3DynamicRangeCompressionRf.self, forKey: .dynamicRangeCompressionRf)
        dynamicRangeCompressionRf = dynamicRangeCompressionRfDecoded
        let lfeFilterDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.Ac3LfeFilter.self, forKey: .lfeFilter)
        lfeFilter = lfeFilterDecoded
        let metadataControlDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.Ac3MetadataControl.self, forKey: .metadataControl)
        metadataControl = metadataControlDecoded
        let sampleRateDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sampleRate)
        sampleRate = sampleRateDecoded
    }
}
