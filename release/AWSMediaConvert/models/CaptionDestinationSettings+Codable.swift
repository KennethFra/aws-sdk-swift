// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaConvertClientTypes.CaptionDestinationSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case burninDestinationSettings = "burninDestinationSettings"
        case destinationType = "destinationType"
        case dvbSubDestinationSettings = "dvbSubDestinationSettings"
        case embeddedDestinationSettings = "embeddedDestinationSettings"
        case imscDestinationSettings = "imscDestinationSettings"
        case sccDestinationSettings = "sccDestinationSettings"
        case srtDestinationSettings = "srtDestinationSettings"
        case teletextDestinationSettings = "teletextDestinationSettings"
        case ttmlDestinationSettings = "ttmlDestinationSettings"
        case webvttDestinationSettings = "webvttDestinationSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let burninDestinationSettings = burninDestinationSettings {
            try encodeContainer.encode(burninDestinationSettings, forKey: .burninDestinationSettings)
        }
        if let destinationType = destinationType {
            try encodeContainer.encode(destinationType.rawValue, forKey: .destinationType)
        }
        if let dvbSubDestinationSettings = dvbSubDestinationSettings {
            try encodeContainer.encode(dvbSubDestinationSettings, forKey: .dvbSubDestinationSettings)
        }
        if let embeddedDestinationSettings = embeddedDestinationSettings {
            try encodeContainer.encode(embeddedDestinationSettings, forKey: .embeddedDestinationSettings)
        }
        if let imscDestinationSettings = imscDestinationSettings {
            try encodeContainer.encode(imscDestinationSettings, forKey: .imscDestinationSettings)
        }
        if let sccDestinationSettings = sccDestinationSettings {
            try encodeContainer.encode(sccDestinationSettings, forKey: .sccDestinationSettings)
        }
        if let srtDestinationSettings = srtDestinationSettings {
            try encodeContainer.encode(srtDestinationSettings, forKey: .srtDestinationSettings)
        }
        if let teletextDestinationSettings = teletextDestinationSettings {
            try encodeContainer.encode(teletextDestinationSettings, forKey: .teletextDestinationSettings)
        }
        if let ttmlDestinationSettings = ttmlDestinationSettings {
            try encodeContainer.encode(ttmlDestinationSettings, forKey: .ttmlDestinationSettings)
        }
        if let webvttDestinationSettings = webvttDestinationSettings {
            try encodeContainer.encode(webvttDestinationSettings, forKey: .webvttDestinationSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let burninDestinationSettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.BurninDestinationSettings.self, forKey: .burninDestinationSettings)
        burninDestinationSettings = burninDestinationSettingsDecoded
        let destinationTypeDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.CaptionDestinationType.self, forKey: .destinationType)
        destinationType = destinationTypeDecoded
        let dvbSubDestinationSettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.DvbSubDestinationSettings.self, forKey: .dvbSubDestinationSettings)
        dvbSubDestinationSettings = dvbSubDestinationSettingsDecoded
        let embeddedDestinationSettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.EmbeddedDestinationSettings.self, forKey: .embeddedDestinationSettings)
        embeddedDestinationSettings = embeddedDestinationSettingsDecoded
        let imscDestinationSettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.ImscDestinationSettings.self, forKey: .imscDestinationSettings)
        imscDestinationSettings = imscDestinationSettingsDecoded
        let sccDestinationSettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.SccDestinationSettings.self, forKey: .sccDestinationSettings)
        sccDestinationSettings = sccDestinationSettingsDecoded
        let srtDestinationSettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.SrtDestinationSettings.self, forKey: .srtDestinationSettings)
        srtDestinationSettings = srtDestinationSettingsDecoded
        let teletextDestinationSettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.TeletextDestinationSettings.self, forKey: .teletextDestinationSettings)
        teletextDestinationSettings = teletextDestinationSettingsDecoded
        let ttmlDestinationSettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.TtmlDestinationSettings.self, forKey: .ttmlDestinationSettings)
        ttmlDestinationSettings = ttmlDestinationSettingsDecoded
        let webvttDestinationSettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.WebvttDestinationSettings.self, forKey: .webvttDestinationSettings)
        webvttDestinationSettings = webvttDestinationSettingsDecoded
    }
}
