// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaConvertClientTypes.Hdr10Metadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bluePrimaryX = "bluePrimaryX"
        case bluePrimaryY = "bluePrimaryY"
        case greenPrimaryX = "greenPrimaryX"
        case greenPrimaryY = "greenPrimaryY"
        case maxContentLightLevel = "maxContentLightLevel"
        case maxFrameAverageLightLevel = "maxFrameAverageLightLevel"
        case maxLuminance = "maxLuminance"
        case minLuminance = "minLuminance"
        case redPrimaryX = "redPrimaryX"
        case redPrimaryY = "redPrimaryY"
        case whitePointX = "whitePointX"
        case whitePointY = "whitePointY"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bluePrimaryX = bluePrimaryX {
            try encodeContainer.encode(bluePrimaryX, forKey: .bluePrimaryX)
        }
        if let bluePrimaryY = bluePrimaryY {
            try encodeContainer.encode(bluePrimaryY, forKey: .bluePrimaryY)
        }
        if let greenPrimaryX = greenPrimaryX {
            try encodeContainer.encode(greenPrimaryX, forKey: .greenPrimaryX)
        }
        if let greenPrimaryY = greenPrimaryY {
            try encodeContainer.encode(greenPrimaryY, forKey: .greenPrimaryY)
        }
        if let maxContentLightLevel = maxContentLightLevel {
            try encodeContainer.encode(maxContentLightLevel, forKey: .maxContentLightLevel)
        }
        if let maxFrameAverageLightLevel = maxFrameAverageLightLevel {
            try encodeContainer.encode(maxFrameAverageLightLevel, forKey: .maxFrameAverageLightLevel)
        }
        if let maxLuminance = maxLuminance {
            try encodeContainer.encode(maxLuminance, forKey: .maxLuminance)
        }
        if let minLuminance = minLuminance {
            try encodeContainer.encode(minLuminance, forKey: .minLuminance)
        }
        if let redPrimaryX = redPrimaryX {
            try encodeContainer.encode(redPrimaryX, forKey: .redPrimaryX)
        }
        if let redPrimaryY = redPrimaryY {
            try encodeContainer.encode(redPrimaryY, forKey: .redPrimaryY)
        }
        if let whitePointX = whitePointX {
            try encodeContainer.encode(whitePointX, forKey: .whitePointX)
        }
        if let whitePointY = whitePointY {
            try encodeContainer.encode(whitePointY, forKey: .whitePointY)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bluePrimaryXDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .bluePrimaryX)
        bluePrimaryX = bluePrimaryXDecoded
        let bluePrimaryYDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .bluePrimaryY)
        bluePrimaryY = bluePrimaryYDecoded
        let greenPrimaryXDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .greenPrimaryX)
        greenPrimaryX = greenPrimaryXDecoded
        let greenPrimaryYDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .greenPrimaryY)
        greenPrimaryY = greenPrimaryYDecoded
        let maxContentLightLevelDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxContentLightLevel)
        maxContentLightLevel = maxContentLightLevelDecoded
        let maxFrameAverageLightLevelDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxFrameAverageLightLevel)
        maxFrameAverageLightLevel = maxFrameAverageLightLevelDecoded
        let maxLuminanceDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxLuminance)
        maxLuminance = maxLuminanceDecoded
        let minLuminanceDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minLuminance)
        minLuminance = minLuminanceDecoded
        let redPrimaryXDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .redPrimaryX)
        redPrimaryX = redPrimaryXDecoded
        let redPrimaryYDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .redPrimaryY)
        redPrimaryY = redPrimaryYDecoded
        let whitePointXDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .whitePointX)
        whitePointX = whitePointXDecoded
        let whitePointYDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .whitePointY)
        whitePointY = whitePointYDecoded
    }
}
