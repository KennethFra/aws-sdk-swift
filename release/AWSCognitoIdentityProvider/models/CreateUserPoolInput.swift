// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Represents the request to create a user pool.
public struct CreateUserPoolInput: Swift.Equatable {
    /// Use this setting to define which verified available method a user can use to recover their password when they call ForgotPassword. It allows you to define a preferred method when a user has more than one method available. With this setting, SMS does not qualify for a valid password recovery mechanism if the user also has SMS MFA enabled. In the absence of this setting, Cognito uses the legacy behavior to determine the recovery method where SMS is preferred over email.
    public var accountRecoverySetting: CognitoIdentityProviderClientTypes.AccountRecoverySettingType?
    /// The configuration for AdminCreateUser requests.
    public var adminCreateUserConfig: CognitoIdentityProviderClientTypes.AdminCreateUserConfigType?
    /// Attributes supported as an alias for this user pool. Possible values: phone_number, email, or preferred_username.
    public var aliasAttributes: [CognitoIdentityProviderClientTypes.AliasAttributeType]?
    /// The attributes to be auto-verified. Possible values: email, phone_number.
    public var autoVerifiedAttributes: [CognitoIdentityProviderClientTypes.VerifiedAttributeType]?
    /// The device configuration.
    public var deviceConfiguration: CognitoIdentityProviderClientTypes.DeviceConfigurationType?
    /// The email configuration.
    public var emailConfiguration: CognitoIdentityProviderClientTypes.EmailConfigurationType?
    /// A string representing the email verification message. EmailVerificationMessage is allowed only if [EmailSendingAccount](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount) is DEVELOPER.
    public var emailVerificationMessage: Swift.String?
    /// A string representing the email verification subject. EmailVerificationSubject is allowed only if [EmailSendingAccount](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount) is DEVELOPER.
    public var emailVerificationSubject: Swift.String?
    /// The Lambda trigger configuration information for the new user pool. In a push model, event sources (such as Amazon S3 and custom applications) need permission to invoke a function. So you will need to make an extra call to add permission for these event sources to invoke your Lambda function. For more information on using the Lambda API to add permission, see [ AddPermission ](https://docs.aws.amazon.com/lambda/latest/dg/API_AddPermission.html). For adding permission using the CLI, see [ add-permission ](https://docs.aws.amazon.com/cli/latest/reference/lambda/add-permission.html).
    public var lambdaConfig: CognitoIdentityProviderClientTypes.LambdaConfigType?
    /// Specifies MFA configuration details.
    public var mfaConfiguration: CognitoIdentityProviderClientTypes.UserPoolMfaType?
    /// The policies associated with the new user pool.
    public var policies: CognitoIdentityProviderClientTypes.UserPoolPolicyType?
    /// A string used to name the user pool.
    /// This member is required.
    public var poolName: Swift.String?
    /// An array of schema attributes for the new user pool. These attributes can be standard or custom attributes.
    public var schema: [CognitoIdentityProviderClientTypes.SchemaAttributeType]?
    /// A string representing the SMS authentication message.
    public var smsAuthenticationMessage: Swift.String?
    /// The SMS configuration.
    public var smsConfiguration: CognitoIdentityProviderClientTypes.SmsConfigurationType?
    /// A string representing the SMS verification message.
    public var smsVerificationMessage: Swift.String?
    /// Used to enable advanced security risk detection. Set the key AdvancedSecurityMode to the value "AUDIT".
    public var userPoolAddOns: CognitoIdentityProviderClientTypes.UserPoolAddOnsType?
    /// The tag keys and values to assign to the user pool. A tag is a label that you can use to categorize and manage user pools in different ways, such as by purpose, owner, environment, or other criteria.
    public var userPoolTags: [Swift.String:Swift.String]?
    /// Specifies whether email addresses or phone numbers can be specified as usernames when a user signs up.
    public var usernameAttributes: [CognitoIdentityProviderClientTypes.UsernameAttributeType]?
    /// You can choose to set case sensitivity on the username input for the selected sign-in option. For example, when this is set to False, users will be able to sign in using either "username" or "Username". This configuration is immutable once it has been set. For more information, see [UsernameConfigurationType](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UsernameConfigurationType.html).
    public var usernameConfiguration: CognitoIdentityProviderClientTypes.UsernameConfigurationType?
    /// The template for the verification message that the user sees when the app requests permission to access the user's information.
    public var verificationMessageTemplate: CognitoIdentityProviderClientTypes.VerificationMessageTemplateType?

    public init (
        accountRecoverySetting: CognitoIdentityProviderClientTypes.AccountRecoverySettingType? = nil,
        adminCreateUserConfig: CognitoIdentityProviderClientTypes.AdminCreateUserConfigType? = nil,
        aliasAttributes: [CognitoIdentityProviderClientTypes.AliasAttributeType]? = nil,
        autoVerifiedAttributes: [CognitoIdentityProviderClientTypes.VerifiedAttributeType]? = nil,
        deviceConfiguration: CognitoIdentityProviderClientTypes.DeviceConfigurationType? = nil,
        emailConfiguration: CognitoIdentityProviderClientTypes.EmailConfigurationType? = nil,
        emailVerificationMessage: Swift.String? = nil,
        emailVerificationSubject: Swift.String? = nil,
        lambdaConfig: CognitoIdentityProviderClientTypes.LambdaConfigType? = nil,
        mfaConfiguration: CognitoIdentityProviderClientTypes.UserPoolMfaType? = nil,
        policies: CognitoIdentityProviderClientTypes.UserPoolPolicyType? = nil,
        poolName: Swift.String? = nil,
        schema: [CognitoIdentityProviderClientTypes.SchemaAttributeType]? = nil,
        smsAuthenticationMessage: Swift.String? = nil,
        smsConfiguration: CognitoIdentityProviderClientTypes.SmsConfigurationType? = nil,
        smsVerificationMessage: Swift.String? = nil,
        userPoolAddOns: CognitoIdentityProviderClientTypes.UserPoolAddOnsType? = nil,
        userPoolTags: [Swift.String:Swift.String]? = nil,
        usernameAttributes: [CognitoIdentityProviderClientTypes.UsernameAttributeType]? = nil,
        usernameConfiguration: CognitoIdentityProviderClientTypes.UsernameConfigurationType? = nil,
        verificationMessageTemplate: CognitoIdentityProviderClientTypes.VerificationMessageTemplateType? = nil
    )
    {
        self.accountRecoverySetting = accountRecoverySetting
        self.adminCreateUserConfig = adminCreateUserConfig
        self.aliasAttributes = aliasAttributes
        self.autoVerifiedAttributes = autoVerifiedAttributes
        self.deviceConfiguration = deviceConfiguration
        self.emailConfiguration = emailConfiguration
        self.emailVerificationMessage = emailVerificationMessage
        self.emailVerificationSubject = emailVerificationSubject
        self.lambdaConfig = lambdaConfig
        self.mfaConfiguration = mfaConfiguration
        self.policies = policies
        self.poolName = poolName
        self.schema = schema
        self.smsAuthenticationMessage = smsAuthenticationMessage
        self.smsConfiguration = smsConfiguration
        self.smsVerificationMessage = smsVerificationMessage
        self.userPoolAddOns = userPoolAddOns
        self.userPoolTags = userPoolTags
        self.usernameAttributes = usernameAttributes
        self.usernameConfiguration = usernameConfiguration
        self.verificationMessageTemplate = verificationMessageTemplate
    }
}
