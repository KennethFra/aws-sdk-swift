// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CognitoIdentityProviderClientTypes.LambdaConfigType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createAuthChallenge = "CreateAuthChallenge"
        case customEmailSender = "CustomEmailSender"
        case customMessage = "CustomMessage"
        case customSMSSender = "CustomSMSSender"
        case defineAuthChallenge = "DefineAuthChallenge"
        case kMSKeyID = "KMSKeyID"
        case postAuthentication = "PostAuthentication"
        case postConfirmation = "PostConfirmation"
        case preAuthentication = "PreAuthentication"
        case preSignUp = "PreSignUp"
        case preTokenGeneration = "PreTokenGeneration"
        case userMigration = "UserMigration"
        case verifyAuthChallengeResponse = "VerifyAuthChallengeResponse"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createAuthChallenge = createAuthChallenge {
            try encodeContainer.encode(createAuthChallenge, forKey: .createAuthChallenge)
        }
        if let customEmailSender = customEmailSender {
            try encodeContainer.encode(customEmailSender, forKey: .customEmailSender)
        }
        if let customMessage = customMessage {
            try encodeContainer.encode(customMessage, forKey: .customMessage)
        }
        if let customSMSSender = customSMSSender {
            try encodeContainer.encode(customSMSSender, forKey: .customSMSSender)
        }
        if let defineAuthChallenge = defineAuthChallenge {
            try encodeContainer.encode(defineAuthChallenge, forKey: .defineAuthChallenge)
        }
        if let kMSKeyID = kMSKeyID {
            try encodeContainer.encode(kMSKeyID, forKey: .kMSKeyID)
        }
        if let postAuthentication = postAuthentication {
            try encodeContainer.encode(postAuthentication, forKey: .postAuthentication)
        }
        if let postConfirmation = postConfirmation {
            try encodeContainer.encode(postConfirmation, forKey: .postConfirmation)
        }
        if let preAuthentication = preAuthentication {
            try encodeContainer.encode(preAuthentication, forKey: .preAuthentication)
        }
        if let preSignUp = preSignUp {
            try encodeContainer.encode(preSignUp, forKey: .preSignUp)
        }
        if let preTokenGeneration = preTokenGeneration {
            try encodeContainer.encode(preTokenGeneration, forKey: .preTokenGeneration)
        }
        if let userMigration = userMigration {
            try encodeContainer.encode(userMigration, forKey: .userMigration)
        }
        if let verifyAuthChallengeResponse = verifyAuthChallengeResponse {
            try encodeContainer.encode(verifyAuthChallengeResponse, forKey: .verifyAuthChallengeResponse)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let preSignUpDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preSignUp)
        preSignUp = preSignUpDecoded
        let customMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customMessage)
        customMessage = customMessageDecoded
        let postConfirmationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .postConfirmation)
        postConfirmation = postConfirmationDecoded
        let preAuthenticationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preAuthentication)
        preAuthentication = preAuthenticationDecoded
        let postAuthenticationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .postAuthentication)
        postAuthentication = postAuthenticationDecoded
        let defineAuthChallengeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defineAuthChallenge)
        defineAuthChallenge = defineAuthChallengeDecoded
        let createAuthChallengeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createAuthChallenge)
        createAuthChallenge = createAuthChallengeDecoded
        let verifyAuthChallengeResponseDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .verifyAuthChallengeResponse)
        verifyAuthChallengeResponse = verifyAuthChallengeResponseDecoded
        let preTokenGenerationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preTokenGeneration)
        preTokenGeneration = preTokenGenerationDecoded
        let userMigrationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userMigration)
        userMigration = userMigrationDecoded
        let customSMSSenderDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.CustomSMSLambdaVersionConfigType.self, forKey: .customSMSSender)
        customSMSSender = customSMSSenderDecoded
        let customEmailSenderDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.CustomEmailLambdaVersionConfigType.self, forKey: .customEmailSender)
        customEmailSender = customEmailSenderDecoded
        let kMSKeyIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kMSKeyID)
        kMSKeyID = kMSKeyIDDecoded
    }
}
