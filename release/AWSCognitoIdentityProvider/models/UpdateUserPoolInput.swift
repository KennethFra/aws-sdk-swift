// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Represents the request to update the user pool.
public struct UpdateUserPoolInput: Swift.Equatable {
    /// Use this setting to define which verified available method a user can use to recover their password when they call ForgotPassword. It allows you to define a preferred method when a user has more than one method available. With this setting, SMS does not qualify for a valid password recovery mechanism if the user also has SMS MFA enabled. In the absence of this setting, Cognito uses the legacy behavior to determine the recovery method where SMS is preferred over email.
    public var accountRecoverySetting: CognitoIdentityProviderClientTypes.AccountRecoverySettingType?
    /// The configuration for AdminCreateUser requests.
    public var adminCreateUserConfig: CognitoIdentityProviderClientTypes.AdminCreateUserConfigType?
    /// The attributes that are automatically verified when the Amazon Cognito service makes a request to update user pools.
    public var autoVerifiedAttributes: [CognitoIdentityProviderClientTypes.VerifiedAttributeType]?
    /// Device configuration.
    public var deviceConfiguration: CognitoIdentityProviderClientTypes.DeviceConfigurationType?
    /// Email configuration.
    public var emailConfiguration: CognitoIdentityProviderClientTypes.EmailConfigurationType?
    /// The contents of the email verification message.
    public var emailVerificationMessage: Swift.String?
    /// The subject of the email verification message.
    public var emailVerificationSubject: Swift.String?
    /// The Lambda configuration information from the request to update the user pool.
    public var lambdaConfig: CognitoIdentityProviderClientTypes.LambdaConfigType?
    /// Can be one of the following values:
    ///
    /// * OFF - MFA tokens are not required and cannot be specified during user registration.
    ///
    /// * ON - MFA tokens are required for all user registrations. You can only specify ON when you are initially creating a user pool. You can use the [SetUserPoolMfaConfig](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_SetUserPoolMfaConfig.html) API operation to turn MFA "ON" for existing user pools.
    ///
    /// * OPTIONAL - Users have the option when registering to create an MFA token.
    public var mfaConfiguration: CognitoIdentityProviderClientTypes.UserPoolMfaType?
    /// A container with the policies you wish to update in a user pool.
    public var policies: CognitoIdentityProviderClientTypes.UserPoolPolicyType?
    /// The contents of the SMS authentication message.
    public var smsAuthenticationMessage: Swift.String?
    /// SMS configuration.
    public var smsConfiguration: CognitoIdentityProviderClientTypes.SmsConfigurationType?
    /// A container with information about the SMS verification message.
    public var smsVerificationMessage: Swift.String?
    /// Used to enable advanced security risk detection. Set the key AdvancedSecurityMode to the value "AUDIT".
    public var userPoolAddOns: CognitoIdentityProviderClientTypes.UserPoolAddOnsType?
    /// The user pool ID for the user pool you want to update.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The tag keys and values to assign to the user pool. A tag is a label that you can use to categorize and manage user pools in different ways, such as by purpose, owner, environment, or other criteria.
    public var userPoolTags: [Swift.String:Swift.String]?
    /// The template for verification messages.
    public var verificationMessageTemplate: CognitoIdentityProviderClientTypes.VerificationMessageTemplateType?

    public init (
        accountRecoverySetting: CognitoIdentityProviderClientTypes.AccountRecoverySettingType? = nil,
        adminCreateUserConfig: CognitoIdentityProviderClientTypes.AdminCreateUserConfigType? = nil,
        autoVerifiedAttributes: [CognitoIdentityProviderClientTypes.VerifiedAttributeType]? = nil,
        deviceConfiguration: CognitoIdentityProviderClientTypes.DeviceConfigurationType? = nil,
        emailConfiguration: CognitoIdentityProviderClientTypes.EmailConfigurationType? = nil,
        emailVerificationMessage: Swift.String? = nil,
        emailVerificationSubject: Swift.String? = nil,
        lambdaConfig: CognitoIdentityProviderClientTypes.LambdaConfigType? = nil,
        mfaConfiguration: CognitoIdentityProviderClientTypes.UserPoolMfaType? = nil,
        policies: CognitoIdentityProviderClientTypes.UserPoolPolicyType? = nil,
        smsAuthenticationMessage: Swift.String? = nil,
        smsConfiguration: CognitoIdentityProviderClientTypes.SmsConfigurationType? = nil,
        smsVerificationMessage: Swift.String? = nil,
        userPoolAddOns: CognitoIdentityProviderClientTypes.UserPoolAddOnsType? = nil,
        userPoolId: Swift.String? = nil,
        userPoolTags: [Swift.String:Swift.String]? = nil,
        verificationMessageTemplate: CognitoIdentityProviderClientTypes.VerificationMessageTemplateType? = nil
    )
    {
        self.accountRecoverySetting = accountRecoverySetting
        self.adminCreateUserConfig = adminCreateUserConfig
        self.autoVerifiedAttributes = autoVerifiedAttributes
        self.deviceConfiguration = deviceConfiguration
        self.emailConfiguration = emailConfiguration
        self.emailVerificationMessage = emailVerificationMessage
        self.emailVerificationSubject = emailVerificationSubject
        self.lambdaConfig = lambdaConfig
        self.mfaConfiguration = mfaConfiguration
        self.policies = policies
        self.smsAuthenticationMessage = smsAuthenticationMessage
        self.smsConfiguration = smsConfiguration
        self.smsVerificationMessage = smsVerificationMessage
        self.userPoolAddOns = userPoolAddOns
        self.userPoolId = userPoolId
        self.userPoolTags = userPoolTags
        self.verificationMessageTemplate = verificationMessageTemplate
    }
}
