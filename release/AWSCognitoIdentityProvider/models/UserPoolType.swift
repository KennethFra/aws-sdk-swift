// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CognitoIdentityProviderClientTypes {
    /// A container for information about the user pool.
    public struct UserPoolType: Swift.Equatable {
        /// Use this setting to define which verified available method a user can use to recover their password when they call ForgotPassword. It allows you to define a preferred method when a user has more than one method available. With this setting, SMS does not qualify for a valid password recovery mechanism if the user also has SMS MFA enabled. In the absence of this setting, Cognito uses the legacy behavior to determine the recovery method where SMS is preferred over email.
        public var accountRecoverySetting: CognitoIdentityProviderClientTypes.AccountRecoverySettingType?
        /// The configuration for AdminCreateUser requests.
        public var adminCreateUserConfig: CognitoIdentityProviderClientTypes.AdminCreateUserConfigType?
        /// Specifies the attributes that are aliased in a user pool.
        public var aliasAttributes: [CognitoIdentityProviderClientTypes.AliasAttributeType]?
        /// The Amazon Resource Name (ARN) for the user pool.
        public var arn: Swift.String?
        /// Specifies the attributes that are auto-verified in a user pool.
        public var autoVerifiedAttributes: [CognitoIdentityProviderClientTypes.VerifiedAttributeType]?
        /// The date the user pool was created.
        public var creationDate: ClientRuntime.Date?
        /// A custom domain name that you provide to Amazon Cognito. This parameter applies only if you use a custom domain to host the sign-up and sign-in pages for your application. For example: auth.example.com. For more information about adding a custom domain to your user pool, see [Using Your Own Domain for the Hosted UI](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-add-custom-domain.html).
        public var customDomain: Swift.String?
        /// The device configuration.
        public var deviceConfiguration: CognitoIdentityProviderClientTypes.DeviceConfigurationType?
        /// Holds the domain prefix if the user pool has a domain associated with it.
        public var domain: Swift.String?
        /// The email configuration.
        public var emailConfiguration: CognitoIdentityProviderClientTypes.EmailConfigurationType?
        /// The reason why the email configuration cannot send the messages to your users.
        public var emailConfigurationFailure: Swift.String?
        /// The contents of the email verification message.
        public var emailVerificationMessage: Swift.String?
        /// The subject of the email verification message.
        public var emailVerificationSubject: Swift.String?
        /// A number estimating the size of the user pool.
        public var estimatedNumberOfUsers: Swift.Int
        /// The ID of the user pool.
        public var id: Swift.String?
        /// The Lambda triggers associated with the user pool.
        public var lambdaConfig: CognitoIdentityProviderClientTypes.LambdaConfigType?
        /// The date the user pool was last modified.
        public var lastModifiedDate: ClientRuntime.Date?
        /// Can be one of the following values:
        ///
        /// * OFF - MFA tokens are not required and cannot be specified during user registration.
        ///
        /// * ON - MFA tokens are required for all user registrations. You can only specify required when you are initially creating a user pool.
        ///
        /// * OPTIONAL - Users have the option when registering to create an MFA token.
        public var mfaConfiguration: CognitoIdentityProviderClientTypes.UserPoolMfaType?
        /// The name of the user pool.
        public var name: Swift.String?
        /// The policies associated with the user pool.
        public var policies: CognitoIdentityProviderClientTypes.UserPoolPolicyType?
        /// A container with the schema attributes of a user pool.
        public var schemaAttributes: [CognitoIdentityProviderClientTypes.SchemaAttributeType]?
        /// The contents of the SMS authentication message.
        public var smsAuthenticationMessage: Swift.String?
        /// The SMS configuration.
        public var smsConfiguration: CognitoIdentityProviderClientTypes.SmsConfigurationType?
        /// The reason why the SMS configuration cannot send the messages to your users. This message might include comma-separated values to describe why your SMS configuration can't send messages to user pool end users.
        ///
        /// * InvalidSmsRoleAccessPolicyException - The IAM role which Cognito uses to send SMS messages is not properly configured. For more information, see [SmsConfigurationType](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_SmsConfigurationType.html).
        ///
        /// * SNSSandbox - The account is in SNS Sandbox and messages won’t reach unverified end users. This parameter won’t get populated with SNSSandbox if the IAM user creating the user pool doesn’t have SNS permissions. To learn how to move your account out of the sandbox, see [Moving out of the SMS sandbox](https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox-moving-to-production.html).
        public var smsConfigurationFailure: Swift.String?
        /// The contents of the SMS verification message.
        public var smsVerificationMessage: Swift.String?
        /// The status of a user pool.
        public var status: CognitoIdentityProviderClientTypes.StatusType?
        /// The user pool add-ons.
        public var userPoolAddOns: CognitoIdentityProviderClientTypes.UserPoolAddOnsType?
        /// The tags that are assigned to the user pool. A tag is a label that you can apply to user pools to categorize and manage them in different ways, such as by purpose, owner, environment, or other criteria.
        public var userPoolTags: [Swift.String:Swift.String]?
        /// Specifies whether email addresses or phone numbers can be specified as usernames when a user signs up.
        public var usernameAttributes: [CognitoIdentityProviderClientTypes.UsernameAttributeType]?
        /// You can choose to enable case sensitivity on the username input for the selected sign-in option. For example, when this is set to False, users will be able to sign in using either "username" or "Username". This configuration is immutable once it has been set. For more information, see [UsernameConfigurationType](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UsernameConfigurationType.html).
        public var usernameConfiguration: CognitoIdentityProviderClientTypes.UsernameConfigurationType?
        /// The template for verification messages.
        public var verificationMessageTemplate: CognitoIdentityProviderClientTypes.VerificationMessageTemplateType?

        public init (
            accountRecoverySetting: CognitoIdentityProviderClientTypes.AccountRecoverySettingType? = nil,
            adminCreateUserConfig: CognitoIdentityProviderClientTypes.AdminCreateUserConfigType? = nil,
            aliasAttributes: [CognitoIdentityProviderClientTypes.AliasAttributeType]? = nil,
            arn: Swift.String? = nil,
            autoVerifiedAttributes: [CognitoIdentityProviderClientTypes.VerifiedAttributeType]? = nil,
            creationDate: ClientRuntime.Date? = nil,
            customDomain: Swift.String? = nil,
            deviceConfiguration: CognitoIdentityProviderClientTypes.DeviceConfigurationType? = nil,
            domain: Swift.String? = nil,
            emailConfiguration: CognitoIdentityProviderClientTypes.EmailConfigurationType? = nil,
            emailConfigurationFailure: Swift.String? = nil,
            emailVerificationMessage: Swift.String? = nil,
            emailVerificationSubject: Swift.String? = nil,
            estimatedNumberOfUsers: Swift.Int = 0,
            id: Swift.String? = nil,
            lambdaConfig: CognitoIdentityProviderClientTypes.LambdaConfigType? = nil,
            lastModifiedDate: ClientRuntime.Date? = nil,
            mfaConfiguration: CognitoIdentityProviderClientTypes.UserPoolMfaType? = nil,
            name: Swift.String? = nil,
            policies: CognitoIdentityProviderClientTypes.UserPoolPolicyType? = nil,
            schemaAttributes: [CognitoIdentityProviderClientTypes.SchemaAttributeType]? = nil,
            smsAuthenticationMessage: Swift.String? = nil,
            smsConfiguration: CognitoIdentityProviderClientTypes.SmsConfigurationType? = nil,
            smsConfigurationFailure: Swift.String? = nil,
            smsVerificationMessage: Swift.String? = nil,
            status: CognitoIdentityProviderClientTypes.StatusType? = nil,
            userPoolAddOns: CognitoIdentityProviderClientTypes.UserPoolAddOnsType? = nil,
            userPoolTags: [Swift.String:Swift.String]? = nil,
            usernameAttributes: [CognitoIdentityProviderClientTypes.UsernameAttributeType]? = nil,
            usernameConfiguration: CognitoIdentityProviderClientTypes.UsernameConfigurationType? = nil,
            verificationMessageTemplate: CognitoIdentityProviderClientTypes.VerificationMessageTemplateType? = nil
        )
        {
            self.accountRecoverySetting = accountRecoverySetting
            self.adminCreateUserConfig = adminCreateUserConfig
            self.aliasAttributes = aliasAttributes
            self.arn = arn
            self.autoVerifiedAttributes = autoVerifiedAttributes
            self.creationDate = creationDate
            self.customDomain = customDomain
            self.deviceConfiguration = deviceConfiguration
            self.domain = domain
            self.emailConfiguration = emailConfiguration
            self.emailConfigurationFailure = emailConfigurationFailure
            self.emailVerificationMessage = emailVerificationMessage
            self.emailVerificationSubject = emailVerificationSubject
            self.estimatedNumberOfUsers = estimatedNumberOfUsers
            self.id = id
            self.lambdaConfig = lambdaConfig
            self.lastModifiedDate = lastModifiedDate
            self.mfaConfiguration = mfaConfiguration
            self.name = name
            self.policies = policies
            self.schemaAttributes = schemaAttributes
            self.smsAuthenticationMessage = smsAuthenticationMessage
            self.smsConfiguration = smsConfiguration
            self.smsConfigurationFailure = smsConfigurationFailure
            self.smsVerificationMessage = smsVerificationMessage
            self.status = status
            self.userPoolAddOns = userPoolAddOns
            self.userPoolTags = userPoolTags
            self.usernameAttributes = usernameAttributes
            self.usernameConfiguration = usernameConfiguration
            self.verificationMessageTemplate = verificationMessageTemplate
        }
    }

}
