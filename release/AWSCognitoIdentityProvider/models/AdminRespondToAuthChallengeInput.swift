// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// The request to respond to the authentication challenge, as an administrator.
public struct AdminRespondToAuthChallengeInput: Swift.Equatable {
    /// The analytics metadata for collecting Amazon Pinpoint metrics for AdminRespondToAuthChallenge calls.
    public var analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType?
    /// The challenge name. For more information, see [AdminInitiateAuth](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminInitiateAuth.html).
    /// This member is required.
    public var challengeName: CognitoIdentityProviderClientTypes.ChallengeNameType?
    /// The challenge responses. These are inputs corresponding to the value of ChallengeName, for example:
    ///
    /// * SMS_MFA: SMS_MFA_CODE, USERNAME, SECRET_HASH (if app client is configured with client secret).
    ///
    /// * PASSWORD_VERIFIER: PASSWORD_CLAIM_SIGNATURE, PASSWORD_CLAIM_SECRET_BLOCK, TIMESTAMP, USERNAME, SECRET_HASH (if app client is configured with client secret).
    ///
    /// * ADMIN_NO_SRP_AUTH: PASSWORD, USERNAME, SECRET_HASH (if app client is configured with client secret).
    ///
    /// * NEW_PASSWORD_REQUIRED: NEW_PASSWORD, any other required attributes, USERNAME, SECRET_HASH (if app client is configured with client secret).
    ///
    /// * MFA_SETUP requires USERNAME, plus you need to use the session value returned by VerifySoftwareToken in the Session parameter.
    ///
    ///
    /// The value of the USERNAME attribute must be the user's actual username, not an alias (such as email address or phone number). To make this easier, the AdminInitiateAuth response includes the actual username value in the USERNAMEUSER_ID_FOR_SRP attribute, even if you specified an alias in your call to AdminInitiateAuth.
    public var challengeResponses: [Swift.String:Swift.String]?
    /// The app client ID.
    /// This member is required.
    public var clientId: Swift.String?
    /// A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. You create custom workflows by assigning Lambda functions to user pool triggers. When you use the AdminRespondToAuthChallenge API action, Amazon Cognito invokes any functions that are assigned to the following triggers: pre sign-up, custom message, post authentication, user migration, pre token generation, define auth challenge, create auth challenge, and verify auth challenge response. When Amazon Cognito invokes any of these functions, it passes a JSON payload, which the function receives as input. This payload contains a clientMetadata attribute, which provides the data that you assigned to the ClientMetadata parameter in your AdminRespondToAuthChallenge request. In your function code in Lambda, you can process the clientMetadata value to enhance your workflow for your specific needs. For more information, see [Customizing User Pool Workflows with Lambda Triggers](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html) in the Amazon Cognito Developer Guide. Take the following limitations into consideration when you use the ClientMetadata parameter:
    ///
    /// * Amazon Cognito does not store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration does not include triggers, the ClientMetadata parameter serves no purpose.
    ///
    /// * Amazon Cognito does not validate the ClientMetadata value.
    ///
    /// * Amazon Cognito does not encrypt the the ClientMetadata value, so don't use it to provide sensitive information.
    public var clientMetadata: [Swift.String:Swift.String]?
    /// Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.
    public var contextData: CognitoIdentityProviderClientTypes.ContextDataType?
    /// The session which should be passed both ways in challenge-response calls to the service. If InitiateAuth or RespondToAuthChallenge API call determines that the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next RespondToAuthChallenge API call.
    public var session: Swift.String?
    /// The ID of the Amazon Cognito user pool.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init (
        analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType? = nil,
        challengeName: CognitoIdentityProviderClientTypes.ChallengeNameType? = nil,
        challengeResponses: [Swift.String:Swift.String]? = nil,
        clientId: Swift.String? = nil,
        clientMetadata: [Swift.String:Swift.String]? = nil,
        contextData: CognitoIdentityProviderClientTypes.ContextDataType? = nil,
        session: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.analyticsMetadata = analyticsMetadata
        self.challengeName = challengeName
        self.challengeResponses = challengeResponses
        self.clientId = clientId
        self.clientMetadata = clientMetadata
        self.contextData = contextData
        self.session = session
        self.userPoolId = userPoolId
    }
}
