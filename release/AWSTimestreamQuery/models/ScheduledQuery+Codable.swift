// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TimestreamQueryClientTypes.ScheduledQuery: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case creationTime = "CreationTime"
        case errorReportConfiguration = "ErrorReportConfiguration"
        case lastRunStatus = "LastRunStatus"
        case name = "Name"
        case nextInvocationTime = "NextInvocationTime"
        case previousInvocationTime = "PreviousInvocationTime"
        case state = "State"
        case targetDestination = "TargetDestination"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let errorReportConfiguration = errorReportConfiguration {
            try encodeContainer.encode(errorReportConfiguration, forKey: .errorReportConfiguration)
        }
        if let lastRunStatus = lastRunStatus {
            try encodeContainer.encode(lastRunStatus.rawValue, forKey: .lastRunStatus)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let nextInvocationTime = nextInvocationTime {
            try encodeContainer.encode(nextInvocationTime.timeIntervalSince1970, forKey: .nextInvocationTime)
        }
        if let previousInvocationTime = previousInvocationTime {
            try encodeContainer.encode(previousInvocationTime.timeIntervalSince1970, forKey: .previousInvocationTime)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let targetDestination = targetDestination {
            try encodeContainer.encode(targetDestination, forKey: .targetDestination)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let stateDecoded = try containerValues.decodeIfPresent(TimestreamQueryClientTypes.ScheduledQueryState.self, forKey: .state)
        state = stateDecoded
        let previousInvocationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .previousInvocationTime)
        previousInvocationTime = previousInvocationTimeDecoded
        let nextInvocationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .nextInvocationTime)
        nextInvocationTime = nextInvocationTimeDecoded
        let errorReportConfigurationDecoded = try containerValues.decodeIfPresent(TimestreamQueryClientTypes.ErrorReportConfiguration.self, forKey: .errorReportConfiguration)
        errorReportConfiguration = errorReportConfigurationDecoded
        let targetDestinationDecoded = try containerValues.decodeIfPresent(TimestreamQueryClientTypes.TargetDestination.self, forKey: .targetDestination)
        targetDestination = targetDestinationDecoded
        let lastRunStatusDecoded = try containerValues.decodeIfPresent(TimestreamQueryClientTypes.ScheduledQueryRunStatus.self, forKey: .lastRunStatus)
        lastRunStatus = lastRunStatusDecoded
    }
}
