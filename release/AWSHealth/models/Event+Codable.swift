// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension HealthClientTypes.Event: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case availabilityZone
        case endTime
        case eventScopeCode
        case eventTypeCategory
        case eventTypeCode
        case lastUpdatedTime
        case region
        case service
        case startTime
        case statusCode
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let availabilityZone = availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let eventScopeCode = eventScopeCode {
            try encodeContainer.encode(eventScopeCode.rawValue, forKey: .eventScopeCode)
        }
        if let eventTypeCategory = eventTypeCategory {
            try encodeContainer.encode(eventTypeCategory.rawValue, forKey: .eventTypeCategory)
        }
        if let eventTypeCode = eventTypeCode {
            try encodeContainer.encode(eventTypeCode, forKey: .eventTypeCode)
        }
        if let lastUpdatedTime = lastUpdatedTime {
            try encodeContainer.encode(lastUpdatedTime.timeIntervalSince1970, forKey: .lastUpdatedTime)
        }
        if let region = region {
            try encodeContainer.encode(region, forKey: .region)
        }
        if let service = service {
            try encodeContainer.encode(service, forKey: .service)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let statusCode = statusCode {
            try encodeContainer.encode(statusCode.rawValue, forKey: .statusCode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let serviceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .service)
        service = serviceDecoded
        let eventTypeCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventTypeCode)
        eventTypeCode = eventTypeCodeDecoded
        let eventTypeCategoryDecoded = try containerValues.decodeIfPresent(HealthClientTypes.EventTypeCategory.self, forKey: .eventTypeCategory)
        eventTypeCategory = eventTypeCategoryDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let lastUpdatedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
        let statusCodeDecoded = try containerValues.decodeIfPresent(HealthClientTypes.EventStatusCode.self, forKey: .statusCode)
        statusCode = statusCodeDecoded
        let eventScopeCodeDecoded = try containerValues.decodeIfPresent(HealthClientTypes.EventScopeCode.self, forKey: .eventScopeCode)
        eventScopeCode = eventScopeCodeDecoded
    }
}
