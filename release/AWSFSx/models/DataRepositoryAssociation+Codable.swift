// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FSxClientTypes.DataRepositoryAssociation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associationId = "AssociationId"
        case batchImportMetaDataOnCreate = "BatchImportMetaDataOnCreate"
        case creationTime = "CreationTime"
        case dataRepositoryPath = "DataRepositoryPath"
        case failureDetails = "FailureDetails"
        case fileSystemId = "FileSystemId"
        case fileSystemPath = "FileSystemPath"
        case importedFileChunkSize = "ImportedFileChunkSize"
        case lifecycle = "Lifecycle"
        case resourceARN = "ResourceARN"
        case s3 = "S3"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let associationId = associationId {
            try encodeContainer.encode(associationId, forKey: .associationId)
        }
        if let batchImportMetaDataOnCreate = batchImportMetaDataOnCreate {
            try encodeContainer.encode(batchImportMetaDataOnCreate, forKey: .batchImportMetaDataOnCreate)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let dataRepositoryPath = dataRepositoryPath {
            try encodeContainer.encode(dataRepositoryPath, forKey: .dataRepositoryPath)
        }
        if let failureDetails = failureDetails {
            try encodeContainer.encode(failureDetails, forKey: .failureDetails)
        }
        if let fileSystemId = fileSystemId {
            try encodeContainer.encode(fileSystemId, forKey: .fileSystemId)
        }
        if let fileSystemPath = fileSystemPath {
            try encodeContainer.encode(fileSystemPath, forKey: .fileSystemPath)
        }
        if let importedFileChunkSize = importedFileChunkSize {
            try encodeContainer.encode(importedFileChunkSize, forKey: .importedFileChunkSize)
        }
        if let lifecycle = lifecycle {
            try encodeContainer.encode(lifecycle.rawValue, forKey: .lifecycle)
        }
        if let resourceARN = resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
        if let s3 = s3 {
            try encodeContainer.encode(s3, forKey: .s3)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tags0 in tags {
                try tagsContainer.encode(tags0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let associationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associationId)
        associationId = associationIdDecoded
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
        let fileSystemIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileSystemId)
        fileSystemId = fileSystemIdDecoded
        let lifecycleDecoded = try containerValues.decodeIfPresent(FSxClientTypes.DataRepositoryLifecycle.self, forKey: .lifecycle)
        lifecycle = lifecycleDecoded
        let failureDetailsDecoded = try containerValues.decodeIfPresent(FSxClientTypes.DataRepositoryFailureDetails.self, forKey: .failureDetails)
        failureDetails = failureDetailsDecoded
        let fileSystemPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileSystemPath)
        fileSystemPath = fileSystemPathDecoded
        let dataRepositoryPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataRepositoryPath)
        dataRepositoryPath = dataRepositoryPathDecoded
        let batchImportMetaDataOnCreateDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .batchImportMetaDataOnCreate)
        batchImportMetaDataOnCreate = batchImportMetaDataOnCreateDecoded
        let importedFileChunkSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .importedFileChunkSize)
        importedFileChunkSize = importedFileChunkSizeDecoded
        let s3Decoded = try containerValues.decodeIfPresent(FSxClientTypes.S3DataRepositoryConfiguration.self, forKey: .s3)
        s3 = s3Decoded
        let tagsContainer = try containerValues.decodeIfPresent([FSxClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[FSxClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [FSxClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}
