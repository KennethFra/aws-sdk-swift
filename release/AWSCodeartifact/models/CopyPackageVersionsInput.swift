// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CopyPackageVersionsInput: Swift.Equatable {
    /// Set to true to overwrite a package version that already exists in the destination repository. If set to false and the package version already exists in the destination repository, the package version is returned in the failedVersions field of the response with an ALREADY_EXISTS error code.
    public var allowOverwrite: Swift.Bool?
    /// The name of the repository into which package versions are copied.
    /// This member is required.
    public var destinationRepository: Swift.String?
    /// The name of the domain that contains the source and destination repositories.
    /// This member is required.
    public var domain: Swift.String?
    /// The 12-digit account number of the AWS account that owns the domain. It does not include dashes or spaces.
    public var domainOwner: Swift.String?
    /// The format of the package that is copied. The valid package types are:
    ///
    /// * npm: A Node Package Manager (npm) package.
    ///
    /// * pypi: A Python Package Index (PyPI) package.
    ///
    /// * maven: A Maven package that contains compiled code in a distributable format, such as a JAR file.
    /// This member is required.
    public var format: CodeartifactClientTypes.PackageFormat?
    /// Set to true to copy packages from repositories that are upstream from the source repository to the destination repository. The default setting is false. For more information, see [Working with upstream repositories](https://docs.aws.amazon.com/codeartifact/latest/ug/repos-upstream.html).
    public var includeFromUpstream: Swift.Bool?
    /// The namespace of the package. The package component that specifies its namespace depends on its type. For example:
    ///
    /// * The namespace of a Maven package is its groupId.
    ///
    /// * The namespace of an npm package is its scope.
    ///
    /// * A Python package does not contain a corresponding component, so Python packages do not have a namespace.
    public var namespace: Swift.String?
    /// The name of the package that is copied.
    /// This member is required.
    public var package: Swift.String?
    /// The name of the repository that contains the package versions to copy.
    /// This member is required.
    public var sourceRepository: Swift.String?
    /// A list of key-value pairs. The keys are package versions and the values are package version revisions. A CopyPackageVersion operation succeeds if the specified versions in the source repository match the specified package version revision. You must specify versions or versionRevisions. You cannot specify both.
    public var versionRevisions: [Swift.String:Swift.String]?
    /// The versions of the package to copy. You must specify versions or versionRevisions. You cannot specify both.
    public var versions: [Swift.String]?

    public init (
        allowOverwrite: Swift.Bool? = nil,
        destinationRepository: Swift.String? = nil,
        domain: Swift.String? = nil,
        domainOwner: Swift.String? = nil,
        format: CodeartifactClientTypes.PackageFormat? = nil,
        includeFromUpstream: Swift.Bool? = nil,
        namespace: Swift.String? = nil,
        package: Swift.String? = nil,
        sourceRepository: Swift.String? = nil,
        versionRevisions: [Swift.String:Swift.String]? = nil,
        versions: [Swift.String]? = nil
    )
    {
        self.allowOverwrite = allowOverwrite
        self.destinationRepository = destinationRepository
        self.domain = domain
        self.domainOwner = domainOwner
        self.format = format
        self.includeFromUpstream = includeFromUpstream
        self.namespace = namespace
        self.package = package
        self.sourceRepository = sourceRepository
        self.versionRevisions = versionRevisions
        self.versions = versions
    }
}
