// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FinspaceDataClientTypes.DataViewSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case asOfTimestamp
        case autoUpdate
        case createTime
        case dataViewArn
        case dataViewId
        case datasetId
        case destinationTypeProperties
        case errorInfo
        case lastModifiedTime
        case partitionColumns
        case sortColumns
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if asOfTimestamp != 0 {
            try encodeContainer.encode(asOfTimestamp, forKey: .asOfTimestamp)
        }
        if autoUpdate != false {
            try encodeContainer.encode(autoUpdate, forKey: .autoUpdate)
        }
        if createTime != 0 {
            try encodeContainer.encode(createTime, forKey: .createTime)
        }
        if let dataViewArn = dataViewArn {
            try encodeContainer.encode(dataViewArn, forKey: .dataViewArn)
        }
        if let dataViewId = dataViewId {
            try encodeContainer.encode(dataViewId, forKey: .dataViewId)
        }
        if let datasetId = datasetId {
            try encodeContainer.encode(datasetId, forKey: .datasetId)
        }
        if let destinationTypeProperties = destinationTypeProperties {
            try encodeContainer.encode(destinationTypeProperties, forKey: .destinationTypeProperties)
        }
        if let errorInfo = errorInfo {
            try encodeContainer.encode(errorInfo, forKey: .errorInfo)
        }
        if lastModifiedTime != 0 {
            try encodeContainer.encode(lastModifiedTime, forKey: .lastModifiedTime)
        }
        if let partitionColumns = partitionColumns {
            var partitionColumnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .partitionColumns)
            for partitioncolumnlist0 in partitionColumns {
                try partitionColumnsContainer.encode(partitioncolumnlist0)
            }
        }
        if let sortColumns = sortColumns {
            var sortColumnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sortColumns)
            for sortcolumnlist0 in sortColumns {
                try sortColumnsContainer.encode(sortcolumnlist0)
            }
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataViewIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataViewId)
        dataViewId = dataViewIdDecoded
        let dataViewArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataViewArn)
        dataViewArn = dataViewArnDecoded
        let datasetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetId)
        datasetId = datasetIdDecoded
        let asOfTimestampDecoded = try containerValues.decode(Swift.Int.self, forKey: .asOfTimestamp)
        asOfTimestamp = asOfTimestampDecoded
        let partitionColumnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .partitionColumns)
        var partitionColumnsDecoded0:[Swift.String]? = nil
        if let partitionColumnsContainer = partitionColumnsContainer {
            partitionColumnsDecoded0 = [Swift.String]()
            for string0 in partitionColumnsContainer {
                if let string0 = string0 {
                    partitionColumnsDecoded0?.append(string0)
                }
            }
        }
        partitionColumns = partitionColumnsDecoded0
        let sortColumnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .sortColumns)
        var sortColumnsDecoded0:[Swift.String]? = nil
        if let sortColumnsContainer = sortColumnsContainer {
            sortColumnsDecoded0 = [Swift.String]()
            for string0 in sortColumnsContainer {
                if let string0 = string0 {
                    sortColumnsDecoded0?.append(string0)
                }
            }
        }
        sortColumns = sortColumnsDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(FinspaceDataClientTypes.DataViewStatus.self, forKey: .status)
        status = statusDecoded
        let errorInfoDecoded = try containerValues.decodeIfPresent(FinspaceDataClientTypes.DataViewErrorInfo.self, forKey: .errorInfo)
        errorInfo = errorInfoDecoded
        let destinationTypePropertiesDecoded = try containerValues.decodeIfPresent(FinspaceDataClientTypes.DataViewDestinationTypeParams.self, forKey: .destinationTypeProperties)
        destinationTypeProperties = destinationTypePropertiesDecoded
        let autoUpdateDecoded = try containerValues.decode(Swift.Bool.self, forKey: .autoUpdate)
        autoUpdate = autoUpdateDecoded
        let createTimeDecoded = try containerValues.decode(Swift.Int.self, forKey: .createTime)
        createTime = createTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decode(Swift.Int.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
    }
}
