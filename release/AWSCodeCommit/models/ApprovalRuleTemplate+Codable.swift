// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CodeCommitClientTypes.ApprovalRuleTemplate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case approvalRuleTemplateContent
        case approvalRuleTemplateDescription
        case approvalRuleTemplateId
        case approvalRuleTemplateName
        case creationDate
        case lastModifiedDate
        case lastModifiedUser
        case ruleContentSha256
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let approvalRuleTemplateContent = approvalRuleTemplateContent {
            try encodeContainer.encode(approvalRuleTemplateContent, forKey: .approvalRuleTemplateContent)
        }
        if let approvalRuleTemplateDescription = approvalRuleTemplateDescription {
            try encodeContainer.encode(approvalRuleTemplateDescription, forKey: .approvalRuleTemplateDescription)
        }
        if let approvalRuleTemplateId = approvalRuleTemplateId {
            try encodeContainer.encode(approvalRuleTemplateId, forKey: .approvalRuleTemplateId)
        }
        if let approvalRuleTemplateName = approvalRuleTemplateName {
            try encodeContainer.encode(approvalRuleTemplateName, forKey: .approvalRuleTemplateName)
        }
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let lastModifiedDate = lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate.timeIntervalSince1970, forKey: .lastModifiedDate)
        }
        if let lastModifiedUser = lastModifiedUser {
            try encodeContainer.encode(lastModifiedUser, forKey: .lastModifiedUser)
        }
        if let ruleContentSha256 = ruleContentSha256 {
            try encodeContainer.encode(ruleContentSha256, forKey: .ruleContentSha256)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let approvalRuleTemplateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .approvalRuleTemplateId)
        approvalRuleTemplateId = approvalRuleTemplateIdDecoded
        let approvalRuleTemplateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .approvalRuleTemplateName)
        approvalRuleTemplateName = approvalRuleTemplateNameDecoded
        let approvalRuleTemplateDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .approvalRuleTemplateDescription)
        approvalRuleTemplateDescription = approvalRuleTemplateDescriptionDecoded
        let approvalRuleTemplateContentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .approvalRuleTemplateContent)
        approvalRuleTemplateContent = approvalRuleTemplateContentDecoded
        let ruleContentSha256Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleContentSha256)
        ruleContentSha256 = ruleContentSha256Decoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let lastModifiedUserDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedUser)
        lastModifiedUser = lastModifiedUserDecoded
    }
}
