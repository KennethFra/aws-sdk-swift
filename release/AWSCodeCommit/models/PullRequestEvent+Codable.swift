// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CodeCommitClientTypes.PullRequestEvent: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actorArn
        case approvalRuleEventMetadata
        case approvalRuleOverriddenEventMetadata
        case approvalStateChangedEventMetadata
        case eventDate
        case pullRequestCreatedEventMetadata
        case pullRequestEventType
        case pullRequestId
        case pullRequestMergedStateChangedEventMetadata
        case pullRequestSourceReferenceUpdatedEventMetadata
        case pullRequestStatusChangedEventMetadata
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actorArn = actorArn {
            try encodeContainer.encode(actorArn, forKey: .actorArn)
        }
        if let approvalRuleEventMetadata = approvalRuleEventMetadata {
            try encodeContainer.encode(approvalRuleEventMetadata, forKey: .approvalRuleEventMetadata)
        }
        if let approvalRuleOverriddenEventMetadata = approvalRuleOverriddenEventMetadata {
            try encodeContainer.encode(approvalRuleOverriddenEventMetadata, forKey: .approvalRuleOverriddenEventMetadata)
        }
        if let approvalStateChangedEventMetadata = approvalStateChangedEventMetadata {
            try encodeContainer.encode(approvalStateChangedEventMetadata, forKey: .approvalStateChangedEventMetadata)
        }
        if let eventDate = eventDate {
            try encodeContainer.encode(eventDate.timeIntervalSince1970, forKey: .eventDate)
        }
        if let pullRequestCreatedEventMetadata = pullRequestCreatedEventMetadata {
            try encodeContainer.encode(pullRequestCreatedEventMetadata, forKey: .pullRequestCreatedEventMetadata)
        }
        if let pullRequestEventType = pullRequestEventType {
            try encodeContainer.encode(pullRequestEventType.rawValue, forKey: .pullRequestEventType)
        }
        if let pullRequestId = pullRequestId {
            try encodeContainer.encode(pullRequestId, forKey: .pullRequestId)
        }
        if let pullRequestMergedStateChangedEventMetadata = pullRequestMergedStateChangedEventMetadata {
            try encodeContainer.encode(pullRequestMergedStateChangedEventMetadata, forKey: .pullRequestMergedStateChangedEventMetadata)
        }
        if let pullRequestSourceReferenceUpdatedEventMetadata = pullRequestSourceReferenceUpdatedEventMetadata {
            try encodeContainer.encode(pullRequestSourceReferenceUpdatedEventMetadata, forKey: .pullRequestSourceReferenceUpdatedEventMetadata)
        }
        if let pullRequestStatusChangedEventMetadata = pullRequestStatusChangedEventMetadata {
            try encodeContainer.encode(pullRequestStatusChangedEventMetadata, forKey: .pullRequestStatusChangedEventMetadata)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pullRequestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pullRequestId)
        pullRequestId = pullRequestIdDecoded
        let eventDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .eventDate)
        eventDate = eventDateDecoded
        let pullRequestEventTypeDecoded = try containerValues.decodeIfPresent(CodeCommitClientTypes.PullRequestEventType.self, forKey: .pullRequestEventType)
        pullRequestEventType = pullRequestEventTypeDecoded
        let actorArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actorArn)
        actorArn = actorArnDecoded
        let pullRequestCreatedEventMetadataDecoded = try containerValues.decodeIfPresent(CodeCommitClientTypes.PullRequestCreatedEventMetadata.self, forKey: .pullRequestCreatedEventMetadata)
        pullRequestCreatedEventMetadata = pullRequestCreatedEventMetadataDecoded
        let pullRequestStatusChangedEventMetadataDecoded = try containerValues.decodeIfPresent(CodeCommitClientTypes.PullRequestStatusChangedEventMetadata.self, forKey: .pullRequestStatusChangedEventMetadata)
        pullRequestStatusChangedEventMetadata = pullRequestStatusChangedEventMetadataDecoded
        let pullRequestSourceReferenceUpdatedEventMetadataDecoded = try containerValues.decodeIfPresent(CodeCommitClientTypes.PullRequestSourceReferenceUpdatedEventMetadata.self, forKey: .pullRequestSourceReferenceUpdatedEventMetadata)
        pullRequestSourceReferenceUpdatedEventMetadata = pullRequestSourceReferenceUpdatedEventMetadataDecoded
        let pullRequestMergedStateChangedEventMetadataDecoded = try containerValues.decodeIfPresent(CodeCommitClientTypes.PullRequestMergedStateChangedEventMetadata.self, forKey: .pullRequestMergedStateChangedEventMetadata)
        pullRequestMergedStateChangedEventMetadata = pullRequestMergedStateChangedEventMetadataDecoded
        let approvalRuleEventMetadataDecoded = try containerValues.decodeIfPresent(CodeCommitClientTypes.ApprovalRuleEventMetadata.self, forKey: .approvalRuleEventMetadata)
        approvalRuleEventMetadata = approvalRuleEventMetadataDecoded
        let approvalStateChangedEventMetadataDecoded = try containerValues.decodeIfPresent(CodeCommitClientTypes.ApprovalStateChangedEventMetadata.self, forKey: .approvalStateChangedEventMetadata)
        approvalStateChangedEventMetadata = approvalStateChangedEventMetadataDecoded
        let approvalRuleOverriddenEventMetadataDecoded = try containerValues.decodeIfPresent(CodeCommitClientTypes.ApprovalRuleOverriddenEventMetadata.self, forKey: .approvalRuleOverriddenEventMetadata)
        approvalRuleOverriddenEventMetadata = approvalRuleOverriddenEventMetadataDecoded
    }
}
