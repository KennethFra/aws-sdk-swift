// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension WisdomClientTypes.ContentReference: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contentArn
        case contentId
        case knowledgeBaseArn
        case knowledgeBaseId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contentArn = contentArn {
            try encodeContainer.encode(contentArn, forKey: .contentArn)
        }
        if let contentId = contentId {
            try encodeContainer.encode(contentId, forKey: .contentId)
        }
        if let knowledgeBaseArn = knowledgeBaseArn {
            try encodeContainer.encode(knowledgeBaseArn, forKey: .knowledgeBaseArn)
        }
        if let knowledgeBaseId = knowledgeBaseId {
            try encodeContainer.encode(knowledgeBaseId, forKey: .knowledgeBaseId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let knowledgeBaseArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .knowledgeBaseArn)
        knowledgeBaseArn = knowledgeBaseArnDecoded
        let knowledgeBaseIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .knowledgeBaseId)
        knowledgeBaseId = knowledgeBaseIdDecoded
        let contentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contentArn)
        contentArn = contentArnDecoded
        let contentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contentId)
        contentId = contentIdDecoded
    }
}
