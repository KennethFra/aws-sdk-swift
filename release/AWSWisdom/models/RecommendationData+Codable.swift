// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension WisdomClientTypes.RecommendationData: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case document
        case recommendationId
        case relevanceLevel
        case relevanceScore
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let document = document {
            try encodeContainer.encode(document, forKey: .document)
        }
        if let recommendationId = recommendationId {
            try encodeContainer.encode(recommendationId, forKey: .recommendationId)
        }
        if let relevanceLevel = relevanceLevel {
            try encodeContainer.encode(relevanceLevel.rawValue, forKey: .relevanceLevel)
        }
        if relevanceScore != 0.0 {
            try encodeContainer.encode(relevanceScore, forKey: .relevanceScore)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recommendationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recommendationId)
        recommendationId = recommendationIdDecoded
        let documentDecoded = try containerValues.decodeIfPresent(WisdomClientTypes.Document.self, forKey: .document)
        document = documentDecoded
        let relevanceScoreDecoded = try containerValues.decode(Swift.Double.self, forKey: .relevanceScore)
        relevanceScore = relevanceScoreDecoded
        let relevanceLevelDecoded = try containerValues.decodeIfPresent(WisdomClientTypes.RelevanceLevel.self, forKey: .relevanceLevel)
        relevanceLevel = relevanceLevelDecoded
    }
}
