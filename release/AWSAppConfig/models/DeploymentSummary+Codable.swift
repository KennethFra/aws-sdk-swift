// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AppConfigClientTypes.DeploymentSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case completedAt = "CompletedAt"
        case configurationName = "ConfigurationName"
        case configurationVersion = "ConfigurationVersion"
        case deploymentDurationInMinutes = "DeploymentDurationInMinutes"
        case deploymentNumber = "DeploymentNumber"
        case finalBakeTimeInMinutes = "FinalBakeTimeInMinutes"
        case growthFactor = "GrowthFactor"
        case growthType = "GrowthType"
        case percentageComplete = "PercentageComplete"
        case startedAt = "StartedAt"
        case state = "State"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let completedAt = completedAt {
            try encodeContainer.encode(completedAt.timeIntervalSince1970, forKey: .completedAt)
        }
        if let configurationName = configurationName {
            try encodeContainer.encode(configurationName, forKey: .configurationName)
        }
        if let configurationVersion = configurationVersion {
            try encodeContainer.encode(configurationVersion, forKey: .configurationVersion)
        }
        if deploymentDurationInMinutes != 0 {
            try encodeContainer.encode(deploymentDurationInMinutes, forKey: .deploymentDurationInMinutes)
        }
        if deploymentNumber != 0 {
            try encodeContainer.encode(deploymentNumber, forKey: .deploymentNumber)
        }
        if finalBakeTimeInMinutes != 0 {
            try encodeContainer.encode(finalBakeTimeInMinutes, forKey: .finalBakeTimeInMinutes)
        }
        if growthFactor != 0.0 {
            try encodeContainer.encode(growthFactor, forKey: .growthFactor)
        }
        if let growthType = growthType {
            try encodeContainer.encode(growthType.rawValue, forKey: .growthType)
        }
        if percentageComplete != 0.0 {
            try encodeContainer.encode(percentageComplete, forKey: .percentageComplete)
        }
        if let startedAt = startedAt {
            try encodeContainer.encode(startedAt.timeIntervalSince1970, forKey: .startedAt)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentNumberDecoded = try containerValues.decode(Swift.Int.self, forKey: .deploymentNumber)
        deploymentNumber = deploymentNumberDecoded
        let configurationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationName)
        configurationName = configurationNameDecoded
        let configurationVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationVersion)
        configurationVersion = configurationVersionDecoded
        let deploymentDurationInMinutesDecoded = try containerValues.decode(Swift.Int.self, forKey: .deploymentDurationInMinutes)
        deploymentDurationInMinutes = deploymentDurationInMinutesDecoded
        let growthTypeDecoded = try containerValues.decodeIfPresent(AppConfigClientTypes.GrowthType.self, forKey: .growthType)
        growthType = growthTypeDecoded
        let growthFactorDecoded = try containerValues.decode(Swift.Float.self, forKey: .growthFactor)
        growthFactor = growthFactorDecoded
        let finalBakeTimeInMinutesDecoded = try containerValues.decode(Swift.Int.self, forKey: .finalBakeTimeInMinutes)
        finalBakeTimeInMinutes = finalBakeTimeInMinutesDecoded
        let stateDecoded = try containerValues.decodeIfPresent(AppConfigClientTypes.DeploymentState.self, forKey: .state)
        state = stateDecoded
        let percentageCompleteDecoded = try containerValues.decode(Swift.Float.self, forKey: .percentageComplete)
        percentageComplete = percentageCompleteDecoded
        let startedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startedAt)
        startedAt = startedAtDecoded
        let completedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .completedAt)
        completedAt = completedAtDecoded
    }
}
