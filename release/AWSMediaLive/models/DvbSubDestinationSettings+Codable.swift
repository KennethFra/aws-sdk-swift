// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaLiveClientTypes.DvbSubDestinationSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alignment = "alignment"
        case backgroundColor = "backgroundColor"
        case backgroundOpacity = "backgroundOpacity"
        case font = "font"
        case fontColor = "fontColor"
        case fontOpacity = "fontOpacity"
        case fontResolution = "fontResolution"
        case fontSize = "fontSize"
        case outlineColor = "outlineColor"
        case outlineSize = "outlineSize"
        case shadowColor = "shadowColor"
        case shadowOpacity = "shadowOpacity"
        case shadowXOffset = "shadowXOffset"
        case shadowYOffset = "shadowYOffset"
        case teletextGridControl = "teletextGridControl"
        case xPosition = "xPosition"
        case yPosition = "yPosition"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alignment = alignment {
            try encodeContainer.encode(alignment.rawValue, forKey: .alignment)
        }
        if let backgroundColor = backgroundColor {
            try encodeContainer.encode(backgroundColor.rawValue, forKey: .backgroundColor)
        }
        if let backgroundOpacity = backgroundOpacity {
            try encodeContainer.encode(backgroundOpacity, forKey: .backgroundOpacity)
        }
        if let font = font {
            try encodeContainer.encode(font, forKey: .font)
        }
        if let fontColor = fontColor {
            try encodeContainer.encode(fontColor.rawValue, forKey: .fontColor)
        }
        if let fontOpacity = fontOpacity {
            try encodeContainer.encode(fontOpacity, forKey: .fontOpacity)
        }
        if let fontResolution = fontResolution {
            try encodeContainer.encode(fontResolution, forKey: .fontResolution)
        }
        if let fontSize = fontSize {
            try encodeContainer.encode(fontSize, forKey: .fontSize)
        }
        if let outlineColor = outlineColor {
            try encodeContainer.encode(outlineColor.rawValue, forKey: .outlineColor)
        }
        if let outlineSize = outlineSize {
            try encodeContainer.encode(outlineSize, forKey: .outlineSize)
        }
        if let shadowColor = shadowColor {
            try encodeContainer.encode(shadowColor.rawValue, forKey: .shadowColor)
        }
        if let shadowOpacity = shadowOpacity {
            try encodeContainer.encode(shadowOpacity, forKey: .shadowOpacity)
        }
        if let shadowXOffset = shadowXOffset {
            try encodeContainer.encode(shadowXOffset, forKey: .shadowXOffset)
        }
        if let shadowYOffset = shadowYOffset {
            try encodeContainer.encode(shadowYOffset, forKey: .shadowYOffset)
        }
        if let teletextGridControl = teletextGridControl {
            try encodeContainer.encode(teletextGridControl.rawValue, forKey: .teletextGridControl)
        }
        if let xPosition = xPosition {
            try encodeContainer.encode(xPosition, forKey: .xPosition)
        }
        if let yPosition = yPosition {
            try encodeContainer.encode(yPosition, forKey: .yPosition)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alignmentDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.DvbSubDestinationAlignment.self, forKey: .alignment)
        alignment = alignmentDecoded
        let backgroundColorDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.DvbSubDestinationBackgroundColor.self, forKey: .backgroundColor)
        backgroundColor = backgroundColorDecoded
        let backgroundOpacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .backgroundOpacity)
        backgroundOpacity = backgroundOpacityDecoded
        let fontDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputLocation.self, forKey: .font)
        font = fontDecoded
        let fontColorDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.DvbSubDestinationFontColor.self, forKey: .fontColor)
        fontColor = fontColorDecoded
        let fontOpacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .fontOpacity)
        fontOpacity = fontOpacityDecoded
        let fontResolutionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .fontResolution)
        fontResolution = fontResolutionDecoded
        let fontSizeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fontSize)
        fontSize = fontSizeDecoded
        let outlineColorDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.DvbSubDestinationOutlineColor.self, forKey: .outlineColor)
        outlineColor = outlineColorDecoded
        let outlineSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .outlineSize)
        outlineSize = outlineSizeDecoded
        let shadowColorDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.DvbSubDestinationShadowColor.self, forKey: .shadowColor)
        shadowColor = shadowColorDecoded
        let shadowOpacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .shadowOpacity)
        shadowOpacity = shadowOpacityDecoded
        let shadowXOffsetDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .shadowXOffset)
        shadowXOffset = shadowXOffsetDecoded
        let shadowYOffsetDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .shadowYOffset)
        shadowYOffset = shadowYOffsetDecoded
        let teletextGridControlDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.DvbSubDestinationTeletextGridControl.self, forKey: .teletextGridControl)
        teletextGridControl = teletextGridControlDecoded
        let xPositionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .xPosition)
        xPosition = xPositionDecoded
        let yPositionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .yPosition)
        yPosition = yPositionDecoded
    }
}
