// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaLiveClientTypes.H264Settings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adaptiveQuantization = "adaptiveQuantization"
        case afdSignaling = "afdSignaling"
        case bitrate = "bitrate"
        case bufFillPct = "bufFillPct"
        case bufSize = "bufSize"
        case colorMetadata = "colorMetadata"
        case colorSpaceSettings = "colorSpaceSettings"
        case entropyEncoding = "entropyEncoding"
        case filterSettings = "filterSettings"
        case fixedAfd = "fixedAfd"
        case flickerAq = "flickerAq"
        case forceFieldPictures = "forceFieldPictures"
        case framerateControl = "framerateControl"
        case framerateDenominator = "framerateDenominator"
        case framerateNumerator = "framerateNumerator"
        case gopBReference = "gopBReference"
        case gopClosedCadence = "gopClosedCadence"
        case gopNumBFrames = "gopNumBFrames"
        case gopSize = "gopSize"
        case gopSizeUnits = "gopSizeUnits"
        case level = "level"
        case lookAheadRateControl = "lookAheadRateControl"
        case maxBitrate = "maxBitrate"
        case minIInterval = "minIInterval"
        case numRefFrames = "numRefFrames"
        case parControl = "parControl"
        case parDenominator = "parDenominator"
        case parNumerator = "parNumerator"
        case profile = "profile"
        case qualityLevel = "qualityLevel"
        case qvbrQualityLevel = "qvbrQualityLevel"
        case rateControlMode = "rateControlMode"
        case scanType = "scanType"
        case sceneChangeDetect = "sceneChangeDetect"
        case slices = "slices"
        case softness = "softness"
        case spatialAq = "spatialAq"
        case subgopLength = "subgopLength"
        case syntax = "syntax"
        case temporalAq = "temporalAq"
        case timecodeInsertion = "timecodeInsertion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adaptiveQuantization = adaptiveQuantization {
            try encodeContainer.encode(adaptiveQuantization.rawValue, forKey: .adaptiveQuantization)
        }
        if let afdSignaling = afdSignaling {
            try encodeContainer.encode(afdSignaling.rawValue, forKey: .afdSignaling)
        }
        if let bitrate = bitrate {
            try encodeContainer.encode(bitrate, forKey: .bitrate)
        }
        if let bufFillPct = bufFillPct {
            try encodeContainer.encode(bufFillPct, forKey: .bufFillPct)
        }
        if let bufSize = bufSize {
            try encodeContainer.encode(bufSize, forKey: .bufSize)
        }
        if let colorMetadata = colorMetadata {
            try encodeContainer.encode(colorMetadata.rawValue, forKey: .colorMetadata)
        }
        if let colorSpaceSettings = colorSpaceSettings {
            try encodeContainer.encode(colorSpaceSettings, forKey: .colorSpaceSettings)
        }
        if let entropyEncoding = entropyEncoding {
            try encodeContainer.encode(entropyEncoding.rawValue, forKey: .entropyEncoding)
        }
        if let filterSettings = filterSettings {
            try encodeContainer.encode(filterSettings, forKey: .filterSettings)
        }
        if let fixedAfd = fixedAfd {
            try encodeContainer.encode(fixedAfd.rawValue, forKey: .fixedAfd)
        }
        if let flickerAq = flickerAq {
            try encodeContainer.encode(flickerAq.rawValue, forKey: .flickerAq)
        }
        if let forceFieldPictures = forceFieldPictures {
            try encodeContainer.encode(forceFieldPictures.rawValue, forKey: .forceFieldPictures)
        }
        if let framerateControl = framerateControl {
            try encodeContainer.encode(framerateControl.rawValue, forKey: .framerateControl)
        }
        if let framerateDenominator = framerateDenominator {
            try encodeContainer.encode(framerateDenominator, forKey: .framerateDenominator)
        }
        if let framerateNumerator = framerateNumerator {
            try encodeContainer.encode(framerateNumerator, forKey: .framerateNumerator)
        }
        if let gopBReference = gopBReference {
            try encodeContainer.encode(gopBReference.rawValue, forKey: .gopBReference)
        }
        if let gopClosedCadence = gopClosedCadence {
            try encodeContainer.encode(gopClosedCadence, forKey: .gopClosedCadence)
        }
        if let gopNumBFrames = gopNumBFrames {
            try encodeContainer.encode(gopNumBFrames, forKey: .gopNumBFrames)
        }
        if let gopSize = gopSize {
            try encodeContainer.encode(gopSize, forKey: .gopSize)
        }
        if let gopSizeUnits = gopSizeUnits {
            try encodeContainer.encode(gopSizeUnits.rawValue, forKey: .gopSizeUnits)
        }
        if let level = level {
            try encodeContainer.encode(level.rawValue, forKey: .level)
        }
        if let lookAheadRateControl = lookAheadRateControl {
            try encodeContainer.encode(lookAheadRateControl.rawValue, forKey: .lookAheadRateControl)
        }
        if let maxBitrate = maxBitrate {
            try encodeContainer.encode(maxBitrate, forKey: .maxBitrate)
        }
        if let minIInterval = minIInterval {
            try encodeContainer.encode(minIInterval, forKey: .minIInterval)
        }
        if let numRefFrames = numRefFrames {
            try encodeContainer.encode(numRefFrames, forKey: .numRefFrames)
        }
        if let parControl = parControl {
            try encodeContainer.encode(parControl.rawValue, forKey: .parControl)
        }
        if let parDenominator = parDenominator {
            try encodeContainer.encode(parDenominator, forKey: .parDenominator)
        }
        if let parNumerator = parNumerator {
            try encodeContainer.encode(parNumerator, forKey: .parNumerator)
        }
        if let profile = profile {
            try encodeContainer.encode(profile.rawValue, forKey: .profile)
        }
        if let qualityLevel = qualityLevel {
            try encodeContainer.encode(qualityLevel.rawValue, forKey: .qualityLevel)
        }
        if let qvbrQualityLevel = qvbrQualityLevel {
            try encodeContainer.encode(qvbrQualityLevel, forKey: .qvbrQualityLevel)
        }
        if let rateControlMode = rateControlMode {
            try encodeContainer.encode(rateControlMode.rawValue, forKey: .rateControlMode)
        }
        if let scanType = scanType {
            try encodeContainer.encode(scanType.rawValue, forKey: .scanType)
        }
        if let sceneChangeDetect = sceneChangeDetect {
            try encodeContainer.encode(sceneChangeDetect.rawValue, forKey: .sceneChangeDetect)
        }
        if let slices = slices {
            try encodeContainer.encode(slices, forKey: .slices)
        }
        if let softness = softness {
            try encodeContainer.encode(softness, forKey: .softness)
        }
        if let spatialAq = spatialAq {
            try encodeContainer.encode(spatialAq.rawValue, forKey: .spatialAq)
        }
        if let subgopLength = subgopLength {
            try encodeContainer.encode(subgopLength.rawValue, forKey: .subgopLength)
        }
        if let syntax = syntax {
            try encodeContainer.encode(syntax.rawValue, forKey: .syntax)
        }
        if let temporalAq = temporalAq {
            try encodeContainer.encode(temporalAq.rawValue, forKey: .temporalAq)
        }
        if let timecodeInsertion = timecodeInsertion {
            try encodeContainer.encode(timecodeInsertion.rawValue, forKey: .timecodeInsertion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adaptiveQuantizationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264AdaptiveQuantization.self, forKey: .adaptiveQuantization)
        adaptiveQuantization = adaptiveQuantizationDecoded
        let afdSignalingDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AfdSignaling.self, forKey: .afdSignaling)
        afdSignaling = afdSignalingDecoded
        let bitrateDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .bitrate)
        bitrate = bitrateDecoded
        let bufFillPctDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .bufFillPct)
        bufFillPct = bufFillPctDecoded
        let bufSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .bufSize)
        bufSize = bufSizeDecoded
        let colorMetadataDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264ColorMetadata.self, forKey: .colorMetadata)
        colorMetadata = colorMetadataDecoded
        let colorSpaceSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264ColorSpaceSettings.self, forKey: .colorSpaceSettings)
        colorSpaceSettings = colorSpaceSettingsDecoded
        let entropyEncodingDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264EntropyEncoding.self, forKey: .entropyEncoding)
        entropyEncoding = entropyEncodingDecoded
        let filterSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264FilterSettings.self, forKey: .filterSettings)
        filterSettings = filterSettingsDecoded
        let fixedAfdDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.FixedAfd.self, forKey: .fixedAfd)
        fixedAfd = fixedAfdDecoded
        let flickerAqDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264FlickerAq.self, forKey: .flickerAq)
        flickerAq = flickerAqDecoded
        let forceFieldPicturesDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264ForceFieldPictures.self, forKey: .forceFieldPictures)
        forceFieldPictures = forceFieldPicturesDecoded
        let framerateControlDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264FramerateControl.self, forKey: .framerateControl)
        framerateControl = framerateControlDecoded
        let framerateDenominatorDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .framerateDenominator)
        framerateDenominator = framerateDenominatorDecoded
        let framerateNumeratorDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .framerateNumerator)
        framerateNumerator = framerateNumeratorDecoded
        let gopBReferenceDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264GopBReference.self, forKey: .gopBReference)
        gopBReference = gopBReferenceDecoded
        let gopClosedCadenceDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .gopClosedCadence)
        gopClosedCadence = gopClosedCadenceDecoded
        let gopNumBFramesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .gopNumBFrames)
        gopNumBFrames = gopNumBFramesDecoded
        let gopSizeDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .gopSize)
        gopSize = gopSizeDecoded
        let gopSizeUnitsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264GopSizeUnits.self, forKey: .gopSizeUnits)
        gopSizeUnits = gopSizeUnitsDecoded
        let levelDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264Level.self, forKey: .level)
        level = levelDecoded
        let lookAheadRateControlDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264LookAheadRateControl.self, forKey: .lookAheadRateControl)
        lookAheadRateControl = lookAheadRateControlDecoded
        let maxBitrateDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxBitrate)
        maxBitrate = maxBitrateDecoded
        let minIIntervalDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minIInterval)
        minIInterval = minIIntervalDecoded
        let numRefFramesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numRefFrames)
        numRefFrames = numRefFramesDecoded
        let parControlDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264ParControl.self, forKey: .parControl)
        parControl = parControlDecoded
        let parDenominatorDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .parDenominator)
        parDenominator = parDenominatorDecoded
        let parNumeratorDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .parNumerator)
        parNumerator = parNumeratorDecoded
        let profileDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264Profile.self, forKey: .profile)
        profile = profileDecoded
        let qualityLevelDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264QualityLevel.self, forKey: .qualityLevel)
        qualityLevel = qualityLevelDecoded
        let qvbrQualityLevelDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .qvbrQualityLevel)
        qvbrQualityLevel = qvbrQualityLevelDecoded
        let rateControlModeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264RateControlMode.self, forKey: .rateControlMode)
        rateControlMode = rateControlModeDecoded
        let scanTypeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264ScanType.self, forKey: .scanType)
        scanType = scanTypeDecoded
        let sceneChangeDetectDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264SceneChangeDetect.self, forKey: .sceneChangeDetect)
        sceneChangeDetect = sceneChangeDetectDecoded
        let slicesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .slices)
        slices = slicesDecoded
        let softnessDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .softness)
        softness = softnessDecoded
        let spatialAqDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264SpatialAq.self, forKey: .spatialAq)
        spatialAq = spatialAqDecoded
        let subgopLengthDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264SubGopLength.self, forKey: .subgopLength)
        subgopLength = subgopLengthDecoded
        let syntaxDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264Syntax.self, forKey: .syntax)
        syntax = syntaxDecoded
        let temporalAqDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264TemporalAq.self, forKey: .temporalAq)
        temporalAq = temporalAqDecoded
        let timecodeInsertionDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H264TimecodeInsertionBehavior.self, forKey: .timecodeInsertion)
        timecodeInsertion = timecodeInsertionDecoded
    }
}
