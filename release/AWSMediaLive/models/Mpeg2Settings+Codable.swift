// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaLiveClientTypes.Mpeg2Settings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adaptiveQuantization = "adaptiveQuantization"
        case afdSignaling = "afdSignaling"
        case colorMetadata = "colorMetadata"
        case colorSpace = "colorSpace"
        case displayAspectRatio = "displayAspectRatio"
        case filterSettings = "filterSettings"
        case fixedAfd = "fixedAfd"
        case framerateDenominator = "framerateDenominator"
        case framerateNumerator = "framerateNumerator"
        case gopClosedCadence = "gopClosedCadence"
        case gopNumBFrames = "gopNumBFrames"
        case gopSize = "gopSize"
        case gopSizeUnits = "gopSizeUnits"
        case scanType = "scanType"
        case subgopLength = "subgopLength"
        case timecodeInsertion = "timecodeInsertion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adaptiveQuantization = adaptiveQuantization {
            try encodeContainer.encode(adaptiveQuantization.rawValue, forKey: .adaptiveQuantization)
        }
        if let afdSignaling = afdSignaling {
            try encodeContainer.encode(afdSignaling.rawValue, forKey: .afdSignaling)
        }
        if let colorMetadata = colorMetadata {
            try encodeContainer.encode(colorMetadata.rawValue, forKey: .colorMetadata)
        }
        if let colorSpace = colorSpace {
            try encodeContainer.encode(colorSpace.rawValue, forKey: .colorSpace)
        }
        if let displayAspectRatio = displayAspectRatio {
            try encodeContainer.encode(displayAspectRatio.rawValue, forKey: .displayAspectRatio)
        }
        if let filterSettings = filterSettings {
            try encodeContainer.encode(filterSettings, forKey: .filterSettings)
        }
        if let fixedAfd = fixedAfd {
            try encodeContainer.encode(fixedAfd.rawValue, forKey: .fixedAfd)
        }
        if let framerateDenominator = framerateDenominator {
            try encodeContainer.encode(framerateDenominator, forKey: .framerateDenominator)
        }
        if let framerateNumerator = framerateNumerator {
            try encodeContainer.encode(framerateNumerator, forKey: .framerateNumerator)
        }
        if let gopClosedCadence = gopClosedCadence {
            try encodeContainer.encode(gopClosedCadence, forKey: .gopClosedCadence)
        }
        if let gopNumBFrames = gopNumBFrames {
            try encodeContainer.encode(gopNumBFrames, forKey: .gopNumBFrames)
        }
        if let gopSize = gopSize {
            try encodeContainer.encode(gopSize, forKey: .gopSize)
        }
        if let gopSizeUnits = gopSizeUnits {
            try encodeContainer.encode(gopSizeUnits.rawValue, forKey: .gopSizeUnits)
        }
        if let scanType = scanType {
            try encodeContainer.encode(scanType.rawValue, forKey: .scanType)
        }
        if let subgopLength = subgopLength {
            try encodeContainer.encode(subgopLength.rawValue, forKey: .subgopLength)
        }
        if let timecodeInsertion = timecodeInsertion {
            try encodeContainer.encode(timecodeInsertion.rawValue, forKey: .timecodeInsertion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adaptiveQuantizationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Mpeg2AdaptiveQuantization.self, forKey: .adaptiveQuantization)
        adaptiveQuantization = adaptiveQuantizationDecoded
        let afdSignalingDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AfdSignaling.self, forKey: .afdSignaling)
        afdSignaling = afdSignalingDecoded
        let colorMetadataDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Mpeg2ColorMetadata.self, forKey: .colorMetadata)
        colorMetadata = colorMetadataDecoded
        let colorSpaceDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Mpeg2ColorSpace.self, forKey: .colorSpace)
        colorSpace = colorSpaceDecoded
        let displayAspectRatioDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Mpeg2DisplayRatio.self, forKey: .displayAspectRatio)
        displayAspectRatio = displayAspectRatioDecoded
        let filterSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Mpeg2FilterSettings.self, forKey: .filterSettings)
        filterSettings = filterSettingsDecoded
        let fixedAfdDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.FixedAfd.self, forKey: .fixedAfd)
        fixedAfd = fixedAfdDecoded
        let framerateDenominatorDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .framerateDenominator)
        framerateDenominator = framerateDenominatorDecoded
        let framerateNumeratorDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .framerateNumerator)
        framerateNumerator = framerateNumeratorDecoded
        let gopClosedCadenceDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .gopClosedCadence)
        gopClosedCadence = gopClosedCadenceDecoded
        let gopNumBFramesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .gopNumBFrames)
        gopNumBFrames = gopNumBFramesDecoded
        let gopSizeDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .gopSize)
        gopSize = gopSizeDecoded
        let gopSizeUnitsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Mpeg2GopSizeUnits.self, forKey: .gopSizeUnits)
        gopSizeUnits = gopSizeUnitsDecoded
        let scanTypeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Mpeg2ScanType.self, forKey: .scanType)
        scanType = scanTypeDecoded
        let subgopLengthDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Mpeg2SubGopLength.self, forKey: .subgopLength)
        subgopLength = subgopLengthDecoded
        let timecodeInsertionDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Mpeg2TimecodeInsertionBehavior.self, forKey: .timecodeInsertion)
        timecodeInsertion = timecodeInsertionDecoded
    }
}
