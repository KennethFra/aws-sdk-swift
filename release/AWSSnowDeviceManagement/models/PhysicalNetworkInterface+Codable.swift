// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SnowDeviceManagementClientTypes.PhysicalNetworkInterface: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultGateway
        case ipAddress
        case ipAddressAssignment
        case macAddress
        case netmask
        case physicalConnectorType
        case physicalNetworkInterfaceId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultGateway = defaultGateway {
            try encodeContainer.encode(defaultGateway, forKey: .defaultGateway)
        }
        if let ipAddress = ipAddress {
            try encodeContainer.encode(ipAddress, forKey: .ipAddress)
        }
        if let ipAddressAssignment = ipAddressAssignment {
            try encodeContainer.encode(ipAddressAssignment.rawValue, forKey: .ipAddressAssignment)
        }
        if let macAddress = macAddress {
            try encodeContainer.encode(macAddress, forKey: .macAddress)
        }
        if let netmask = netmask {
            try encodeContainer.encode(netmask, forKey: .netmask)
        }
        if let physicalConnectorType = physicalConnectorType {
            try encodeContainer.encode(physicalConnectorType.rawValue, forKey: .physicalConnectorType)
        }
        if let physicalNetworkInterfaceId = physicalNetworkInterfaceId {
            try encodeContainer.encode(physicalNetworkInterfaceId, forKey: .physicalNetworkInterfaceId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let physicalNetworkInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .physicalNetworkInterfaceId)
        physicalNetworkInterfaceId = physicalNetworkInterfaceIdDecoded
        let physicalConnectorTypeDecoded = try containerValues.decodeIfPresent(SnowDeviceManagementClientTypes.PhysicalConnectorType.self, forKey: .physicalConnectorType)
        physicalConnectorType = physicalConnectorTypeDecoded
        let ipAddressAssignmentDecoded = try containerValues.decodeIfPresent(SnowDeviceManagementClientTypes.IpAddressAssignment.self, forKey: .ipAddressAssignment)
        ipAddressAssignment = ipAddressAssignmentDecoded
        let ipAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipAddress)
        ipAddress = ipAddressDecoded
        let netmaskDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .netmask)
        netmask = netmaskDecoded
        let defaultGatewayDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultGateway)
        defaultGateway = defaultGatewayDecoded
        let macAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .macAddress)
        macAddress = macAddressDecoded
    }
}
