// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PutManagedRuleSetVersionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
        case recommendedVersion = "RecommendedVersion"
        case scope = "Scope"
        case versionsToPublish = "VersionsToPublish"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let lockToken = lockToken {
            try encodeContainer.encode(lockToken, forKey: .lockToken)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let recommendedVersion = recommendedVersion {
            try encodeContainer.encode(recommendedVersion, forKey: .recommendedVersion)
        }
        if let scope = scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
        if let versionsToPublish = versionsToPublish {
            var versionsToPublishContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .versionsToPublish)
            for (dictKey0, versionstopublish0) in versionsToPublish {
                try versionsToPublishContainer.encode(versionstopublish0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}
