// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ManagedBlockchainClientTypes.Proposal: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions = "Actions"
        case arn = "Arn"
        case creationDate = "CreationDate"
        case description = "Description"
        case expirationDate = "ExpirationDate"
        case networkId = "NetworkId"
        case noVoteCount = "NoVoteCount"
        case outstandingVoteCount = "OutstandingVoteCount"
        case proposalId = "ProposalId"
        case proposedByMemberId = "ProposedByMemberId"
        case proposedByMemberName = "ProposedByMemberName"
        case status = "Status"
        case tags = "Tags"
        case yesVoteCount = "YesVoteCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actions = actions {
            try encodeContainer.encode(actions, forKey: .actions)
        }
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let expirationDate = expirationDate {
            try encodeContainer.encode(expirationDate.timeIntervalSince1970, forKey: .expirationDate)
        }
        if let networkId = networkId {
            try encodeContainer.encode(networkId, forKey: .networkId)
        }
        if let noVoteCount = noVoteCount {
            try encodeContainer.encode(noVoteCount, forKey: .noVoteCount)
        }
        if let outstandingVoteCount = outstandingVoteCount {
            try encodeContainer.encode(outstandingVoteCount, forKey: .outstandingVoteCount)
        }
        if let proposalId = proposalId {
            try encodeContainer.encode(proposalId, forKey: .proposalId)
        }
        if let proposedByMemberId = proposedByMemberId {
            try encodeContainer.encode(proposedByMemberId, forKey: .proposedByMemberId)
        }
        if let proposedByMemberName = proposedByMemberName {
            try encodeContainer.encode(proposedByMemberName, forKey: .proposedByMemberName)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, outputtagmap0) in tags {
                try tagsContainer.encode(outputtagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let yesVoteCount = yesVoteCount {
            try encodeContainer.encode(yesVoteCount, forKey: .yesVoteCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let proposalIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .proposalId)
        proposalId = proposalIdDecoded
        let networkIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkId)
        networkId = networkIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let actionsDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.ProposalActions.self, forKey: .actions)
        actions = actionsDecoded
        let proposedByMemberIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .proposedByMemberId)
        proposedByMemberId = proposedByMemberIdDecoded
        let proposedByMemberNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .proposedByMemberName)
        proposedByMemberName = proposedByMemberNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.ProposalStatus.self, forKey: .status)
        status = statusDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let expirationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .expirationDate)
        expirationDate = expirationDateDecoded
        let yesVoteCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .yesVoteCount)
        yesVoteCount = yesVoteCountDecoded
        let noVoteCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .noVoteCount)
        noVoteCount = noVoteCountDecoded
        let outstandingVoteCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .outstandingVoteCount)
        outstandingVoteCount = outstandingVoteCountDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}
