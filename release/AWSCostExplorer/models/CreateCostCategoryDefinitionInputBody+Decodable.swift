// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateCostCategoryDefinitionInputBody: Swift.Equatable {
    let name: Swift.String?
    let ruleVersion: CostExplorerClientTypes.CostCategoryRuleVersion?
    let rules: [CostExplorerClientTypes.CostCategoryRule]?
    let defaultValue: Swift.String?
    let splitChargeRules: [CostExplorerClientTypes.CostCategorySplitChargeRule]?
}

extension CreateCostCategoryDefinitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultValue = "DefaultValue"
        case name = "Name"
        case ruleVersion = "RuleVersion"
        case rules = "Rules"
        case splitChargeRules = "SplitChargeRules"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let ruleVersionDecoded = try containerValues.decodeIfPresent(CostExplorerClientTypes.CostCategoryRuleVersion.self, forKey: .ruleVersion)
        ruleVersion = ruleVersionDecoded
        let rulesContainer = try containerValues.decodeIfPresent([CostExplorerClientTypes.CostCategoryRule?].self, forKey: .rules)
        var rulesDecoded0:[CostExplorerClientTypes.CostCategoryRule]? = nil
        if let rulesContainer = rulesContainer {
            rulesDecoded0 = [CostExplorerClientTypes.CostCategoryRule]()
            for structure0 in rulesContainer {
                if let structure0 = structure0 {
                    rulesDecoded0?.append(structure0)
                }
            }
        }
        rules = rulesDecoded0
        let defaultValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultValue)
        defaultValue = defaultValueDecoded
        let splitChargeRulesContainer = try containerValues.decodeIfPresent([CostExplorerClientTypes.CostCategorySplitChargeRule?].self, forKey: .splitChargeRules)
        var splitChargeRulesDecoded0:[CostExplorerClientTypes.CostCategorySplitChargeRule]? = nil
        if let splitChargeRulesContainer = splitChargeRulesContainer {
            splitChargeRulesDecoded0 = [CostExplorerClientTypes.CostCategorySplitChargeRule]()
            for structure0 in splitChargeRulesContainer {
                if let structure0 = structure0 {
                    splitChargeRulesDecoded0?.append(structure0)
                }
            }
        }
        splitChargeRules = splitChargeRulesDecoded0
    }
}
