// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdateMaintenanceWindowInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowUnassociatedTargets = "AllowUnassociatedTargets"
        case cutoff = "Cutoff"
        case description = "Description"
        case duration = "Duration"
        case enabled = "Enabled"
        case endDate = "EndDate"
        case name = "Name"
        case replace = "Replace"
        case schedule = "Schedule"
        case scheduleOffset = "ScheduleOffset"
        case scheduleTimezone = "ScheduleTimezone"
        case startDate = "StartDate"
        case windowId = "WindowId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if allowUnassociatedTargets != false {
            try encodeContainer.encode(allowUnassociatedTargets, forKey: .allowUnassociatedTargets)
        }
        if cutoff != 0 {
            try encodeContainer.encode(cutoff, forKey: .cutoff)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if duration != 0 {
            try encodeContainer.encode(duration, forKey: .duration)
        }
        if enabled != false {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let endDate = endDate {
            try encodeContainer.encode(endDate, forKey: .endDate)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if replace != false {
            try encodeContainer.encode(replace, forKey: .replace)
        }
        if let schedule = schedule {
            try encodeContainer.encode(schedule, forKey: .schedule)
        }
        if scheduleOffset != 0 {
            try encodeContainer.encode(scheduleOffset, forKey: .scheduleOffset)
        }
        if let scheduleTimezone = scheduleTimezone {
            try encodeContainer.encode(scheduleTimezone, forKey: .scheduleTimezone)
        }
        if let startDate = startDate {
            try encodeContainer.encode(startDate, forKey: .startDate)
        }
        if let windowId = windowId {
            try encodeContainer.encode(windowId, forKey: .windowId)
        }
    }
}
