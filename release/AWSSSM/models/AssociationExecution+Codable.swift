// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SsmClientTypes.AssociationExecution: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associationId = "AssociationId"
        case associationVersion = "AssociationVersion"
        case createdTime = "CreatedTime"
        case detailedStatus = "DetailedStatus"
        case executionId = "ExecutionId"
        case lastExecutionDate = "LastExecutionDate"
        case resourceCountByStatus = "ResourceCountByStatus"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let associationId = associationId {
            try encodeContainer.encode(associationId, forKey: .associationId)
        }
        if let associationVersion = associationVersion {
            try encodeContainer.encode(associationVersion, forKey: .associationVersion)
        }
        if let createdTime = createdTime {
            try encodeContainer.encode(createdTime.timeIntervalSince1970, forKey: .createdTime)
        }
        if let detailedStatus = detailedStatus {
            try encodeContainer.encode(detailedStatus, forKey: .detailedStatus)
        }
        if let executionId = executionId {
            try encodeContainer.encode(executionId, forKey: .executionId)
        }
        if let lastExecutionDate = lastExecutionDate {
            try encodeContainer.encode(lastExecutionDate.timeIntervalSince1970, forKey: .lastExecutionDate)
        }
        if let resourceCountByStatus = resourceCountByStatus {
            try encodeContainer.encode(resourceCountByStatus, forKey: .resourceCountByStatus)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let associationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associationId)
        associationId = associationIdDecoded
        let associationVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associationVersion)
        associationVersion = associationVersionDecoded
        let executionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionId)
        executionId = executionIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let detailedStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .detailedStatus)
        detailedStatus = detailedStatusDecoded
        let createdTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdTime)
        createdTime = createdTimeDecoded
        let lastExecutionDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastExecutionDate)
        lastExecutionDate = lastExecutionDateDecoded
        let resourceCountByStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceCountByStatus)
        resourceCountByStatus = resourceCountByStatusDecoded
    }
}
