// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SsmClientTypes.AssociationDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applyOnlyAtCronInterval = "ApplyOnlyAtCronInterval"
        case associationId = "AssociationId"
        case associationName = "AssociationName"
        case associationVersion = "AssociationVersion"
        case automationTargetParameterName = "AutomationTargetParameterName"
        case calendarNames = "CalendarNames"
        case complianceSeverity = "ComplianceSeverity"
        case date = "Date"
        case documentVersion = "DocumentVersion"
        case instanceId = "InstanceId"
        case lastExecutionDate = "LastExecutionDate"
        case lastSuccessfulExecutionDate = "LastSuccessfulExecutionDate"
        case lastUpdateAssociationDate = "LastUpdateAssociationDate"
        case maxConcurrency = "MaxConcurrency"
        case maxErrors = "MaxErrors"
        case name = "Name"
        case outputLocation = "OutputLocation"
        case overview = "Overview"
        case parameters = "Parameters"
        case scheduleExpression = "ScheduleExpression"
        case status = "Status"
        case syncCompliance = "SyncCompliance"
        case targetLocations = "TargetLocations"
        case targets = "Targets"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if applyOnlyAtCronInterval != false {
            try encodeContainer.encode(applyOnlyAtCronInterval, forKey: .applyOnlyAtCronInterval)
        }
        if let associationId = associationId {
            try encodeContainer.encode(associationId, forKey: .associationId)
        }
        if let associationName = associationName {
            try encodeContainer.encode(associationName, forKey: .associationName)
        }
        if let associationVersion = associationVersion {
            try encodeContainer.encode(associationVersion, forKey: .associationVersion)
        }
        if let automationTargetParameterName = automationTargetParameterName {
            try encodeContainer.encode(automationTargetParameterName, forKey: .automationTargetParameterName)
        }
        if let calendarNames = calendarNames {
            var calendarNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .calendarNames)
            for calendarnameorarnlist0 in calendarNames {
                try calendarNamesContainer.encode(calendarnameorarnlist0)
            }
        }
        if let complianceSeverity = complianceSeverity {
            try encodeContainer.encode(complianceSeverity.rawValue, forKey: .complianceSeverity)
        }
        if let date = date {
            try encodeContainer.encode(date.timeIntervalSince1970, forKey: .date)
        }
        if let documentVersion = documentVersion {
            try encodeContainer.encode(documentVersion, forKey: .documentVersion)
        }
        if let instanceId = instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
        if let lastExecutionDate = lastExecutionDate {
            try encodeContainer.encode(lastExecutionDate.timeIntervalSince1970, forKey: .lastExecutionDate)
        }
        if let lastSuccessfulExecutionDate = lastSuccessfulExecutionDate {
            try encodeContainer.encode(lastSuccessfulExecutionDate.timeIntervalSince1970, forKey: .lastSuccessfulExecutionDate)
        }
        if let lastUpdateAssociationDate = lastUpdateAssociationDate {
            try encodeContainer.encode(lastUpdateAssociationDate.timeIntervalSince1970, forKey: .lastUpdateAssociationDate)
        }
        if let maxConcurrency = maxConcurrency {
            try encodeContainer.encode(maxConcurrency, forKey: .maxConcurrency)
        }
        if let maxErrors = maxErrors {
            try encodeContainer.encode(maxErrors, forKey: .maxErrors)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let outputLocation = outputLocation {
            try encodeContainer.encode(outputLocation, forKey: .outputLocation)
        }
        if let overview = overview {
            try encodeContainer.encode(overview, forKey: .overview)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .parameters)
            for (dictKey0, parameters0) in parameters {
                try parametersContainer.encode(parameters0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let scheduleExpression = scheduleExpression {
            try encodeContainer.encode(scheduleExpression, forKey: .scheduleExpression)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let syncCompliance = syncCompliance {
            try encodeContainer.encode(syncCompliance.rawValue, forKey: .syncCompliance)
        }
        if let targetLocations = targetLocations {
            var targetLocationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targetLocations)
            for targetlocations0 in targetLocations {
                try targetLocationsContainer.encode(targetlocations0)
            }
        }
        if let targets = targets {
            var targetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targets)
            for targets0 in targets {
                try targetsContainer.encode(targets0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let associationVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associationVersion)
        associationVersion = associationVersionDecoded
        let dateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .date)
        date = dateDecoded
        let lastUpdateAssociationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdateAssociationDate)
        lastUpdateAssociationDate = lastUpdateAssociationDateDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SsmClientTypes.AssociationStatus.self, forKey: .status)
        status = statusDecoded
        let overviewDecoded = try containerValues.decodeIfPresent(SsmClientTypes.AssociationOverview.self, forKey: .overview)
        overview = overviewDecoded
        let documentVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentVersion)
        documentVersion = documentVersionDecoded
        let automationTargetParameterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .automationTargetParameterName)
        automationTargetParameterName = automationTargetParameterNameDecoded
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:[Swift.String]]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, parametervaluelist0) in parametersContainer {
                var parametervaluelist0Decoded0: [Swift.String]? = nil
                if let parametervaluelist0 = parametervaluelist0 {
                    parametervaluelist0Decoded0 = [Swift.String]()
                    for string1 in parametervaluelist0 {
                        if let string1 = string1 {
                            parametervaluelist0Decoded0?.append(string1)
                        }
                    }
                }
                parametersDecoded0?[key0] = parametervaluelist0Decoded0
            }
        }
        parameters = parametersDecoded0
        let associationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associationId)
        associationId = associationIdDecoded
        let targetsContainer = try containerValues.decodeIfPresent([SsmClientTypes.Target?].self, forKey: .targets)
        var targetsDecoded0:[SsmClientTypes.Target]? = nil
        if let targetsContainer = targetsContainer {
            targetsDecoded0 = [SsmClientTypes.Target]()
            for structure0 in targetsContainer {
                if let structure0 = structure0 {
                    targetsDecoded0?.append(structure0)
                }
            }
        }
        targets = targetsDecoded0
        let scheduleExpressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduleExpression)
        scheduleExpression = scheduleExpressionDecoded
        let outputLocationDecoded = try containerValues.decodeIfPresent(SsmClientTypes.InstanceAssociationOutputLocation.self, forKey: .outputLocation)
        outputLocation = outputLocationDecoded
        let lastExecutionDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastExecutionDate)
        lastExecutionDate = lastExecutionDateDecoded
        let lastSuccessfulExecutionDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastSuccessfulExecutionDate)
        lastSuccessfulExecutionDate = lastSuccessfulExecutionDateDecoded
        let associationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associationName)
        associationName = associationNameDecoded
        let maxErrorsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maxErrors)
        maxErrors = maxErrorsDecoded
        let maxConcurrencyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maxConcurrency)
        maxConcurrency = maxConcurrencyDecoded
        let complianceSeverityDecoded = try containerValues.decodeIfPresent(SsmClientTypes.AssociationComplianceSeverity.self, forKey: .complianceSeverity)
        complianceSeverity = complianceSeverityDecoded
        let syncComplianceDecoded = try containerValues.decodeIfPresent(SsmClientTypes.AssociationSyncCompliance.self, forKey: .syncCompliance)
        syncCompliance = syncComplianceDecoded
        let applyOnlyAtCronIntervalDecoded = try containerValues.decode(Swift.Bool.self, forKey: .applyOnlyAtCronInterval)
        applyOnlyAtCronInterval = applyOnlyAtCronIntervalDecoded
        let calendarNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .calendarNames)
        var calendarNamesDecoded0:[Swift.String]? = nil
        if let calendarNamesContainer = calendarNamesContainer {
            calendarNamesDecoded0 = [Swift.String]()
            for string0 in calendarNamesContainer {
                if let string0 = string0 {
                    calendarNamesDecoded0?.append(string0)
                }
            }
        }
        calendarNames = calendarNamesDecoded0
        let targetLocationsContainer = try containerValues.decodeIfPresent([SsmClientTypes.TargetLocation?].self, forKey: .targetLocations)
        var targetLocationsDecoded0:[SsmClientTypes.TargetLocation]? = nil
        if let targetLocationsContainer = targetLocationsContainer {
            targetLocationsDecoded0 = [SsmClientTypes.TargetLocation]()
            for structure0 in targetLocationsContainer {
                if let structure0 = structure0 {
                    targetLocationsDecoded0?.append(structure0)
                }
            }
        }
        targetLocations = targetLocationsDecoded0
    }
}
