// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IvsClientTypes.VideoConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case avcLevel
        case avcProfile
        case codec
        case encoder
        case targetBitrate
        case targetFramerate
        case videoHeight
        case videoWidth
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let avcLevel = avcLevel {
            try encodeContainer.encode(avcLevel, forKey: .avcLevel)
        }
        if let avcProfile = avcProfile {
            try encodeContainer.encode(avcProfile, forKey: .avcProfile)
        }
        if let codec = codec {
            try encodeContainer.encode(codec, forKey: .codec)
        }
        if let encoder = encoder {
            try encodeContainer.encode(encoder, forKey: .encoder)
        }
        if targetBitrate != 0 {
            try encodeContainer.encode(targetBitrate, forKey: .targetBitrate)
        }
        if targetFramerate != 0 {
            try encodeContainer.encode(targetFramerate, forKey: .targetFramerate)
        }
        if videoHeight != 0 {
            try encodeContainer.encode(videoHeight, forKey: .videoHeight)
        }
        if videoWidth != 0 {
            try encodeContainer.encode(videoWidth, forKey: .videoWidth)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let avcProfileDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .avcProfile)
        avcProfile = avcProfileDecoded
        let avcLevelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .avcLevel)
        avcLevel = avcLevelDecoded
        let codecDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .codec)
        codec = codecDecoded
        let encoderDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .encoder)
        encoder = encoderDecoded
        let targetBitrateDecoded = try containerValues.decode(Swift.Int.self, forKey: .targetBitrate)
        targetBitrate = targetBitrateDecoded
        let targetFramerateDecoded = try containerValues.decode(Swift.Int.self, forKey: .targetFramerate)
        targetFramerate = targetFramerateDecoded
        let videoHeightDecoded = try containerValues.decode(Swift.Int.self, forKey: .videoHeight)
        videoHeight = videoHeightDecoded
        let videoWidthDecoded = try containerValues.decode(Swift.Int.self, forKey: .videoWidth)
        videoWidth = videoWidthDecoded
    }
}
