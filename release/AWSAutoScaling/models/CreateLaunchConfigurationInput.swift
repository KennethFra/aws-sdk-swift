// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateLaunchConfigurationInput: Swift.Equatable {
    /// For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group's instances. If you specify true, each instance in the Auto Scaling group receives a unique public IP address. For more information, see [Launching Auto Scaling instances in a VPC](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html) in the Amazon EC2 Auto Scaling User Guide. If you specify this parameter, you must specify at least one subnet for VPCZoneIdentifier when you create your group. If the instance is launched into a default subnet, the default is to assign a public IP address, unless you disabled the option to assign a public IP address on the subnet. If the instance is launched into a nondefault subnet, the default is not to assign a public IP address, unless you enabled the option to assign a public IP address on the subnet.
    public var associatePublicIpAddress: Swift.Bool?
    /// A block device mapping, which specifies the block devices for the instance. You can specify virtual devices and EBS volumes. For more information, see [Block Device Mapping](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html) in the Amazon EC2 User Guide for Linux Instances.
    public var blockDeviceMappings: [AutoScalingClientTypes.BlockDeviceMapping]?
    /// The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. For more information, see [ClassicLink](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html) in the Amazon EC2 User Guide for Linux Instances and [Linking EC2-Classic instances to a VPC](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink) in the Amazon EC2 Auto Scaling User Guide. This parameter can only be used if you are launching EC2-Classic instances.
    public var classicLinkVPCId: Swift.String?
    /// The IDs of one or more security groups for the specified ClassicLink-enabled VPC. For more information, see [ClassicLink](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html) in the Amazon EC2 User Guide for Linux Instances and [Linking EC2-Classic instances to a VPC](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink) in the Amazon EC2 Auto Scaling User Guide. If you specify the ClassicLinkVPCId parameter, you must specify this parameter.
    public var classicLinkVPCSecurityGroups: [Swift.String]?
    /// Specifies whether the launch configuration is optimized for EBS I/O (true) or not (false). The optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization is not available with all instance types. Additional fees are incurred when you enable EBS optimization for an instance type that is not EBS-optimized by default. For more information, see [Amazon EBS-optimized instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html) in the Amazon EC2 User Guide for Linux Instances. The default value is false.
    public var ebsOptimized: Swift.Bool?
    /// The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role. For more information, see [IAM role for applications that run on Amazon EC2 instances](https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html) in the Amazon EC2 Auto Scaling User Guide.
    public var iamInstanceProfile: Swift.String?
    /// The ID of the Amazon Machine Image (AMI) that was assigned during registration. For more information, see [Finding an AMI](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html) in the Amazon EC2 User Guide for Linux Instances. If you do not specify InstanceId, you must specify ImageId.
    public var imageId: Swift.String?
    /// The ID of the instance to use to create the launch configuration. The new launch configuration derives attributes from the instance, except for the block device mapping. To create a launch configuration with a block device mapping or override any other instance attributes, specify them as part of the same request. For more information, see [Creating a launch configuration using an EC2 instance](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-lc-with-instanceID.html) in the Amazon EC2 Auto Scaling User Guide. If you do not specify InstanceId, you must specify both ImageId and InstanceType.
    public var instanceId: Swift.String?
    /// Controls whether instances in this group are launched with detailed (true) or basic (false) monitoring. The default value is true (enabled). When detailed monitoring is enabled, Amazon CloudWatch generates metrics every minute and your account is charged a fee. When you disable detailed monitoring, CloudWatch generates metrics every 5 minutes. For more information, see [Configure Monitoring for Auto Scaling Instances](https://docs.aws.amazon.com/autoscaling/latest/userguide/enable-as-instance-metrics.html) in the Amazon EC2 Auto Scaling User Guide.
    public var instanceMonitoring: AutoScalingClientTypes.InstanceMonitoring?
    /// Specifies the instance type of the EC2 instance. For information about available instance types, see [Available Instance Types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes) in the Amazon EC2 User Guide for Linux Instances. If you do not specify InstanceId, you must specify InstanceType.
    public var instanceType: Swift.String?
    /// The ID of the kernel associated with the AMI.
    public var kernelId: Swift.String?
    /// The name of the key pair. For more information, see [Amazon EC2 Key Pairs](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html) in the Amazon EC2 User Guide for Linux Instances.
    public var keyName: Swift.String?
    /// The name of the launch configuration. This name must be unique per Region per account.
    /// This member is required.
    public var launchConfigurationName: Swift.String?
    /// The metadata options for the instances. For more information, see [Configuring the Instance Metadata Options](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-config.html#launch-configurations-imds) in the Amazon EC2 Auto Scaling User Guide.
    public var metadataOptions: AutoScalingClientTypes.InstanceMetadataOptions?
    /// The tenancy of the instance. An instance with dedicated tenancy runs on isolated, single-tenant hardware and can only be launched into a VPC. To launch dedicated instances into a shared tenancy VPC (a VPC with the instance placement tenancy attribute set to default), you must set the value of this parameter to dedicated. If you specify PlacementTenancy, you must specify at least one subnet for VPCZoneIdentifier when you create your group. For more information, see [Configuring instance tenancy with Amazon EC2 Auto Scaling](https://docs.aws.amazon.com/autoscaling/ec2/userguide/auto-scaling-dedicated-instances.html) in the Amazon EC2 Auto Scaling User Guide. Valid Values: default | dedicated
    public var placementTenancy: Swift.String?
    /// The ID of the RAM disk to select.
    public var ramdiskId: Swift.String?
    /// A list that contains the security groups to assign to the instances in the Auto Scaling group. [EC2-VPC] Specify the security group IDs. For more information, see [Security Groups for Your VPC](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html) in the Amazon Virtual Private Cloud User Guide. [EC2-Classic] Specify either the security group names or the security group IDs. For more information, see [Amazon EC2 Security Groups](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html) in the Amazon EC2 User Guide for Linux Instances.
    public var securityGroups: [Swift.String]?
    /// The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot price. For more information, see [Requesting Spot Instances](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-launch-spot-instances.html) in the Amazon EC2 Auto Scaling User Guide. When you change your maximum price by creating a new launch configuration, running instances will continue to run as long as the maximum price for those running instances is higher than the current Spot price.
    public var spotPrice: Swift.String?
    /// The user data to make available to the launched EC2 instances. For more information, see [Instance metadata and user data](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html) (Linux) and [Instance metadata and user data](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-instance-metadata.html) (Windows). If you are using a command line tool, base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide base64-encoded text. User data is limited to 16 KB.
    public var userData: Swift.String?

    public init (
        associatePublicIpAddress: Swift.Bool? = nil,
        blockDeviceMappings: [AutoScalingClientTypes.BlockDeviceMapping]? = nil,
        classicLinkVPCId: Swift.String? = nil,
        classicLinkVPCSecurityGroups: [Swift.String]? = nil,
        ebsOptimized: Swift.Bool? = nil,
        iamInstanceProfile: Swift.String? = nil,
        imageId: Swift.String? = nil,
        instanceId: Swift.String? = nil,
        instanceMonitoring: AutoScalingClientTypes.InstanceMonitoring? = nil,
        instanceType: Swift.String? = nil,
        kernelId: Swift.String? = nil,
        keyName: Swift.String? = nil,
        launchConfigurationName: Swift.String? = nil,
        metadataOptions: AutoScalingClientTypes.InstanceMetadataOptions? = nil,
        placementTenancy: Swift.String? = nil,
        ramdiskId: Swift.String? = nil,
        securityGroups: [Swift.String]? = nil,
        spotPrice: Swift.String? = nil,
        userData: Swift.String? = nil
    )
    {
        self.associatePublicIpAddress = associatePublicIpAddress
        self.blockDeviceMappings = blockDeviceMappings
        self.classicLinkVPCId = classicLinkVPCId
        self.classicLinkVPCSecurityGroups = classicLinkVPCSecurityGroups
        self.ebsOptimized = ebsOptimized
        self.iamInstanceProfile = iamInstanceProfile
        self.imageId = imageId
        self.instanceId = instanceId
        self.instanceMonitoring = instanceMonitoring
        self.instanceType = instanceType
        self.kernelId = kernelId
        self.keyName = keyName
        self.launchConfigurationName = launchConfigurationName
        self.metadataOptions = metadataOptions
        self.placementTenancy = placementTenancy
        self.ramdiskId = ramdiskId
        self.securityGroups = securityGroups
        self.spotPrice = spotPrice
        self.userData = userData
    }
}
