// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AmplifyUiBuilderClientTypes {
    /// Contains the configuration settings for a user interface (UI) element for an Amplify app. A component is configured as a primary, stand-alone UI element. Use ComponentChild to configure an instance of a Component. A ComponentChild instance inherits the configuration of the main Component.
    public struct Component: Swift.Equatable {
        /// The unique ID of the Amplify app associated with the component.
        /// This member is required.
        public var appId: Swift.String?
        /// The information to connect a component's properties to data at runtime.
        /// This member is required.
        public var bindingProperties: [Swift.String:AmplifyUiBuilderClientTypes.ComponentBindingPropertiesValue]?
        /// A list of the component's ComponentChild instances.
        public var children: [AmplifyUiBuilderClientTypes.ComponentChild]?
        /// The data binding configuration for the component's properties. Use this for a collection component.
        public var collectionProperties: [Swift.String:AmplifyUiBuilderClientTypes.ComponentDataConfiguration]?
        /// The type of the component. This can be an Amplify custom UI component or another custom component.
        /// This member is required.
        public var componentType: Swift.String?
        /// The time that the component was created.
        /// This member is required.
        public var createdAt: ClientRuntime.Date?
        /// The name of the backend environment that is a part of the Amplify app.
        /// This member is required.
        public var environmentName: Swift.String?
        /// The unique ID of the component.
        /// This member is required.
        public var id: Swift.String?
        /// The time that the component was modified.
        public var modifiedAt: ClientRuntime.Date?
        /// The name of the component.
        /// This member is required.
        public var name: Swift.String?
        /// Describes the component's properties that can be overriden in a customized instance of the component.
        /// This member is required.
        public var overrides: [Swift.String:[Swift.String:Swift.String]]?
        /// Describes the component's properties.
        /// This member is required.
        public var properties: [Swift.String:AmplifyUiBuilderClientTypes.ComponentProperty]?
        /// The unique ID of the component in its original source system, such as Figma.
        public var sourceId: Swift.String?
        /// One or more key-value pairs to use when tagging the component.
        public var tags: [Swift.String:Swift.String]?
        /// A list of the component's variants. A variant is a unique style configuration of a main component.
        /// This member is required.
        public var variants: [AmplifyUiBuilderClientTypes.ComponentVariant]?

        public init (
            appId: Swift.String? = nil,
            bindingProperties: [Swift.String:AmplifyUiBuilderClientTypes.ComponentBindingPropertiesValue]? = nil,
            children: [AmplifyUiBuilderClientTypes.ComponentChild]? = nil,
            collectionProperties: [Swift.String:AmplifyUiBuilderClientTypes.ComponentDataConfiguration]? = nil,
            componentType: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            environmentName: Swift.String? = nil,
            id: Swift.String? = nil,
            modifiedAt: ClientRuntime.Date? = nil,
            name: Swift.String? = nil,
            overrides: [Swift.String:[Swift.String:Swift.String]]? = nil,
            properties: [Swift.String:AmplifyUiBuilderClientTypes.ComponentProperty]? = nil,
            sourceId: Swift.String? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            variants: [AmplifyUiBuilderClientTypes.ComponentVariant]? = nil
        )
        {
            self.appId = appId
            self.bindingProperties = bindingProperties
            self.children = children
            self.collectionProperties = collectionProperties
            self.componentType = componentType
            self.createdAt = createdAt
            self.environmentName = environmentName
            self.id = id
            self.modifiedAt = modifiedAt
            self.name = name
            self.overrides = overrides
            self.properties = properties
            self.sourceId = sourceId
            self.tags = tags
            self.variants = variants
        }
    }

}
