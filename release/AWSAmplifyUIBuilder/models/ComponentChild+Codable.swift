// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AmplifyUiBuilderClientTypes.ComponentChild: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case children
        case componentType
        case name
        case properties
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let children = children {
            var childrenContainer = encodeContainer.nestedUnkeyedContainer(forKey: .children)
            for componentchildlist0 in children {
                try childrenContainer.encode(componentchildlist0)
            }
        }
        if let componentType = componentType {
            try encodeContainer.encode(componentType, forKey: .componentType)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let properties = properties {
            var propertiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .properties)
            for (dictKey0, componentproperties0) in properties {
                try propertiesContainer.encode(componentproperties0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let componentTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .componentType)
        componentType = componentTypeDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let propertiesContainer = try containerValues.decodeIfPresent([Swift.String: AmplifyUiBuilderClientTypes.ComponentProperty?].self, forKey: .properties)
        var propertiesDecoded0: [Swift.String:AmplifyUiBuilderClientTypes.ComponentProperty]? = nil
        if let propertiesContainer = propertiesContainer {
            propertiesDecoded0 = [Swift.String:AmplifyUiBuilderClientTypes.ComponentProperty]()
            for (key0, componentproperty0) in propertiesContainer {
                if let componentproperty0 = componentproperty0 {
                    propertiesDecoded0?[key0] = componentproperty0
                }
            }
        }
        properties = propertiesDecoded0
        let childrenContainer = try containerValues.decodeIfPresent([AmplifyUiBuilderClientTypes.ComponentChild?].self, forKey: .children)
        var childrenDecoded0:[AmplifyUiBuilderClientTypes.ComponentChild]? = nil
        if let childrenContainer = childrenContainer {
            childrenDecoded0 = [AmplifyUiBuilderClientTypes.ComponentChild]()
            for structure0 in childrenContainer {
                if let structure0 = structure0 {
                    childrenDecoded0?.append(structure0)
                }
            }
        }
        children = childrenDecoded0
    }
}
