// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DynamoDbClientTypes.SourceTableDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case billingMode = "BillingMode"
        case itemCount = "ItemCount"
        case keySchema = "KeySchema"
        case provisionedThroughput = "ProvisionedThroughput"
        case tableArn = "TableArn"
        case tableCreationDateTime = "TableCreationDateTime"
        case tableId = "TableId"
        case tableName = "TableName"
        case tableSizeBytes = "TableSizeBytes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let billingMode = billingMode {
            try encodeContainer.encode(billingMode.rawValue, forKey: .billingMode)
        }
        if let itemCount = itemCount {
            try encodeContainer.encode(itemCount, forKey: .itemCount)
        }
        if let keySchema = keySchema {
            var keySchemaContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keySchema)
            for keyschema0 in keySchema {
                try keySchemaContainer.encode(keyschema0)
            }
        }
        if let provisionedThroughput = provisionedThroughput {
            try encodeContainer.encode(provisionedThroughput, forKey: .provisionedThroughput)
        }
        if let tableArn = tableArn {
            try encodeContainer.encode(tableArn, forKey: .tableArn)
        }
        if let tableCreationDateTime = tableCreationDateTime {
            try encodeContainer.encode(tableCreationDateTime.timeIntervalSince1970, forKey: .tableCreationDateTime)
        }
        if let tableId = tableId {
            try encodeContainer.encode(tableId, forKey: .tableId)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
        if tableSizeBytes != 0 {
            try encodeContainer.encode(tableSizeBytes, forKey: .tableSizeBytes)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let tableIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableId)
        tableId = tableIdDecoded
        let tableArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableArn)
        tableArn = tableArnDecoded
        let tableSizeBytesDecoded = try containerValues.decode(Swift.Int.self, forKey: .tableSizeBytes)
        tableSizeBytes = tableSizeBytesDecoded
        let keySchemaContainer = try containerValues.decodeIfPresent([DynamoDbClientTypes.KeySchemaElement?].self, forKey: .keySchema)
        var keySchemaDecoded0:[DynamoDbClientTypes.KeySchemaElement]? = nil
        if let keySchemaContainer = keySchemaContainer {
            keySchemaDecoded0 = [DynamoDbClientTypes.KeySchemaElement]()
            for structure0 in keySchemaContainer {
                if let structure0 = structure0 {
                    keySchemaDecoded0?.append(structure0)
                }
            }
        }
        keySchema = keySchemaDecoded0
        let tableCreationDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .tableCreationDateTime)
        tableCreationDateTime = tableCreationDateTimeDecoded
        let provisionedThroughputDecoded = try containerValues.decodeIfPresent(DynamoDbClientTypes.ProvisionedThroughput.self, forKey: .provisionedThroughput)
        provisionedThroughput = provisionedThroughputDecoded
        let itemCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .itemCount)
        itemCount = itemCountDecoded
        let billingModeDecoded = try containerValues.decodeIfPresent(DynamoDbClientTypes.BillingMode.self, forKey: .billingMode)
        billingMode = billingModeDecoded
    }
}
