// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DirectoryClientTypes.RadiusSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authenticationProtocol = "AuthenticationProtocol"
        case displayLabel = "DisplayLabel"
        case radiusPort = "RadiusPort"
        case radiusRetries = "RadiusRetries"
        case radiusServers = "RadiusServers"
        case radiusTimeout = "RadiusTimeout"
        case sharedSecret = "SharedSecret"
        case useSameUsername = "UseSameUsername"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authenticationProtocol = authenticationProtocol {
            try encodeContainer.encode(authenticationProtocol.rawValue, forKey: .authenticationProtocol)
        }
        if let displayLabel = displayLabel {
            try encodeContainer.encode(displayLabel, forKey: .displayLabel)
        }
        if radiusPort != 0 {
            try encodeContainer.encode(radiusPort, forKey: .radiusPort)
        }
        if radiusRetries != 0 {
            try encodeContainer.encode(radiusRetries, forKey: .radiusRetries)
        }
        if let radiusServers = radiusServers {
            var radiusServersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .radiusServers)
            for servers0 in radiusServers {
                try radiusServersContainer.encode(servers0)
            }
        }
        if radiusTimeout != 0 {
            try encodeContainer.encode(radiusTimeout, forKey: .radiusTimeout)
        }
        if let sharedSecret = sharedSecret {
            try encodeContainer.encode(sharedSecret, forKey: .sharedSecret)
        }
        if useSameUsername != false {
            try encodeContainer.encode(useSameUsername, forKey: .useSameUsername)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let radiusServersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .radiusServers)
        var radiusServersDecoded0:[Swift.String]? = nil
        if let radiusServersContainer = radiusServersContainer {
            radiusServersDecoded0 = [Swift.String]()
            for string0 in radiusServersContainer {
                if let string0 = string0 {
                    radiusServersDecoded0?.append(string0)
                }
            }
        }
        radiusServers = radiusServersDecoded0
        let radiusPortDecoded = try containerValues.decode(Swift.Int.self, forKey: .radiusPort)
        radiusPort = radiusPortDecoded
        let radiusTimeoutDecoded = try containerValues.decode(Swift.Int.self, forKey: .radiusTimeout)
        radiusTimeout = radiusTimeoutDecoded
        let radiusRetriesDecoded = try containerValues.decode(Swift.Int.self, forKey: .radiusRetries)
        radiusRetries = radiusRetriesDecoded
        let sharedSecretDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sharedSecret)
        sharedSecret = sharedSecretDecoded
        let authenticationProtocolDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.RadiusAuthenticationProtocol.self, forKey: .authenticationProtocol)
        authenticationProtocol = authenticationProtocolDecoded
        let displayLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayLabel)
        displayLabel = displayLabelDecoded
        let useSameUsernameDecoded = try containerValues.decode(Swift.Bool.self, forKey: .useSameUsername)
        useSameUsername = useSameUsernameDecoded
    }
}
