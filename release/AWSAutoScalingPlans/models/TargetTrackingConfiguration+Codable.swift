// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AutoScalingPlansClientTypes.TargetTrackingConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customizedScalingMetricSpecification = "CustomizedScalingMetricSpecification"
        case disableScaleIn = "DisableScaleIn"
        case estimatedInstanceWarmup = "EstimatedInstanceWarmup"
        case predefinedScalingMetricSpecification = "PredefinedScalingMetricSpecification"
        case scaleInCooldown = "ScaleInCooldown"
        case scaleOutCooldown = "ScaleOutCooldown"
        case targetValue = "TargetValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customizedScalingMetricSpecification = customizedScalingMetricSpecification {
            try encodeContainer.encode(customizedScalingMetricSpecification, forKey: .customizedScalingMetricSpecification)
        }
        if let disableScaleIn = disableScaleIn {
            try encodeContainer.encode(disableScaleIn, forKey: .disableScaleIn)
        }
        if let estimatedInstanceWarmup = estimatedInstanceWarmup {
            try encodeContainer.encode(estimatedInstanceWarmup, forKey: .estimatedInstanceWarmup)
        }
        if let predefinedScalingMetricSpecification = predefinedScalingMetricSpecification {
            try encodeContainer.encode(predefinedScalingMetricSpecification, forKey: .predefinedScalingMetricSpecification)
        }
        if let scaleInCooldown = scaleInCooldown {
            try encodeContainer.encode(scaleInCooldown, forKey: .scaleInCooldown)
        }
        if let scaleOutCooldown = scaleOutCooldown {
            try encodeContainer.encode(scaleOutCooldown, forKey: .scaleOutCooldown)
        }
        if let targetValue = targetValue {
            try encodeContainer.encode(targetValue, forKey: .targetValue)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let predefinedScalingMetricSpecificationDecoded = try containerValues.decodeIfPresent(AutoScalingPlansClientTypes.PredefinedScalingMetricSpecification.self, forKey: .predefinedScalingMetricSpecification)
        predefinedScalingMetricSpecification = predefinedScalingMetricSpecificationDecoded
        let customizedScalingMetricSpecificationDecoded = try containerValues.decodeIfPresent(AutoScalingPlansClientTypes.CustomizedScalingMetricSpecification.self, forKey: .customizedScalingMetricSpecification)
        customizedScalingMetricSpecification = customizedScalingMetricSpecificationDecoded
        let targetValueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .targetValue)
        targetValue = targetValueDecoded
        let disableScaleInDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .disableScaleIn)
        disableScaleIn = disableScaleInDecoded
        let scaleOutCooldownDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scaleOutCooldown)
        scaleOutCooldown = scaleOutCooldownDecoded
        let scaleInCooldownDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scaleInCooldown)
        scaleInCooldown = scaleInCooldownDecoded
        let estimatedInstanceWarmupDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .estimatedInstanceWarmup)
        estimatedInstanceWarmup = estimatedInstanceWarmupDecoded
    }
}
