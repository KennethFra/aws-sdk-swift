// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EmrClientTypes.JobFlowInstancesDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ec2KeyName = "Ec2KeyName"
        case ec2SubnetId = "Ec2SubnetId"
        case hadoopVersion = "HadoopVersion"
        case instanceCount = "InstanceCount"
        case instanceGroups = "InstanceGroups"
        case keepJobFlowAliveWhenNoSteps = "KeepJobFlowAliveWhenNoSteps"
        case masterInstanceId = "MasterInstanceId"
        case masterInstanceType = "MasterInstanceType"
        case masterPublicDnsName = "MasterPublicDnsName"
        case normalizedInstanceHours = "NormalizedInstanceHours"
        case placement = "Placement"
        case slaveInstanceType = "SlaveInstanceType"
        case terminationProtected = "TerminationProtected"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ec2KeyName = ec2KeyName {
            try encodeContainer.encode(ec2KeyName, forKey: .ec2KeyName)
        }
        if let ec2SubnetId = ec2SubnetId {
            try encodeContainer.encode(ec2SubnetId, forKey: .ec2SubnetId)
        }
        if let hadoopVersion = hadoopVersion {
            try encodeContainer.encode(hadoopVersion, forKey: .hadoopVersion)
        }
        if let instanceCount = instanceCount {
            try encodeContainer.encode(instanceCount, forKey: .instanceCount)
        }
        if let instanceGroups = instanceGroups {
            var instanceGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceGroups)
            for instancegroupdetaillist0 in instanceGroups {
                try instanceGroupsContainer.encode(instancegroupdetaillist0)
            }
        }
        if keepJobFlowAliveWhenNoSteps != false {
            try encodeContainer.encode(keepJobFlowAliveWhenNoSteps, forKey: .keepJobFlowAliveWhenNoSteps)
        }
        if let masterInstanceId = masterInstanceId {
            try encodeContainer.encode(masterInstanceId, forKey: .masterInstanceId)
        }
        if let masterInstanceType = masterInstanceType {
            try encodeContainer.encode(masterInstanceType, forKey: .masterInstanceType)
        }
        if let masterPublicDnsName = masterPublicDnsName {
            try encodeContainer.encode(masterPublicDnsName, forKey: .masterPublicDnsName)
        }
        if let normalizedInstanceHours = normalizedInstanceHours {
            try encodeContainer.encode(normalizedInstanceHours, forKey: .normalizedInstanceHours)
        }
        if let placement = placement {
            try encodeContainer.encode(placement, forKey: .placement)
        }
        if let slaveInstanceType = slaveInstanceType {
            try encodeContainer.encode(slaveInstanceType, forKey: .slaveInstanceType)
        }
        if terminationProtected != false {
            try encodeContainer.encode(terminationProtected, forKey: .terminationProtected)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let masterInstanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterInstanceType)
        masterInstanceType = masterInstanceTypeDecoded
        let masterPublicDnsNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterPublicDnsName)
        masterPublicDnsName = masterPublicDnsNameDecoded
        let masterInstanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterInstanceId)
        masterInstanceId = masterInstanceIdDecoded
        let slaveInstanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .slaveInstanceType)
        slaveInstanceType = slaveInstanceTypeDecoded
        let instanceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instanceCount)
        instanceCount = instanceCountDecoded
        let instanceGroupsContainer = try containerValues.decodeIfPresent([EmrClientTypes.InstanceGroupDetail?].self, forKey: .instanceGroups)
        var instanceGroupsDecoded0:[EmrClientTypes.InstanceGroupDetail]? = nil
        if let instanceGroupsContainer = instanceGroupsContainer {
            instanceGroupsDecoded0 = [EmrClientTypes.InstanceGroupDetail]()
            for structure0 in instanceGroupsContainer {
                if let structure0 = structure0 {
                    instanceGroupsDecoded0?.append(structure0)
                }
            }
        }
        instanceGroups = instanceGroupsDecoded0
        let normalizedInstanceHoursDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .normalizedInstanceHours)
        normalizedInstanceHours = normalizedInstanceHoursDecoded
        let ec2KeyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ec2KeyName)
        ec2KeyName = ec2KeyNameDecoded
        let ec2SubnetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ec2SubnetId)
        ec2SubnetId = ec2SubnetIdDecoded
        let placementDecoded = try containerValues.decodeIfPresent(EmrClientTypes.PlacementType.self, forKey: .placement)
        placement = placementDecoded
        let keepJobFlowAliveWhenNoStepsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .keepJobFlowAliveWhenNoSteps)
        keepJobFlowAliveWhenNoSteps = keepJobFlowAliveWhenNoStepsDecoded
        let terminationProtectedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .terminationProtected)
        terminationProtected = terminationProtectedDecoded
        let hadoopVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hadoopVersion)
        hadoopVersion = hadoopVersionDecoded
    }
}
