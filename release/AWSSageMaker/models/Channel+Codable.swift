// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.Channel: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channelName = "ChannelName"
        case compressionType = "CompressionType"
        case contentType = "ContentType"
        case dataSource = "DataSource"
        case inputMode = "InputMode"
        case recordWrapperType = "RecordWrapperType"
        case shuffleConfig = "ShuffleConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channelName = channelName {
            try encodeContainer.encode(channelName, forKey: .channelName)
        }
        if let compressionType = compressionType {
            try encodeContainer.encode(compressionType.rawValue, forKey: .compressionType)
        }
        if let contentType = contentType {
            try encodeContainer.encode(contentType, forKey: .contentType)
        }
        if let dataSource = dataSource {
            try encodeContainer.encode(dataSource, forKey: .dataSource)
        }
        if let inputMode = inputMode {
            try encodeContainer.encode(inputMode.rawValue, forKey: .inputMode)
        }
        if let recordWrapperType = recordWrapperType {
            try encodeContainer.encode(recordWrapperType.rawValue, forKey: .recordWrapperType)
        }
        if let shuffleConfig = shuffleConfig {
            try encodeContainer.encode(shuffleConfig, forKey: .shuffleConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .channelName)
        channelName = channelNameDecoded
        let dataSourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DataSource.self, forKey: .dataSource)
        dataSource = dataSourceDecoded
        let contentTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contentType)
        contentType = contentTypeDecoded
        let compressionTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.CompressionType.self, forKey: .compressionType)
        compressionType = compressionTypeDecoded
        let recordWrapperTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RecordWrapper.self, forKey: .recordWrapperType)
        recordWrapperType = recordWrapperTypeDecoded
        let inputModeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrainingInputMode.self, forKey: .inputMode)
        inputMode = inputModeDecoded
        let shuffleConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ShuffleConfig.self, forKey: .shuffleConfig)
        shuffleConfig = shuffleConfigDecoded
    }
}
