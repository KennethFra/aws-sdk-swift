// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.Pipeline: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdBy = "CreatedBy"
        case creationTime = "CreationTime"
        case lastModifiedBy = "LastModifiedBy"
        case lastModifiedTime = "LastModifiedTime"
        case lastRunTime = "LastRunTime"
        case pipelineArn = "PipelineArn"
        case pipelineDescription = "PipelineDescription"
        case pipelineDisplayName = "PipelineDisplayName"
        case pipelineName = "PipelineName"
        case pipelineStatus = "PipelineStatus"
        case roleArn = "RoleArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdBy = createdBy {
            try encodeContainer.encode(createdBy, forKey: .createdBy)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let lastModifiedBy = lastModifiedBy {
            try encodeContainer.encode(lastModifiedBy, forKey: .lastModifiedBy)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let lastRunTime = lastRunTime {
            try encodeContainer.encode(lastRunTime.timeIntervalSince1970, forKey: .lastRunTime)
        }
        if let pipelineArn = pipelineArn {
            try encodeContainer.encode(pipelineArn, forKey: .pipelineArn)
        }
        if let pipelineDescription = pipelineDescription {
            try encodeContainer.encode(pipelineDescription, forKey: .pipelineDescription)
        }
        if let pipelineDisplayName = pipelineDisplayName {
            try encodeContainer.encode(pipelineDisplayName, forKey: .pipelineDisplayName)
        }
        if let pipelineName = pipelineName {
            try encodeContainer.encode(pipelineName, forKey: .pipelineName)
        }
        if let pipelineStatus = pipelineStatus {
            try encodeContainer.encode(pipelineStatus.rawValue, forKey: .pipelineStatus)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineArn)
        pipelineArn = pipelineArnDecoded
        let pipelineNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineName)
        pipelineName = pipelineNameDecoded
        let pipelineDisplayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineDisplayName)
        pipelineDisplayName = pipelineDisplayNameDecoded
        let pipelineDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineDescription)
        pipelineDescription = pipelineDescriptionDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let pipelineStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.PipelineStatus.self, forKey: .pipelineStatus)
        pipelineStatus = pipelineStatusDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let lastRunTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastRunTime)
        lastRunTime = lastRunTimeDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .createdBy)
        createdBy = createdByDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
