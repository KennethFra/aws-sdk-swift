// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.HyperParameterSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultValue = "DefaultValue"
        case description = "Description"
        case isRequired = "IsRequired"
        case isTunable = "IsTunable"
        case name = "Name"
        case range = "Range"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultValue = defaultValue {
            try encodeContainer.encode(defaultValue, forKey: .defaultValue)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if isRequired != false {
            try encodeContainer.encode(isRequired, forKey: .isRequired)
        }
        if isTunable != false {
            try encodeContainer.encode(isTunable, forKey: .isTunable)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let range = range {
            try encodeContainer.encode(range, forKey: .range)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let typeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ParameterType.self, forKey: .type)
        type = typeDecoded
        let rangeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ParameterRange.self, forKey: .range)
        range = rangeDecoded
        let isTunableDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTunable)
        isTunable = isTunableDecoded
        let isRequiredDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isRequired)
        isRequired = isRequiredDecoded
        let defaultValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultValue)
        defaultValue = defaultValueDecoded
    }
}
