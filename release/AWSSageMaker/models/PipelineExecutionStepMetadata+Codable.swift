// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.PipelineExecutionStepMetadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callback = "Callback"
        case clarifyCheck = "ClarifyCheck"
        case condition = "Condition"
        case lambda = "Lambda"
        case model = "Model"
        case processingJob = "ProcessingJob"
        case qualityCheck = "QualityCheck"
        case registerModel = "RegisterModel"
        case trainingJob = "TrainingJob"
        case transformJob = "TransformJob"
        case tuningJob = "TuningJob"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let callback = callback {
            try encodeContainer.encode(callback, forKey: .callback)
        }
        if let clarifyCheck = clarifyCheck {
            try encodeContainer.encode(clarifyCheck, forKey: .clarifyCheck)
        }
        if let condition = condition {
            try encodeContainer.encode(condition, forKey: .condition)
        }
        if let lambda = lambda {
            try encodeContainer.encode(lambda, forKey: .lambda)
        }
        if let model = model {
            try encodeContainer.encode(model, forKey: .model)
        }
        if let processingJob = processingJob {
            try encodeContainer.encode(processingJob, forKey: .processingJob)
        }
        if let qualityCheck = qualityCheck {
            try encodeContainer.encode(qualityCheck, forKey: .qualityCheck)
        }
        if let registerModel = registerModel {
            try encodeContainer.encode(registerModel, forKey: .registerModel)
        }
        if let trainingJob = trainingJob {
            try encodeContainer.encode(trainingJob, forKey: .trainingJob)
        }
        if let transformJob = transformJob {
            try encodeContainer.encode(transformJob, forKey: .transformJob)
        }
        if let tuningJob = tuningJob {
            try encodeContainer.encode(tuningJob, forKey: .tuningJob)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trainingJobDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrainingJobStepMetadata.self, forKey: .trainingJob)
        trainingJob = trainingJobDecoded
        let processingJobDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProcessingJobStepMetadata.self, forKey: .processingJob)
        processingJob = processingJobDecoded
        let transformJobDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TransformJobStepMetadata.self, forKey: .transformJob)
        transformJob = transformJobDecoded
        let tuningJobDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TuningJobStepMetaData.self, forKey: .tuningJob)
        tuningJob = tuningJobDecoded
        let modelDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelStepMetadata.self, forKey: .model)
        model = modelDecoded
        let registerModelDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RegisterModelStepMetadata.self, forKey: .registerModel)
        registerModel = registerModelDecoded
        let conditionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ConditionStepMetadata.self, forKey: .condition)
        condition = conditionDecoded
        let callbackDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.CallbackStepMetadata.self, forKey: .callback)
        callback = callbackDecoded
        let lambdaDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.LambdaStepMetadata.self, forKey: .lambda)
        lambda = lambdaDecoded
        let qualityCheckDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.QualityCheckStepMetadata.self, forKey: .qualityCheck)
        qualityCheck = qualityCheckDecoded
        let clarifyCheckDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ClarifyCheckStepMetadata.self, forKey: .clarifyCheck)
        clarifyCheck = clarifyCheckDecoded
    }
}
