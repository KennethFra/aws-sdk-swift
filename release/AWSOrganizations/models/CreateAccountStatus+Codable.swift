// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension OrganizationsClientTypes.CreateAccountStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case accountName = "AccountName"
        case completedTimestamp = "CompletedTimestamp"
        case failureReason = "FailureReason"
        case govCloudAccountId = "GovCloudAccountId"
        case id = "Id"
        case requestedTimestamp = "RequestedTimestamp"
        case state = "State"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let accountName = accountName {
            try encodeContainer.encode(accountName, forKey: .accountName)
        }
        if let completedTimestamp = completedTimestamp {
            try encodeContainer.encode(completedTimestamp.timeIntervalSince1970, forKey: .completedTimestamp)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason.rawValue, forKey: .failureReason)
        }
        if let govCloudAccountId = govCloudAccountId {
            try encodeContainer.encode(govCloudAccountId, forKey: .govCloudAccountId)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let requestedTimestamp = requestedTimestamp {
            try encodeContainer.encode(requestedTimestamp.timeIntervalSince1970, forKey: .requestedTimestamp)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let accountNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountName)
        accountName = accountNameDecoded
        let stateDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.CreateAccountState.self, forKey: .state)
        state = stateDecoded
        let requestedTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .requestedTimestamp)
        requestedTimestamp = requestedTimestampDecoded
        let completedTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .completedTimestamp)
        completedTimestamp = completedTimestampDecoded
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let govCloudAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .govCloudAccountId)
        govCloudAccountId = govCloudAccountIdDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.CreateAccountFailureReason.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
    }
}
