// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PinpointClientTypes.WriteApplicationSettingsRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case campaignHook = "CampaignHook"
        case cloudWatchMetricsEnabled = "CloudWatchMetricsEnabled"
        case eventTaggingEnabled = "EventTaggingEnabled"
        case limits = "Limits"
        case quietTime = "QuietTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let campaignHook = campaignHook {
            try encodeContainer.encode(campaignHook, forKey: .campaignHook)
        }
        if let cloudWatchMetricsEnabled = cloudWatchMetricsEnabled {
            try encodeContainer.encode(cloudWatchMetricsEnabled, forKey: .cloudWatchMetricsEnabled)
        }
        if let eventTaggingEnabled = eventTaggingEnabled {
            try encodeContainer.encode(eventTaggingEnabled, forKey: .eventTaggingEnabled)
        }
        if let limits = limits {
            try encodeContainer.encode(limits, forKey: .limits)
        }
        if let quietTime = quietTime {
            try encodeContainer.encode(quietTime, forKey: .quietTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let campaignHookDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CampaignHook.self, forKey: .campaignHook)
        campaignHook = campaignHookDecoded
        let cloudWatchMetricsEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .cloudWatchMetricsEnabled)
        cloudWatchMetricsEnabled = cloudWatchMetricsEnabledDecoded
        let eventTaggingEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .eventTaggingEnabled)
        eventTaggingEnabled = eventTaggingEnabledDecoded
        let limitsDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CampaignLimits.self, forKey: .limits)
        limits = limitsDecoded
        let quietTimeDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.QuietTime.self, forKey: .quietTime)
        quietTime = quietTimeDecoded
    }
}
