// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PinpointClientTypes.CampaignResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalTreatments = "AdditionalTreatments"
        case applicationId = "ApplicationId"
        case arn = "Arn"
        case creationDate = "CreationDate"
        case customDeliveryConfiguration = "CustomDeliveryConfiguration"
        case defaultState = "DefaultState"
        case description = "Description"
        case holdoutPercent = "HoldoutPercent"
        case hook = "Hook"
        case id = "Id"
        case isPaused = "IsPaused"
        case lastModifiedDate = "LastModifiedDate"
        case limits = "Limits"
        case messageConfiguration = "MessageConfiguration"
        case name = "Name"
        case priority = "Priority"
        case schedule = "Schedule"
        case segmentId = "SegmentId"
        case segmentVersion = "SegmentVersion"
        case state = "State"
        case templateConfiguration = "TemplateConfiguration"
        case treatmentDescription = "TreatmentDescription"
        case treatmentName = "TreatmentName"
        case version = "Version"
        case tags = "tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalTreatments = additionalTreatments {
            var additionalTreatmentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalTreatments)
            for listoftreatmentresource0 in additionalTreatments {
                try additionalTreatmentsContainer.encode(listoftreatmentresource0)
            }
        }
        if let applicationId = applicationId {
            try encodeContainer.encode(applicationId, forKey: .applicationId)
        }
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate, forKey: .creationDate)
        }
        if let customDeliveryConfiguration = customDeliveryConfiguration {
            try encodeContainer.encode(customDeliveryConfiguration, forKey: .customDeliveryConfiguration)
        }
        if let defaultState = defaultState {
            try encodeContainer.encode(defaultState, forKey: .defaultState)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let holdoutPercent = holdoutPercent {
            try encodeContainer.encode(holdoutPercent, forKey: .holdoutPercent)
        }
        if let hook = hook {
            try encodeContainer.encode(hook, forKey: .hook)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let isPaused = isPaused {
            try encodeContainer.encode(isPaused, forKey: .isPaused)
        }
        if let lastModifiedDate = lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate, forKey: .lastModifiedDate)
        }
        if let limits = limits {
            try encodeContainer.encode(limits, forKey: .limits)
        }
        if let messageConfiguration = messageConfiguration {
            try encodeContainer.encode(messageConfiguration, forKey: .messageConfiguration)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let priority = priority {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let schedule = schedule {
            try encodeContainer.encode(schedule, forKey: .schedule)
        }
        if let segmentId = segmentId {
            try encodeContainer.encode(segmentId, forKey: .segmentId)
        }
        if let segmentVersion = segmentVersion {
            try encodeContainer.encode(segmentVersion, forKey: .segmentVersion)
        }
        if let state = state {
            try encodeContainer.encode(state, forKey: .state)
        }
        if let templateConfiguration = templateConfiguration {
            try encodeContainer.encode(templateConfiguration, forKey: .templateConfiguration)
        }
        if let treatmentDescription = treatmentDescription {
            try encodeContainer.encode(treatmentDescription, forKey: .treatmentDescription)
        }
        if let treatmentName = treatmentName {
            try encodeContainer.encode(treatmentName, forKey: .treatmentName)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, mapof__string0) in tags {
                try tagsContainer.encode(mapof__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let additionalTreatmentsContainer = try containerValues.decodeIfPresent([PinpointClientTypes.TreatmentResource?].self, forKey: .additionalTreatments)
        var additionalTreatmentsDecoded0:[PinpointClientTypes.TreatmentResource]? = nil
        if let additionalTreatmentsContainer = additionalTreatmentsContainer {
            additionalTreatmentsDecoded0 = [PinpointClientTypes.TreatmentResource]()
            for structure0 in additionalTreatmentsContainer {
                if let structure0 = structure0 {
                    additionalTreatmentsDecoded0?.append(structure0)
                }
            }
        }
        additionalTreatments = additionalTreatmentsDecoded0
        let applicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let customDeliveryConfigurationDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CustomDeliveryConfiguration.self, forKey: .customDeliveryConfiguration)
        customDeliveryConfiguration = customDeliveryConfigurationDecoded
        let defaultStateDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CampaignState.self, forKey: .defaultState)
        defaultState = defaultStateDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let holdoutPercentDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .holdoutPercent)
        holdoutPercent = holdoutPercentDecoded
        let hookDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CampaignHook.self, forKey: .hook)
        hook = hookDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let isPausedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isPaused)
        isPaused = isPausedDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let limitsDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CampaignLimits.self, forKey: .limits)
        limits = limitsDecoded
        let messageConfigurationDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.MessageConfiguration.self, forKey: .messageConfiguration)
        messageConfiguration = messageConfigurationDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scheduleDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Schedule.self, forKey: .schedule)
        schedule = scheduleDecoded
        let segmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .segmentId)
        segmentId = segmentIdDecoded
        let segmentVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .segmentVersion)
        segmentVersion = segmentVersionDecoded
        let stateDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CampaignState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let templateConfigurationDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.TemplateConfiguration.self, forKey: .templateConfiguration)
        templateConfiguration = templateConfigurationDecoded
        let treatmentDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .treatmentDescription)
        treatmentDescription = treatmentDescriptionDecoded
        let treatmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .treatmentName)
        treatmentName = treatmentNameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .version)
        version = versionDecoded
        let priorityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .priority)
        priority = priorityDecoded
    }
}
