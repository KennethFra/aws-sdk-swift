// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension StartOutboundVoiceContactInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case answerMachineDetectionConfig = "AnswerMachineDetectionConfig"
        case attributes = "Attributes"
        case campaignId = "CampaignId"
        case clientToken = "ClientToken"
        case contactFlowId = "ContactFlowId"
        case destinationPhoneNumber = "DestinationPhoneNumber"
        case instanceId = "InstanceId"
        case queueId = "QueueId"
        case sourcePhoneNumber = "SourcePhoneNumber"
        case trafficType = "TrafficType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let answerMachineDetectionConfig = answerMachineDetectionConfig {
            try encodeContainer.encode(answerMachineDetectionConfig, forKey: .answerMachineDetectionConfig)
        }
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .attributes)
            for (dictKey0, attributes0) in attributes {
                try attributesContainer.encode(attributes0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let campaignId = campaignId {
            try encodeContainer.encode(campaignId, forKey: .campaignId)
        }
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let contactFlowId = contactFlowId {
            try encodeContainer.encode(contactFlowId, forKey: .contactFlowId)
        }
        if let destinationPhoneNumber = destinationPhoneNumber {
            try encodeContainer.encode(destinationPhoneNumber, forKey: .destinationPhoneNumber)
        }
        if let instanceId = instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
        if let queueId = queueId {
            try encodeContainer.encode(queueId, forKey: .queueId)
        }
        if let sourcePhoneNumber = sourcePhoneNumber {
            try encodeContainer.encode(sourcePhoneNumber, forKey: .sourcePhoneNumber)
        }
        if let trafficType = trafficType {
            try encodeContainer.encode(trafficType.rawValue, forKey: .trafficType)
        }
    }
}
