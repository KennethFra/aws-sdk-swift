// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateLocationHdfsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArns = "AgentArns"
        case authenticationType = "AuthenticationType"
        case blockSize = "BlockSize"
        case kerberosKeytab = "KerberosKeytab"
        case kerberosKrb5Conf = "KerberosKrb5Conf"
        case kerberosPrincipal = "KerberosPrincipal"
        case kmsKeyProviderUri = "KmsKeyProviderUri"
        case nameNodes = "NameNodes"
        case qopConfiguration = "QopConfiguration"
        case replicationFactor = "ReplicationFactor"
        case simpleUser = "SimpleUser"
        case subdirectory = "Subdirectory"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let agentArns = agentArns {
            var agentArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .agentArns)
            for agentarnlist0 in agentArns {
                try agentArnsContainer.encode(agentarnlist0)
            }
        }
        if let authenticationType = authenticationType {
            try encodeContainer.encode(authenticationType.rawValue, forKey: .authenticationType)
        }
        if let blockSize = blockSize {
            try encodeContainer.encode(blockSize, forKey: .blockSize)
        }
        if let kerberosKeytab = kerberosKeytab {
            try encodeContainer.encode(kerberosKeytab.base64EncodedString(), forKey: .kerberosKeytab)
        }
        if let kerberosKrb5Conf = kerberosKrb5Conf {
            try encodeContainer.encode(kerberosKrb5Conf.base64EncodedString(), forKey: .kerberosKrb5Conf)
        }
        if let kerberosPrincipal = kerberosPrincipal {
            try encodeContainer.encode(kerberosPrincipal, forKey: .kerberosPrincipal)
        }
        if let kmsKeyProviderUri = kmsKeyProviderUri {
            try encodeContainer.encode(kmsKeyProviderUri, forKey: .kmsKeyProviderUri)
        }
        if let nameNodes = nameNodes {
            var nameNodesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .nameNodes)
            for hdfsnamenodelist0 in nameNodes {
                try nameNodesContainer.encode(hdfsnamenodelist0)
            }
        }
        if let qopConfiguration = qopConfiguration {
            try encodeContainer.encode(qopConfiguration, forKey: .qopConfiguration)
        }
        if let replicationFactor = replicationFactor {
            try encodeContainer.encode(replicationFactor, forKey: .replicationFactor)
        }
        if let simpleUser = simpleUser {
            try encodeContainer.encode(simpleUser, forKey: .simpleUser)
        }
        if let subdirectory = subdirectory {
            try encodeContainer.encode(subdirectory, forKey: .subdirectory)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for inputtaglist0 in tags {
                try tagsContainer.encode(inputtaglist0)
            }
        }
    }
}
