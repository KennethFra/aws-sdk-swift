// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NetworkFirewallClientTypes.RuleGroupResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacity = "Capacity"
        case consumedCapacity = "ConsumedCapacity"
        case description = "Description"
        case numberOfAssociations = "NumberOfAssociations"
        case ruleGroupArn = "RuleGroupArn"
        case ruleGroupId = "RuleGroupId"
        case ruleGroupName = "RuleGroupName"
        case ruleGroupStatus = "RuleGroupStatus"
        case tags = "Tags"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let capacity = capacity {
            try encodeContainer.encode(capacity, forKey: .capacity)
        }
        if let consumedCapacity = consumedCapacity {
            try encodeContainer.encode(consumedCapacity, forKey: .consumedCapacity)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let numberOfAssociations = numberOfAssociations {
            try encodeContainer.encode(numberOfAssociations, forKey: .numberOfAssociations)
        }
        if let ruleGroupArn = ruleGroupArn {
            try encodeContainer.encode(ruleGroupArn, forKey: .ruleGroupArn)
        }
        if let ruleGroupId = ruleGroupId {
            try encodeContainer.encode(ruleGroupId, forKey: .ruleGroupId)
        }
        if let ruleGroupName = ruleGroupName {
            try encodeContainer.encode(ruleGroupName, forKey: .ruleGroupName)
        }
        if let ruleGroupStatus = ruleGroupStatus {
            try encodeContainer.encode(ruleGroupStatus.rawValue, forKey: .ruleGroupStatus)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleGroupArn)
        ruleGroupArn = ruleGroupArnDecoded
        let ruleGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleGroupName)
        ruleGroupName = ruleGroupNameDecoded
        let ruleGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleGroupId)
        ruleGroupId = ruleGroupIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let typeDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.RuleGroupType.self, forKey: .type)
        type = typeDecoded
        let capacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .capacity)
        capacity = capacityDecoded
        let ruleGroupStatusDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.ResourceStatus.self, forKey: .ruleGroupStatus)
        ruleGroupStatus = ruleGroupStatusDecoded
        let tagsContainer = try containerValues.decodeIfPresent([NetworkFirewallClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[NetworkFirewallClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [NetworkFirewallClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let consumedCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .consumedCapacity)
        consumedCapacity = consumedCapacityDecoded
        let numberOfAssociationsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfAssociations)
        numberOfAssociations = numberOfAssociationsDecoded
    }
}
