// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NetworkFirewallClientTypes.Header: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destination = "Destination"
        case destinationPort = "DestinationPort"
        case direction = "Direction"
        case `protocol` = "Protocol"
        case source = "Source"
        case sourcePort = "SourcePort"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destination = destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let destinationPort = destinationPort {
            try encodeContainer.encode(destinationPort, forKey: .destinationPort)
        }
        if let direction = direction {
            try encodeContainer.encode(direction.rawValue, forKey: .direction)
        }
        if let `protocol` = `protocol` {
            try encodeContainer.encode(`protocol`.rawValue, forKey: .`protocol`)
        }
        if let source = source {
            try encodeContainer.encode(source, forKey: .source)
        }
        if let sourcePort = sourcePort {
            try encodeContainer.encode(sourcePort, forKey: .sourcePort)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let protocolDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.StatefulRuleProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .source)
        source = sourceDecoded
        let sourcePortDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourcePort)
        sourcePort = sourcePortDecoded
        let directionDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.StatefulRuleDirection.self, forKey: .direction)
        direction = directionDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destination)
        destination = destinationDecoded
        let destinationPortDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationPort)
        destinationPort = destinationPortDecoded
    }
}
