// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GreengrassClientTypes.GroupVersion: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectorDefinitionVersionArn = "ConnectorDefinitionVersionArn"
        case coreDefinitionVersionArn = "CoreDefinitionVersionArn"
        case deviceDefinitionVersionArn = "DeviceDefinitionVersionArn"
        case functionDefinitionVersionArn = "FunctionDefinitionVersionArn"
        case loggerDefinitionVersionArn = "LoggerDefinitionVersionArn"
        case resourceDefinitionVersionArn = "ResourceDefinitionVersionArn"
        case subscriptionDefinitionVersionArn = "SubscriptionDefinitionVersionArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectorDefinitionVersionArn = connectorDefinitionVersionArn {
            try encodeContainer.encode(connectorDefinitionVersionArn, forKey: .connectorDefinitionVersionArn)
        }
        if let coreDefinitionVersionArn = coreDefinitionVersionArn {
            try encodeContainer.encode(coreDefinitionVersionArn, forKey: .coreDefinitionVersionArn)
        }
        if let deviceDefinitionVersionArn = deviceDefinitionVersionArn {
            try encodeContainer.encode(deviceDefinitionVersionArn, forKey: .deviceDefinitionVersionArn)
        }
        if let functionDefinitionVersionArn = functionDefinitionVersionArn {
            try encodeContainer.encode(functionDefinitionVersionArn, forKey: .functionDefinitionVersionArn)
        }
        if let loggerDefinitionVersionArn = loggerDefinitionVersionArn {
            try encodeContainer.encode(loggerDefinitionVersionArn, forKey: .loggerDefinitionVersionArn)
        }
        if let resourceDefinitionVersionArn = resourceDefinitionVersionArn {
            try encodeContainer.encode(resourceDefinitionVersionArn, forKey: .resourceDefinitionVersionArn)
        }
        if let subscriptionDefinitionVersionArn = subscriptionDefinitionVersionArn {
            try encodeContainer.encode(subscriptionDefinitionVersionArn, forKey: .subscriptionDefinitionVersionArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectorDefinitionVersionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectorDefinitionVersionArn)
        connectorDefinitionVersionArn = connectorDefinitionVersionArnDecoded
        let coreDefinitionVersionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .coreDefinitionVersionArn)
        coreDefinitionVersionArn = coreDefinitionVersionArnDecoded
        let deviceDefinitionVersionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceDefinitionVersionArn)
        deviceDefinitionVersionArn = deviceDefinitionVersionArnDecoded
        let functionDefinitionVersionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .functionDefinitionVersionArn)
        functionDefinitionVersionArn = functionDefinitionVersionArnDecoded
        let loggerDefinitionVersionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loggerDefinitionVersionArn)
        loggerDefinitionVersionArn = loggerDefinitionVersionArnDecoded
        let resourceDefinitionVersionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceDefinitionVersionArn)
        resourceDefinitionVersionArn = resourceDefinitionVersionArnDecoded
        let subscriptionDefinitionVersionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subscriptionDefinitionVersionArn)
        subscriptionDefinitionVersionArn = subscriptionDefinitionVersionArnDecoded
    }
}
