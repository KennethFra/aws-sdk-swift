// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsSnsTopicDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kmsMasterKeyId = "KmsMasterKeyId"
        case owner = "Owner"
        case subscription = "Subscription"
        case topicName = "TopicName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let kmsMasterKeyId = kmsMasterKeyId {
            try encodeContainer.encode(kmsMasterKeyId, forKey: .kmsMasterKeyId)
        }
        if let owner = owner {
            try encodeContainer.encode(owner, forKey: .owner)
        }
        if let subscription = subscription {
            var subscriptionContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subscription)
            for awssnstopicsubscriptionlist0 in subscription {
                try subscriptionContainer.encode(awssnstopicsubscriptionlist0)
            }
        }
        if let topicName = topicName {
            try encodeContainer.encode(topicName, forKey: .topicName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let kmsMasterKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsMasterKeyId)
        kmsMasterKeyId = kmsMasterKeyIdDecoded
        let subscriptionContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsSnsTopicSubscription?].self, forKey: .subscription)
        var subscriptionDecoded0:[SecurityHubClientTypes.AwsSnsTopicSubscription]? = nil
        if let subscriptionContainer = subscriptionContainer {
            subscriptionDecoded0 = [SecurityHubClientTypes.AwsSnsTopicSubscription]()
            for structure0 in subscriptionContainer {
                if let structure0 = structure0 {
                    subscriptionDecoded0?.append(structure0)
                }
            }
        }
        subscription = subscriptionDecoded0
        let topicNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicName)
        topicName = topicNameDecoded
        let ownerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .owner)
        owner = ownerDecoded
    }
}
