// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MemoryDbClientTypes.Cluster: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aCLName = "ACLName"
        case aRN = "ARN"
        case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
        case availabilityMode = "AvailabilityMode"
        case clusterEndpoint = "ClusterEndpoint"
        case description = "Description"
        case enginePatchVersion = "EnginePatchVersion"
        case engineVersion = "EngineVersion"
        case kmsKeyId = "KmsKeyId"
        case maintenanceWindow = "MaintenanceWindow"
        case name = "Name"
        case nodeType = "NodeType"
        case numberOfShards = "NumberOfShards"
        case parameterGroupName = "ParameterGroupName"
        case parameterGroupStatus = "ParameterGroupStatus"
        case pendingUpdates = "PendingUpdates"
        case securityGroups = "SecurityGroups"
        case shards = "Shards"
        case snapshotRetentionLimit = "SnapshotRetentionLimit"
        case snapshotWindow = "SnapshotWindow"
        case snsTopicArn = "SnsTopicArn"
        case snsTopicStatus = "SnsTopicStatus"
        case status = "Status"
        case subnetGroupName = "SubnetGroupName"
        case tLSEnabled = "TLSEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aCLName = aCLName {
            try encodeContainer.encode(aCLName, forKey: .aCLName)
        }
        if let aRN = aRN {
            try encodeContainer.encode(aRN, forKey: .aRN)
        }
        if let autoMinorVersionUpgrade = autoMinorVersionUpgrade {
            try encodeContainer.encode(autoMinorVersionUpgrade, forKey: .autoMinorVersionUpgrade)
        }
        if let availabilityMode = availabilityMode {
            try encodeContainer.encode(availabilityMode.rawValue, forKey: .availabilityMode)
        }
        if let clusterEndpoint = clusterEndpoint {
            try encodeContainer.encode(clusterEndpoint, forKey: .clusterEndpoint)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let enginePatchVersion = enginePatchVersion {
            try encodeContainer.encode(enginePatchVersion, forKey: .enginePatchVersion)
        }
        if let engineVersion = engineVersion {
            try encodeContainer.encode(engineVersion, forKey: .engineVersion)
        }
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let maintenanceWindow = maintenanceWindow {
            try encodeContainer.encode(maintenanceWindow, forKey: .maintenanceWindow)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let nodeType = nodeType {
            try encodeContainer.encode(nodeType, forKey: .nodeType)
        }
        if let numberOfShards = numberOfShards {
            try encodeContainer.encode(numberOfShards, forKey: .numberOfShards)
        }
        if let parameterGroupName = parameterGroupName {
            try encodeContainer.encode(parameterGroupName, forKey: .parameterGroupName)
        }
        if let parameterGroupStatus = parameterGroupStatus {
            try encodeContainer.encode(parameterGroupStatus, forKey: .parameterGroupStatus)
        }
        if let pendingUpdates = pendingUpdates {
            try encodeContainer.encode(pendingUpdates, forKey: .pendingUpdates)
        }
        if let securityGroups = securityGroups {
            var securityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroups)
            for securitygroupmembershiplist0 in securityGroups {
                try securityGroupsContainer.encode(securitygroupmembershiplist0)
            }
        }
        if let shards = shards {
            var shardsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .shards)
            for shardlist0 in shards {
                try shardsContainer.encode(shardlist0)
            }
        }
        if let snapshotRetentionLimit = snapshotRetentionLimit {
            try encodeContainer.encode(snapshotRetentionLimit, forKey: .snapshotRetentionLimit)
        }
        if let snapshotWindow = snapshotWindow {
            try encodeContainer.encode(snapshotWindow, forKey: .snapshotWindow)
        }
        if let snsTopicArn = snsTopicArn {
            try encodeContainer.encode(snsTopicArn, forKey: .snsTopicArn)
        }
        if let snsTopicStatus = snsTopicStatus {
            try encodeContainer.encode(snsTopicStatus, forKey: .snsTopicStatus)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let subnetGroupName = subnetGroupName {
            try encodeContainer.encode(subnetGroupName, forKey: .subnetGroupName)
        }
        if let tLSEnabled = tLSEnabled {
            try encodeContainer.encode(tLSEnabled, forKey: .tLSEnabled)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let pendingUpdatesDecoded = try containerValues.decodeIfPresent(MemoryDbClientTypes.ClusterPendingUpdates.self, forKey: .pendingUpdates)
        pendingUpdates = pendingUpdatesDecoded
        let numberOfShardsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfShards)
        numberOfShards = numberOfShardsDecoded
        let shardsContainer = try containerValues.decodeIfPresent([MemoryDbClientTypes.Shard?].self, forKey: .shards)
        var shardsDecoded0:[MemoryDbClientTypes.Shard]? = nil
        if let shardsContainer = shardsContainer {
            shardsDecoded0 = [MemoryDbClientTypes.Shard]()
            for structure0 in shardsContainer {
                if let structure0 = structure0 {
                    shardsDecoded0?.append(structure0)
                }
            }
        }
        shards = shardsDecoded0
        let availabilityModeDecoded = try containerValues.decodeIfPresent(MemoryDbClientTypes.AZStatus.self, forKey: .availabilityMode)
        availabilityMode = availabilityModeDecoded
        let clusterEndpointDecoded = try containerValues.decodeIfPresent(MemoryDbClientTypes.Endpoint.self, forKey: .clusterEndpoint)
        clusterEndpoint = clusterEndpointDecoded
        let nodeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeType)
        nodeType = nodeTypeDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let enginePatchVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .enginePatchVersion)
        enginePatchVersion = enginePatchVersionDecoded
        let parameterGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterGroupName)
        parameterGroupName = parameterGroupNameDecoded
        let parameterGroupStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterGroupStatus)
        parameterGroupStatus = parameterGroupStatusDecoded
        let securityGroupsContainer = try containerValues.decodeIfPresent([MemoryDbClientTypes.SecurityGroupMembership?].self, forKey: .securityGroups)
        var securityGroupsDecoded0:[MemoryDbClientTypes.SecurityGroupMembership]? = nil
        if let securityGroupsContainer = securityGroupsContainer {
            securityGroupsDecoded0 = [MemoryDbClientTypes.SecurityGroupMembership]()
            for structure0 in securityGroupsContainer {
                if let structure0 = structure0 {
                    securityGroupsDecoded0?.append(structure0)
                }
            }
        }
        securityGroups = securityGroupsDecoded0
        let subnetGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetGroupName)
        subnetGroupName = subnetGroupNameDecoded
        let tLSEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .tLSEnabled)
        tLSEnabled = tLSEnabledDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let aRNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aRN)
        aRN = aRNDecoded
        let snsTopicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snsTopicArn)
        snsTopicArn = snsTopicArnDecoded
        let snsTopicStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snsTopicStatus)
        snsTopicStatus = snsTopicStatusDecoded
        let snapshotRetentionLimitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .snapshotRetentionLimit)
        snapshotRetentionLimit = snapshotRetentionLimitDecoded
        let maintenanceWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maintenanceWindow)
        maintenanceWindow = maintenanceWindowDecoded
        let snapshotWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotWindow)
        snapshotWindow = snapshotWindowDecoded
        let aCLNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aCLName)
        aCLName = aCLNameDecoded
        let autoMinorVersionUpgradeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .autoMinorVersionUpgrade)
        autoMinorVersionUpgrade = autoMinorVersionUpgradeDecoded
    }
}
