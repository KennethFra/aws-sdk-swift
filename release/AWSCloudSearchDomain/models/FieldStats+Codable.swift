// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CloudSearchDomainClientTypes.FieldStats: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case count
        case max
        case mean
        case min
        case missing
        case stddev
        case sum
        case sumOfSquares
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if count != 0 {
            try encodeContainer.encode(count, forKey: .count)
        }
        if let max = max {
            try encodeContainer.encode(max, forKey: .max)
        }
        if let mean = mean {
            try encodeContainer.encode(mean, forKey: .mean)
        }
        if let min = min {
            try encodeContainer.encode(min, forKey: .min)
        }
        if missing != 0 {
            try encodeContainer.encode(missing, forKey: .missing)
        }
        if stddev != 0.0 {
            try encodeContainer.encode(stddev, forKey: .stddev)
        }
        if sum != 0.0 {
            try encodeContainer.encode(sum, forKey: .sum)
        }
        if sumOfSquares != 0.0 {
            try encodeContainer.encode(sumOfSquares, forKey: .sumOfSquares)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .min)
        min = minDecoded
        let maxDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .max)
        max = maxDecoded
        let countDecoded = try containerValues.decode(Swift.Int.self, forKey: .count)
        count = countDecoded
        let missingDecoded = try containerValues.decode(Swift.Int.self, forKey: .missing)
        missing = missingDecoded
        let sumDecoded = try containerValues.decode(Swift.Double.self, forKey: .sum)
        sum = sumDecoded
        let sumOfSquaresDecoded = try containerValues.decode(Swift.Double.self, forKey: .sumOfSquares)
        sumOfSquares = sumOfSquaresDecoded
        let meanDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mean)
        mean = meanDecoded
        let stddevDecoded = try containerValues.decode(Swift.Double.self, forKey: .stddev)
        stddev = stddevDecoded
    }
}
