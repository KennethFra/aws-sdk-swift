// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlueClientTypes.MLTransform: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdOn = "CreatedOn"
        case description = "Description"
        case evaluationMetrics = "EvaluationMetrics"
        case glueVersion = "GlueVersion"
        case inputRecordTables = "InputRecordTables"
        case labelCount = "LabelCount"
        case lastModifiedOn = "LastModifiedOn"
        case maxCapacity = "MaxCapacity"
        case maxRetries = "MaxRetries"
        case name = "Name"
        case numberOfWorkers = "NumberOfWorkers"
        case parameters = "Parameters"
        case role = "Role"
        case schema = "Schema"
        case status = "Status"
        case timeout = "Timeout"
        case transformEncryption = "TransformEncryption"
        case transformId = "TransformId"
        case workerType = "WorkerType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdOn = createdOn {
            try encodeContainer.encode(createdOn.timeIntervalSince1970, forKey: .createdOn)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let evaluationMetrics = evaluationMetrics {
            try encodeContainer.encode(evaluationMetrics, forKey: .evaluationMetrics)
        }
        if let glueVersion = glueVersion {
            try encodeContainer.encode(glueVersion, forKey: .glueVersion)
        }
        if let inputRecordTables = inputRecordTables {
            var inputRecordTablesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputRecordTables)
            for gluetables0 in inputRecordTables {
                try inputRecordTablesContainer.encode(gluetables0)
            }
        }
        if labelCount != 0 {
            try encodeContainer.encode(labelCount, forKey: .labelCount)
        }
        if let lastModifiedOn = lastModifiedOn {
            try encodeContainer.encode(lastModifiedOn.timeIntervalSince1970, forKey: .lastModifiedOn)
        }
        if let maxCapacity = maxCapacity {
            try encodeContainer.encode(maxCapacity, forKey: .maxCapacity)
        }
        if let maxRetries = maxRetries {
            try encodeContainer.encode(maxRetries, forKey: .maxRetries)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let numberOfWorkers = numberOfWorkers {
            try encodeContainer.encode(numberOfWorkers, forKey: .numberOfWorkers)
        }
        if let parameters = parameters {
            try encodeContainer.encode(parameters, forKey: .parameters)
        }
        if let role = role {
            try encodeContainer.encode(role, forKey: .role)
        }
        if let schema = schema {
            var schemaContainer = encodeContainer.nestedUnkeyedContainer(forKey: .schema)
            for transformschema0 in schema {
                try schemaContainer.encode(transformschema0)
            }
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let timeout = timeout {
            try encodeContainer.encode(timeout, forKey: .timeout)
        }
        if let transformEncryption = transformEncryption {
            try encodeContainer.encode(transformEncryption, forKey: .transformEncryption)
        }
        if let transformId = transformId {
            try encodeContainer.encode(transformId, forKey: .transformId)
        }
        if let workerType = workerType {
            try encodeContainer.encode(workerType.rawValue, forKey: .workerType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transformIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transformId)
        transformId = transformIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TransformStatusType.self, forKey: .status)
        status = statusDecoded
        let createdOnDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdOn)
        createdOn = createdOnDecoded
        let lastModifiedOnDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedOn)
        lastModifiedOn = lastModifiedOnDecoded
        let inputRecordTablesContainer = try containerValues.decodeIfPresent([GlueClientTypes.GlueTable?].self, forKey: .inputRecordTables)
        var inputRecordTablesDecoded0:[GlueClientTypes.GlueTable]? = nil
        if let inputRecordTablesContainer = inputRecordTablesContainer {
            inputRecordTablesDecoded0 = [GlueClientTypes.GlueTable]()
            for structure0 in inputRecordTablesContainer {
                if let structure0 = structure0 {
                    inputRecordTablesDecoded0?.append(structure0)
                }
            }
        }
        inputRecordTables = inputRecordTablesDecoded0
        let parametersDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TransformParameters.self, forKey: .parameters)
        parameters = parametersDecoded
        let evaluationMetricsDecoded = try containerValues.decodeIfPresent(GlueClientTypes.EvaluationMetrics.self, forKey: .evaluationMetrics)
        evaluationMetrics = evaluationMetricsDecoded
        let labelCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .labelCount)
        labelCount = labelCountDecoded
        let schemaContainer = try containerValues.decodeIfPresent([GlueClientTypes.SchemaColumn?].self, forKey: .schema)
        var schemaDecoded0:[GlueClientTypes.SchemaColumn]? = nil
        if let schemaContainer = schemaContainer {
            schemaDecoded0 = [GlueClientTypes.SchemaColumn]()
            for structure0 in schemaContainer {
                if let structure0 = structure0 {
                    schemaDecoded0?.append(structure0)
                }
            }
        }
        schema = schemaDecoded0
        let roleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .role)
        role = roleDecoded
        let glueVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .glueVersion)
        glueVersion = glueVersionDecoded
        let maxCapacityDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .maxCapacity)
        maxCapacity = maxCapacityDecoded
        let workerTypeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.WorkerType.self, forKey: .workerType)
        workerType = workerTypeDecoded
        let numberOfWorkersDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfWorkers)
        numberOfWorkers = numberOfWorkersDecoded
        let timeoutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeout)
        timeout = timeoutDecoded
        let maxRetriesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRetries)
        maxRetries = maxRetriesDecoded
        let transformEncryptionDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TransformEncryption.self, forKey: .transformEncryption)
        transformEncryption = transformEncryptionDecoded
    }
}
