// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ResiliencehubClientTypes.App: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appArn
        case complianceStatus
        case creationTime
        case description
        case lastAppComplianceEvaluationTime
        case lastResiliencyScoreEvaluationTime
        case name
        case policyArn
        case resiliencyScore
        case status
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appArn = appArn {
            try encodeContainer.encode(appArn, forKey: .appArn)
        }
        if let complianceStatus = complianceStatus {
            try encodeContainer.encode(complianceStatus.rawValue, forKey: .complianceStatus)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let lastAppComplianceEvaluationTime = lastAppComplianceEvaluationTime {
            try encodeContainer.encode(lastAppComplianceEvaluationTime.timeIntervalSince1970, forKey: .lastAppComplianceEvaluationTime)
        }
        if let lastResiliencyScoreEvaluationTime = lastResiliencyScoreEvaluationTime {
            try encodeContainer.encode(lastResiliencyScoreEvaluationTime.timeIntervalSince1970, forKey: .lastResiliencyScoreEvaluationTime)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let policyArn = policyArn {
            try encodeContainer.encode(policyArn, forKey: .policyArn)
        }
        if resiliencyScore != 0.0 {
            try encodeContainer.encode(resiliencyScore, forKey: .resiliencyScore)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let appArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .appArn)
        appArn = appArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let policyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyArn)
        policyArn = policyArnDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ResiliencehubClientTypes.AppStatusType.self, forKey: .status)
        status = statusDecoded
        let complianceStatusDecoded = try containerValues.decodeIfPresent(ResiliencehubClientTypes.AppComplianceStatusType.self, forKey: .complianceStatus)
        complianceStatus = complianceStatusDecoded
        let lastAppComplianceEvaluationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastAppComplianceEvaluationTime)
        lastAppComplianceEvaluationTime = lastAppComplianceEvaluationTimeDecoded
        let resiliencyScoreDecoded = try containerValues.decode(Swift.Double.self, forKey: .resiliencyScore)
        resiliencyScore = resiliencyScoreDecoded
        let lastResiliencyScoreEvaluationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastResiliencyScoreEvaluationTime)
        lastResiliencyScoreEvaluationTime = lastResiliencyScoreEvaluationTimeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
