// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CalculateRouteInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case carModeOptions = "CarModeOptions"
        case departNow = "DepartNow"
        case departurePosition = "DeparturePosition"
        case departureTime = "DepartureTime"
        case destinationPosition = "DestinationPosition"
        case distanceUnit = "DistanceUnit"
        case includeLegGeometry = "IncludeLegGeometry"
        case travelMode = "TravelMode"
        case truckModeOptions = "TruckModeOptions"
        case waypointPositions = "WaypointPositions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let carModeOptions = carModeOptions {
            try encodeContainer.encode(carModeOptions, forKey: .carModeOptions)
        }
        if let departNow = departNow {
            try encodeContainer.encode(departNow, forKey: .departNow)
        }
        if let departurePosition = departurePosition {
            var departurePositionContainer = encodeContainer.nestedUnkeyedContainer(forKey: .departurePosition)
            for position0 in departurePosition {
                try departurePositionContainer.encode(position0)
            }
        }
        if let departureTime = departureTime {
            try encodeContainer.encode(departureTime.timeIntervalSince1970, forKey: .departureTime)
        }
        if let destinationPosition = destinationPosition {
            var destinationPositionContainer = encodeContainer.nestedUnkeyedContainer(forKey: .destinationPosition)
            for position0 in destinationPosition {
                try destinationPositionContainer.encode(position0)
            }
        }
        if let distanceUnit = distanceUnit {
            try encodeContainer.encode(distanceUnit.rawValue, forKey: .distanceUnit)
        }
        if let includeLegGeometry = includeLegGeometry {
            try encodeContainer.encode(includeLegGeometry, forKey: .includeLegGeometry)
        }
        if let travelMode = travelMode {
            try encodeContainer.encode(travelMode.rawValue, forKey: .travelMode)
        }
        if let truckModeOptions = truckModeOptions {
            try encodeContainer.encode(truckModeOptions, forKey: .truckModeOptions)
        }
        if let waypointPositions = waypointPositions {
            var waypointPositionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .waypointPositions)
            for waypointpositionlist0 in waypointPositions {
                var waypointpositionlist0Container = waypointPositionsContainer.nestedUnkeyedContainer()
                for position1 in waypointpositionlist0 {
                    try waypointpositionlist0Container.encode(position1)
                }
            }
        }
    }
}
