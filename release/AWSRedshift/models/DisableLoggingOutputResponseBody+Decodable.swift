// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DisableLoggingOutputResponseBody: Swift.Equatable {
    let loggingEnabled: Swift.Bool
    let bucketName: Swift.String?
    let s3KeyPrefix: Swift.String?
    let lastSuccessfulDeliveryTime: ClientRuntime.Date?
    let lastFailureTime: ClientRuntime.Date?
    let lastFailureMessage: Swift.String?
}

extension DisableLoggingOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketName = "BucketName"
        case lastFailureMessage = "LastFailureMessage"
        case lastFailureTime = "LastFailureTime"
        case lastSuccessfulDeliveryTime = "LastSuccessfulDeliveryTime"
        case loggingEnabled = "LoggingEnabled"
        case s3KeyPrefix = "S3KeyPrefix"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DisableLoggingResult"))
        let loggingEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .loggingEnabled)
        loggingEnabled = loggingEnabledDecoded
        let bucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketName)
        bucketName = bucketNameDecoded
        let s3KeyPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3KeyPrefix)
        s3KeyPrefix = s3KeyPrefixDecoded
        let lastSuccessfulDeliveryTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastSuccessfulDeliveryTime)
        var lastSuccessfulDeliveryTimeBuffer:ClientRuntime.Date? = nil
        if let lastSuccessfulDeliveryTimeDecoded = lastSuccessfulDeliveryTimeDecoded {
            lastSuccessfulDeliveryTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(lastSuccessfulDeliveryTimeDecoded, format: .dateTime)
        }
        lastSuccessfulDeliveryTime = lastSuccessfulDeliveryTimeBuffer
        let lastFailureTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastFailureTime)
        var lastFailureTimeBuffer:ClientRuntime.Date? = nil
        if let lastFailureTimeDecoded = lastFailureTimeDecoded {
            lastFailureTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(lastFailureTimeDecoded, format: .dateTime)
        }
        lastFailureTime = lastFailureTimeBuffer
        let lastFailureMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastFailureMessage)
        lastFailureMessage = lastFailureMessageDecoded
    }
}
