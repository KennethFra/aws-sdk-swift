// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LicenseManagerClientTypes.LicenseOperationFailure: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorMessage = "ErrorMessage"
        case failureTime = "FailureTime"
        case metadataList = "MetadataList"
        case operationName = "OperationName"
        case operationRequestedBy = "OperationRequestedBy"
        case resourceArn = "ResourceArn"
        case resourceOwnerId = "ResourceOwnerId"
        case resourceType = "ResourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorMessage = errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let failureTime = failureTime {
            try encodeContainer.encode(failureTime.timeIntervalSince1970, forKey: .failureTime)
        }
        if let metadataList = metadataList {
            var metadataListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .metadataList)
            for metadatalist0 in metadataList {
                try metadataListContainer.encode(metadatalist0)
            }
        }
        if let operationName = operationName {
            try encodeContainer.encode(operationName, forKey: .operationName)
        }
        if let operationRequestedBy = operationRequestedBy {
            try encodeContainer.encode(operationRequestedBy, forKey: .operationRequestedBy)
        }
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let resourceOwnerId = resourceOwnerId {
            try encodeContainer.encode(resourceOwnerId, forKey: .resourceOwnerId)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LicenseManagerClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let failureTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .failureTime)
        failureTime = failureTimeDecoded
        let operationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operationName)
        operationName = operationNameDecoded
        let resourceOwnerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceOwnerId)
        resourceOwnerId = resourceOwnerIdDecoded
        let operationRequestedByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operationRequestedBy)
        operationRequestedBy = operationRequestedByDecoded
        let metadataListContainer = try containerValues.decodeIfPresent([LicenseManagerClientTypes.Metadata?].self, forKey: .metadataList)
        var metadataListDecoded0:[LicenseManagerClientTypes.Metadata]? = nil
        if let metadataListContainer = metadataListContainer {
            metadataListDecoded0 = [LicenseManagerClientTypes.Metadata]()
            for structure0 in metadataListContainer {
                if let structure0 = structure0 {
                    metadataListDecoded0?.append(structure0)
                }
            }
        }
        metadataList = metadataListDecoded0
    }
}
