// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BatchClientTypes.JobSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arrayProperties
        case container
        case createdAt
        case jobArn
        case jobDefinition
        case jobId
        case jobName
        case nodeProperties
        case startedAt
        case status
        case statusReason
        case stoppedAt
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arrayProperties = arrayProperties {
            try encodeContainer.encode(arrayProperties, forKey: .arrayProperties)
        }
        if let container = container {
            try encodeContainer.encode(container, forKey: .container)
        }
        if createdAt != 0 {
            try encodeContainer.encode(createdAt, forKey: .createdAt)
        }
        if let jobArn = jobArn {
            try encodeContainer.encode(jobArn, forKey: .jobArn)
        }
        if let jobDefinition = jobDefinition {
            try encodeContainer.encode(jobDefinition, forKey: .jobDefinition)
        }
        if let jobId = jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let jobName = jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let nodeProperties = nodeProperties {
            try encodeContainer.encode(nodeProperties, forKey: .nodeProperties)
        }
        if startedAt != 0 {
            try encodeContainer.encode(startedAt, forKey: .startedAt)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusReason = statusReason {
            try encodeContainer.encode(statusReason, forKey: .statusReason)
        }
        if stoppedAt != 0 {
            try encodeContainer.encode(stoppedAt, forKey: .stoppedAt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobArn)
        jobArn = jobArnDecoded
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let createdAtDecoded = try containerValues.decode(Swift.Int.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let statusDecoded = try containerValues.decodeIfPresent(BatchClientTypes.JobStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let startedAtDecoded = try containerValues.decode(Swift.Int.self, forKey: .startedAt)
        startedAt = startedAtDecoded
        let stoppedAtDecoded = try containerValues.decode(Swift.Int.self, forKey: .stoppedAt)
        stoppedAt = stoppedAtDecoded
        let containerDecoded = try containerValues.decodeIfPresent(BatchClientTypes.ContainerSummary.self, forKey: .container)
        container = containerDecoded
        let arrayPropertiesDecoded = try containerValues.decodeIfPresent(BatchClientTypes.ArrayPropertiesSummary.self, forKey: .arrayProperties)
        arrayProperties = arrayPropertiesDecoded
        let nodePropertiesDecoded = try containerValues.decodeIfPresent(BatchClientTypes.NodePropertiesSummary.self, forKey: .nodeProperties)
        nodeProperties = nodePropertiesDecoded
        let jobDefinitionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinition)
        jobDefinition = jobDefinitionDecoded
    }
}
