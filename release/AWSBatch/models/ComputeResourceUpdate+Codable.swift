// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BatchClientTypes.ComputeResourceUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case desiredvCpus
        case maxvCpus
        case minvCpus
        case securityGroupIds
        case subnets
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if desiredvCpus != 0 {
            try encodeContainer.encode(desiredvCpus, forKey: .desiredvCpus)
        }
        if maxvCpus != 0 {
            try encodeContainer.encode(maxvCpus, forKey: .maxvCpus)
        }
        if minvCpus != 0 {
            try encodeContainer.encode(minvCpus, forKey: .minvCpus)
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for stringlist0 in securityGroupIds {
                try securityGroupIdsContainer.encode(stringlist0)
            }
        }
        if let subnets = subnets {
            var subnetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnets)
            for stringlist0 in subnets {
                try subnetsContainer.encode(stringlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minvCpusDecoded = try containerValues.decode(Swift.Int.self, forKey: .minvCpus)
        minvCpus = minvCpusDecoded
        let maxvCpusDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxvCpus)
        maxvCpus = maxvCpusDecoded
        let desiredvCpusDecoded = try containerValues.decode(Swift.Int.self, forKey: .desiredvCpus)
        desiredvCpus = desiredvCpusDecoded
        let subnetsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnets)
        var subnetsDecoded0:[Swift.String]? = nil
        if let subnetsContainer = subnetsContainer {
            subnetsDecoded0 = [Swift.String]()
            for string0 in subnetsContainer {
                if let string0 = string0 {
                    subnetsDecoded0?.append(string0)
                }
            }
        }
        subnets = subnetsDecoded0
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
    }
}
