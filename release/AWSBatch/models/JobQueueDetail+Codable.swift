// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BatchClientTypes.JobQueueDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeEnvironmentOrder
        case jobQueueArn
        case jobQueueName
        case priority
        case schedulingPolicyArn
        case state
        case status
        case statusReason
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let computeEnvironmentOrder = computeEnvironmentOrder {
            var computeEnvironmentOrderContainer = encodeContainer.nestedUnkeyedContainer(forKey: .computeEnvironmentOrder)
            for computeenvironmentorders0 in computeEnvironmentOrder {
                try computeEnvironmentOrderContainer.encode(computeenvironmentorders0)
            }
        }
        if let jobQueueArn = jobQueueArn {
            try encodeContainer.encode(jobQueueArn, forKey: .jobQueueArn)
        }
        if let jobQueueName = jobQueueName {
            try encodeContainer.encode(jobQueueName, forKey: .jobQueueName)
        }
        if priority != 0 {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let schedulingPolicyArn = schedulingPolicyArn {
            try encodeContainer.encode(schedulingPolicyArn, forKey: .schedulingPolicyArn)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusReason = statusReason {
            try encodeContainer.encode(statusReason, forKey: .statusReason)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagristagsmap0) in tags {
                try tagsContainer.encode(tagristagsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobQueueNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobQueueName)
        jobQueueName = jobQueueNameDecoded
        let jobQueueArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobQueueArn)
        jobQueueArn = jobQueueArnDecoded
        let stateDecoded = try containerValues.decodeIfPresent(BatchClientTypes.JQState.self, forKey: .state)
        state = stateDecoded
        let schedulingPolicyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schedulingPolicyArn)
        schedulingPolicyArn = schedulingPolicyArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(BatchClientTypes.JQStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let priorityDecoded = try containerValues.decode(Swift.Int.self, forKey: .priority)
        priority = priorityDecoded
        let computeEnvironmentOrderContainer = try containerValues.decodeIfPresent([BatchClientTypes.ComputeEnvironmentOrder?].self, forKey: .computeEnvironmentOrder)
        var computeEnvironmentOrderDecoded0:[BatchClientTypes.ComputeEnvironmentOrder]? = nil
        if let computeEnvironmentOrderContainer = computeEnvironmentOrderContainer {
            computeEnvironmentOrderDecoded0 = [BatchClientTypes.ComputeEnvironmentOrder]()
            for structure0 in computeEnvironmentOrderContainer {
                if let structure0 = structure0 {
                    computeEnvironmentOrderDecoded0?.append(structure0)
                }
            }
        }
        computeEnvironmentOrder = computeEnvironmentOrderDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
