// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AuditManagerClientTypes.AssessmentFrameworkShareRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case comment
        case complianceType
        case creationTime
        case customControlsCount
        case destinationAccount
        case destinationRegion
        case expirationTime
        case frameworkDescription
        case frameworkId
        case frameworkName
        case id
        case lastUpdated
        case sourceAccount
        case standardControlsCount
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let comment = comment {
            try encodeContainer.encode(comment, forKey: .comment)
        }
        if let complianceType = complianceType {
            try encodeContainer.encode(complianceType, forKey: .complianceType)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let customControlsCount = customControlsCount {
            try encodeContainer.encode(customControlsCount, forKey: .customControlsCount)
        }
        if let destinationAccount = destinationAccount {
            try encodeContainer.encode(destinationAccount, forKey: .destinationAccount)
        }
        if let destinationRegion = destinationRegion {
            try encodeContainer.encode(destinationRegion, forKey: .destinationRegion)
        }
        if let expirationTime = expirationTime {
            try encodeContainer.encode(expirationTime.timeIntervalSince1970, forKey: .expirationTime)
        }
        if let frameworkDescription = frameworkDescription {
            try encodeContainer.encode(frameworkDescription, forKey: .frameworkDescription)
        }
        if let frameworkId = frameworkId {
            try encodeContainer.encode(frameworkId, forKey: .frameworkId)
        }
        if let frameworkName = frameworkName {
            try encodeContainer.encode(frameworkName, forKey: .frameworkName)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let lastUpdated = lastUpdated {
            try encodeContainer.encode(lastUpdated.timeIntervalSince1970, forKey: .lastUpdated)
        }
        if let sourceAccount = sourceAccount {
            try encodeContainer.encode(sourceAccount, forKey: .sourceAccount)
        }
        if let standardControlsCount = standardControlsCount {
            try encodeContainer.encode(standardControlsCount, forKey: .standardControlsCount)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let frameworkIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .frameworkId)
        frameworkId = frameworkIdDecoded
        let frameworkNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .frameworkName)
        frameworkName = frameworkNameDecoded
        let frameworkDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .frameworkDescription)
        frameworkDescription = frameworkDescriptionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(AuditManagerClientTypes.ShareRequestStatus.self, forKey: .status)
        status = statusDecoded
        let sourceAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceAccount)
        sourceAccount = sourceAccountDecoded
        let destinationAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationAccount)
        destinationAccount = destinationAccountDecoded
        let destinationRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationRegion)
        destinationRegion = destinationRegionDecoded
        let expirationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .expirationTime)
        expirationTime = expirationTimeDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastUpdatedDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdated)
        lastUpdated = lastUpdatedDecoded
        let commentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .comment)
        comment = commentDecoded
        let standardControlsCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .standardControlsCount)
        standardControlsCount = standardControlsCountDecoded
        let customControlsCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .customControlsCount)
        customControlsCount = customControlsCountDecoded
        let complianceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .complianceType)
        complianceType = complianceTypeDecoded
    }
}
