// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BatchExecuteStatementInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case database = "Database"
        case dbUser = "DbUser"
        case secretArn = "SecretArn"
        case sqls = "Sqls"
        case statementName = "StatementName"
        case withEvent = "WithEvent"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterIdentifier = clusterIdentifier {
            try encodeContainer.encode(clusterIdentifier, forKey: .clusterIdentifier)
        }
        if let database = database {
            try encodeContainer.encode(database, forKey: .database)
        }
        if let dbUser = dbUser {
            try encodeContainer.encode(dbUser, forKey: .dbUser)
        }
        if let secretArn = secretArn {
            try encodeContainer.encode(secretArn, forKey: .secretArn)
        }
        if let sqls = sqls {
            var sqlsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sqls)
            for sqllist0 in sqls {
                try sqlsContainer.encode(sqllist0)
            }
        }
        if let statementName = statementName {
            try encodeContainer.encode(statementName, forKey: .statementName)
        }
        if let withEvent = withEvent {
            try encodeContainer.encode(withEvent, forKey: .withEvent)
        }
    }
}
