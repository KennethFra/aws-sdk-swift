// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DataExchangeClientTypes.ImportAssetFromApiGatewayApiResponseDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case apiDescription = "ApiDescription"
        case apiId = "ApiId"
        case apiKey = "ApiKey"
        case apiName = "ApiName"
        case apiSpecificationMd5Hash = "ApiSpecificationMd5Hash"
        case apiSpecificationUploadUrl = "ApiSpecificationUploadUrl"
        case apiSpecificationUploadUrlExpiresAt = "ApiSpecificationUploadUrlExpiresAt"
        case dataSetId = "DataSetId"
        case protocolType = "ProtocolType"
        case revisionId = "RevisionId"
        case stage = "Stage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let apiDescription = apiDescription {
            try encodeContainer.encode(apiDescription, forKey: .apiDescription)
        }
        if let apiId = apiId {
            try encodeContainer.encode(apiId, forKey: .apiId)
        }
        if let apiKey = apiKey {
            try encodeContainer.encode(apiKey, forKey: .apiKey)
        }
        if let apiName = apiName {
            try encodeContainer.encode(apiName, forKey: .apiName)
        }
        if let apiSpecificationMd5Hash = apiSpecificationMd5Hash {
            try encodeContainer.encode(apiSpecificationMd5Hash, forKey: .apiSpecificationMd5Hash)
        }
        if let apiSpecificationUploadUrl = apiSpecificationUploadUrl {
            try encodeContainer.encode(apiSpecificationUploadUrl, forKey: .apiSpecificationUploadUrl)
        }
        if let apiSpecificationUploadUrlExpiresAt = apiSpecificationUploadUrlExpiresAt {
            try encodeContainer.encode(apiSpecificationUploadUrlExpiresAt.timeIntervalSince1970, forKey: .apiSpecificationUploadUrlExpiresAt)
        }
        if let dataSetId = dataSetId {
            try encodeContainer.encode(dataSetId, forKey: .dataSetId)
        }
        if let protocolType = protocolType {
            try encodeContainer.encode(protocolType.rawValue, forKey: .protocolType)
        }
        if let revisionId = revisionId {
            try encodeContainer.encode(revisionId, forKey: .revisionId)
        }
        if let stage = stage {
            try encodeContainer.encode(stage, forKey: .stage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let apiDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .apiDescription)
        apiDescription = apiDescriptionDecoded
        let apiIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .apiId)
        apiId = apiIdDecoded
        let apiKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .apiKey)
        apiKey = apiKeyDecoded
        let apiNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .apiName)
        apiName = apiNameDecoded
        let apiSpecificationMd5HashDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .apiSpecificationMd5Hash)
        apiSpecificationMd5Hash = apiSpecificationMd5HashDecoded
        let apiSpecificationUploadUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .apiSpecificationUploadUrl)
        apiSpecificationUploadUrl = apiSpecificationUploadUrlDecoded
        let apiSpecificationUploadUrlExpiresAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .apiSpecificationUploadUrlExpiresAt)
        apiSpecificationUploadUrlExpiresAt = apiSpecificationUploadUrlExpiresAtDecoded
        let dataSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSetId)
        dataSetId = dataSetIdDecoded
        let protocolTypeDecoded = try containerValues.decodeIfPresent(DataExchangeClientTypes.ProtocolType.self, forKey: .protocolType)
        protocolType = protocolTypeDecoded
        let revisionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .revisionId)
        revisionId = revisionIdDecoded
        let stageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stage)
        stage = stageDecoded
    }
}
