// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateSolutionInputBody: Swift.Equatable {
    let name: Swift.String?
    let performHPO: Swift.Bool?
    let performAutoML: Swift.Bool
    let recipeArn: Swift.String?
    let datasetGroupArn: Swift.String?
    let eventType: Swift.String?
    let solutionConfig: PersonalizeClientTypes.SolutionConfig?
}

extension CreateSolutionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetGroupArn
        case eventType
        case name
        case performAutoML
        case performHPO
        case recipeArn
        case solutionConfig
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let performHPODecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .performHPO)
        performHPO = performHPODecoded
        let performAutoMLDecoded = try containerValues.decode(Swift.Bool.self, forKey: .performAutoML)
        performAutoML = performAutoMLDecoded
        let recipeArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recipeArn)
        recipeArn = recipeArnDecoded
        let datasetGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetGroupArn)
        datasetGroupArn = datasetGroupArnDecoded
        let eventTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventType)
        eventType = eventTypeDecoded
        let solutionConfigDecoded = try containerValues.decodeIfPresent(PersonalizeClientTypes.SolutionConfig.self, forKey: .solutionConfig)
        solutionConfig = solutionConfigDecoded
    }
}
