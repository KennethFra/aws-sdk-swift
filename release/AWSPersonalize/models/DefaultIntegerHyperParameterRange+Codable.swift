// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PersonalizeClientTypes.DefaultIntegerHyperParameterRange: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isTunable
        case maxValue
        case minValue
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if isTunable != false {
            try encodeContainer.encode(isTunable, forKey: .isTunable)
        }
        if maxValue != 0 {
            try encodeContainer.encode(maxValue, forKey: .maxValue)
        }
        if minValue != 0 {
            try encodeContainer.encode(minValue, forKey: .minValue)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let minValueDecoded = try containerValues.decode(Swift.Int.self, forKey: .minValue)
        minValue = minValueDecoded
        let maxValueDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxValue)
        maxValue = maxValueDecoded
        let isTunableDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTunable)
        isTunable = isTunableDecoded
    }
}
