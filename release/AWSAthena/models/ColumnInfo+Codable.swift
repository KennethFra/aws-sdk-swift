// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AthenaClientTypes.ColumnInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case caseSensitive = "CaseSensitive"
        case catalogName = "CatalogName"
        case label = "Label"
        case name = "Name"
        case nullable = "Nullable"
        case precision = "Precision"
        case scale = "Scale"
        case schemaName = "SchemaName"
        case tableName = "TableName"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if caseSensitive != false {
            try encodeContainer.encode(caseSensitive, forKey: .caseSensitive)
        }
        if let catalogName = catalogName {
            try encodeContainer.encode(catalogName, forKey: .catalogName)
        }
        if let label = label {
            try encodeContainer.encode(label, forKey: .label)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let nullable = nullable {
            try encodeContainer.encode(nullable.rawValue, forKey: .nullable)
        }
        if precision != 0 {
            try encodeContainer.encode(precision, forKey: .precision)
        }
        if scale != 0 {
            try encodeContainer.encode(scale, forKey: .scale)
        }
        if let schemaName = schemaName {
            try encodeContainer.encode(schemaName, forKey: .schemaName)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
        if let type = type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogName)
        catalogName = catalogNameDecoded
        let schemaNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaName)
        schemaName = schemaNameDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let labelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .label)
        label = labelDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let precisionDecoded = try containerValues.decode(Swift.Int.self, forKey: .precision)
        precision = precisionDecoded
        let scaleDecoded = try containerValues.decode(Swift.Int.self, forKey: .scale)
        scale = scaleDecoded
        let nullableDecoded = try containerValues.decodeIfPresent(AthenaClientTypes.ColumnNullable.self, forKey: .nullable)
        nullable = nullableDecoded
        let caseSensitiveDecoded = try containerValues.decode(Swift.Bool.self, forKey: .caseSensitive)
        caseSensitive = caseSensitiveDecoded
    }
}
